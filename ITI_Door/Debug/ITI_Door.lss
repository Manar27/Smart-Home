
ITI_Door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00005f0e  00005fa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080011a  0080011a  0000605c  2**0
                  ALLOC
  3 .stab         000042cc  00000000  00000000  0000605c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001100  00000000  00000000  0000a328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000efbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fb77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	ff e5       	ldi	r31, 0x5F	; 95
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 13 	call	0x26fc	; 0x26fc <main>
      8a:	0c 94 85 2f 	jmp	0x5f0a	; 0x5f0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e1       	ldi	r26, 0x12	; 18
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6a 2f 	jmp	0x5ed4	; 0x5ed4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5a 2f 	jmp	0x5eb4	; 0x5eb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 76 2f 	jmp	0x5eec	; 0x5eec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5a 2f 	jmp	0x5eb4	; 0x5eb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 76 2f 	jmp	0x5eec	; 0x5eec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e1       	ldi	r24, 0x12	; 18
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6a 2f 	jmp	0x5ed4	; 0x5ed4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 2f 	jmp	0x5eb4	; 0x5eb4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 76 2f 	jmp	0x5eec	; 0x5eec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5a 2f 	jmp	0x5eb4	; 0x5eb4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 76 2f 	jmp	0x5eec	; 0x5eec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5a 2f 	jmp	0x5eb4	; 0x5eb4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 76 2f 	jmp	0x5eec	; 0x5eec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5e 2f 	jmp	0x5ebc	; 0x5ebc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7a 2f 	jmp	0x5ef4	; 0x5ef4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_enuInit>:


static void (*GPTF_RX) (void) = NULL;

UART_tenuErrorStatus UART_enuInit (UART_tstrConfiguration* Add_pstrConfigue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_enuInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     b56:	19 82       	std	Y+1, r1	; 0x01
	if(Add_pstrConfigue== NULL)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	19 f4       	brne	.+6      	; 0xb66 <UART_enuInit+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	5a c0       	rjmp	.+180    	; 0xc1a <UART_enuInit+0xd4>
	}
	else
	{
		/*Enable UCSRC -> URSEL = 1*/
		Set_Bit(UART_UCSRC, UART_URSEL);
     b66:	a0 e4       	ldi	r26, 0x40	; 64
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	8c 93       	st	X, r24
		/*Set Parity bits*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8ParityBits;
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	90 81       	ld	r25, Z
     b7e:	ea 81       	ldd	r30, Y+2	; 0x02
     b80:	fb 81       	ldd	r31, Y+3	; 0x03
     b82:	80 81       	ld	r24, Z
     b84:	89 2b       	or	r24, r25
     b86:	8c 93       	st	X, r24
		/*Set Stop bit*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8PStopBit;
     b88:	a0 e4       	ldi	r26, 0x40	; 64
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	90 81       	ld	r25, Z
     b92:	ea 81       	ldd	r30, Y+2	; 0x02
     b94:	fb 81       	ldd	r31, Y+3	; 0x03
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	89 2b       	or	r24, r25
     b9a:	8c 93       	st	X, r24
		/*Check 9 bit*/
		if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     b9c:	ea 81       	ldd	r30, Y+2	; 0x02
     b9e:	fb 81       	ldd	r31, Y+3	; 0x03
     ba0:	82 81       	ldd	r24, Z+2	; 0x02
     ba2:	86 30       	cpi	r24, 0x06	; 6
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <UART_enuInit+0x6e>
		{
			UART_UCSRC |= 0x04;
     ba6:	a0 e4       	ldi	r26, 0x40	; 64
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e0 e4       	ldi	r30, 0x40	; 64
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	8c 93       	st	X, r24
		}
		/*Set Character Size*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8DataBits;
     bb4:	a0 e4       	ldi	r26, 0x40	; 64
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 e4       	ldi	r30, 0x40	; 64
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	90 81       	ld	r25, Z
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	89 2b       	or	r24, r25
     bc6:	8c 93       	st	X, r24
		/*Choose Transmit or Receive*/
		UART_UCSRB |= Add_pstrConfigue->UART_u8Mode;
     bc8:	aa e2       	ldi	r26, 0x2A	; 42
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea e2       	ldi	r30, 0x2A	; 42
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	90 81       	ld	r25, Z
     bd2:	ea 81       	ldd	r30, Y+2	; 0x02
     bd4:	fb 81       	ldd	r31, Y+3	; 0x03
     bd6:	83 81       	ldd	r24, Z+3	; 0x03
     bd8:	89 2b       	or	r24, r25
     bda:	8c 93       	st	X, r24
		/*Enable UBRRH -> URSEL = 0*/
		clear_Bit(UART_UCSRC, UART_URSEL);
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	8c 93       	st	X, r24
		/*Set Baud Rate*/
		UART_UBRRL |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     bea:	a9 e2       	ldi	r26, 0x29	; 41
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	20 81       	ld	r18, Z
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	84 81       	ldd	r24, Z+4	; 0x04
     bfa:	95 81       	ldd	r25, Z+5	; 0x05
     bfc:	82 2b       	or	r24, r18
     bfe:	8c 93       	st	X, r24
		UART_UBRRH |= (u8)((Add_pstrConfigue->UART_u16BaudRate) >> 8);
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	20 81       	ld	r18, Z
     c0a:	ea 81       	ldd	r30, Y+2	; 0x02
     c0c:	fb 81       	ldd	r31, Y+3	; 0x03
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	95 81       	ldd	r25, Z+5	; 0x05
     c12:	89 2f       	mov	r24, r25
     c14:	99 27       	eor	r25, r25
     c16:	82 2b       	or	r24, r18
     c18:	8c 93       	st	X, r24

	}
	return Local_enuErrorStatus;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <UART_enuInitRXInterrupt>:
UART_tenuErrorStatus UART_enuInitRXInterrupt (UART_tstrConfiguration* Add_pstrConfigue)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <UART_enuInitRXInterrupt+0x6>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     c38:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pstrConfigue== NULL)
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	19 f4       	brne	.+6      	; 0xc48 <UART_enuInitRXInterrupt+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	61 c0       	rjmp	.+194    	; 0xd0a <UART_enuInitRXInterrupt+0xe2>
	}
	else
	{
		/*Enable UCSRC -> URSEL = 1*/
		Set_Bit(UART_UCSRC, UART_URSEL);
     c48:	a0 e4       	ldi	r26, 0x40	; 64
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	8c 93       	st	X, r24
		/*Set Parity bits*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8ParityBits;
     c56:	a0 e4       	ldi	r26, 0x40	; 64
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e0 e4       	ldi	r30, 0x40	; 64
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	90 81       	ld	r25, Z
     c60:	ea 81       	ldd	r30, Y+2	; 0x02
     c62:	fb 81       	ldd	r31, Y+3	; 0x03
     c64:	80 81       	ld	r24, Z
     c66:	89 2b       	or	r24, r25
     c68:	8c 93       	st	X, r24
		/*Set Stop bit*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8PStopBit;
     c6a:	a0 e4       	ldi	r26, 0x40	; 64
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	90 81       	ld	r25, Z
     c74:	ea 81       	ldd	r30, Y+2	; 0x02
     c76:	fb 81       	ldd	r31, Y+3	; 0x03
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	89 2b       	or	r24, r25
     c7c:	8c 93       	st	X, r24
		/*Check 9 bit*/
		if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     c7e:	ea 81       	ldd	r30, Y+2	; 0x02
     c80:	fb 81       	ldd	r31, Y+3	; 0x03
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	86 30       	cpi	r24, 0x06	; 6
     c86:	39 f4       	brne	.+14     	; 0xc96 <UART_enuInitRXInterrupt+0x6e>
		{
			UART_UCSRC |= 0x04;
     c88:	a0 e4       	ldi	r26, 0x40	; 64
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e0 e4       	ldi	r30, 0x40	; 64
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	8c 93       	st	X, r24
		}
		/*Set Character Size*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8DataBits;
     c96:	a0 e4       	ldi	r26, 0x40	; 64
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e0 e4       	ldi	r30, 0x40	; 64
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	90 81       	ld	r25, Z
     ca0:	ea 81       	ldd	r30, Y+2	; 0x02
     ca2:	fb 81       	ldd	r31, Y+3	; 0x03
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	89 2b       	or	r24, r25
     ca8:	8c 93       	st	X, r24
		/*Choose Transmit or Receive*/
		UART_UCSRB |= Add_pstrConfigue->UART_u8Mode;
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	90 81       	ld	r25, Z
     cb4:	ea 81       	ldd	r30, Y+2	; 0x02
     cb6:	fb 81       	ldd	r31, Y+3	; 0x03
     cb8:	83 81       	ldd	r24, Z+3	; 0x03
     cba:	89 2b       	or	r24, r25
     cbc:	8c 93       	st	X, r24

		/*enable RXCIE RX complete interrupt*/
		Set_Bit(UART_UCSRB,UART_RXCIE);
     cbe:	aa e2       	ldi	r26, 0x2A	; 42
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ea e2       	ldi	r30, 0x2A	; 42
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 68       	ori	r24, 0x80	; 128
     cca:	8c 93       	st	X, r24

		/*Enable UBRRH -> URSEL = 0*/
		clear_Bit(UART_UCSRC, UART_URSEL);
     ccc:	a0 e4       	ldi	r26, 0x40	; 64
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e0 e4       	ldi	r30, 0x40	; 64
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8f 77       	andi	r24, 0x7F	; 127
     cd8:	8c 93       	st	X, r24
		/*Set Baud Rate*/
		UART_UBRRL |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     cda:	a9 e2       	ldi	r26, 0x29	; 41
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e9 e2       	ldi	r30, 0x29	; 41
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	20 81       	ld	r18, Z
     ce4:	ea 81       	ldd	r30, Y+2	; 0x02
     ce6:	fb 81       	ldd	r31, Y+3	; 0x03
     ce8:	84 81       	ldd	r24, Z+4	; 0x04
     cea:	95 81       	ldd	r25, Z+5	; 0x05
     cec:	82 2b       	or	r24, r18
     cee:	8c 93       	st	X, r24
		UART_UBRRH |= (u8)((Add_pstrConfigue->UART_u16BaudRate) >> 8);
     cf0:	a0 e4       	ldi	r26, 0x40	; 64
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e0 e4       	ldi	r30, 0x40	; 64
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 81       	ld	r18, Z
     cfa:	ea 81       	ldd	r30, Y+2	; 0x02
     cfc:	fb 81       	ldd	r31, Y+3	; 0x03
     cfe:	84 81       	ldd	r24, Z+4	; 0x04
     d00:	95 81       	ldd	r25, Z+5	; 0x05
     d02:	89 2f       	mov	r24, r25
     d04:	99 27       	eor	r25, r25
     d06:	82 2b       	or	r24, r18
     d08:	8c 93       	st	X, r24
	}
	return Local_enuErrorStatus;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <UART_enuTransmite>:
UART_tenuErrorStatus UART_enuTransmite (u16 Copy_pu16Data)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <UART_enuTransmite+0x6>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     d28:	19 82       	std	Y+1, r1	; 0x01
		Local_enuErrorStatus= UART_NOK;
	}
	else
	{
		/*Polling on the flag -> wait for UDR to be empty*/
		while((Get_Bit(UART_UCSRA, UART_UDRE)) == 0);
     d2a:	eb e2       	ldi	r30, 0x2B	; 43
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	82 95       	swap	r24
     d32:	86 95       	lsr	r24
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	81 70       	andi	r24, 0x01	; 1
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	a1 f3       	breq	.-24     	; 0xd2a <UART_enuTransmite+0x12>

		/*Clear TXB8*/
		clear_Bit(UART_UCSRB, UART_TXB8);
     d42:	aa e2       	ldi	r26, 0x2A	; 42
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ea e2       	ldi	r30, 0x2A	; 42
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8e 7f       	andi	r24, 0xFE	; 254
     d4e:	8c 93       	st	X, r24
		if ( Copy_pu16Data & 0x0100 )
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	80 70       	andi	r24, 0x00	; 0
     d56:	91 70       	andi	r25, 0x01	; 1
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	39 f0       	breq	.+14     	; 0xd6a <UART_enuTransmite+0x52>
		{
			Set_Bit(UART_UCSRB, UART_TXB8);
     d5c:	aa e2       	ldi	r26, 0x2A	; 42
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ea e2       	ldi	r30, 0x2A	; 42
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	8c 93       	st	X, r24
		}
		/* Put data into UDR Register */
		UART_UDR = (u8)(Copy_pu16Data);
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	80 83       	st	Z, r24
	}
	return Local_enuErrorStatus;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <UART_enuReceive>:

UART_tenuErrorStatus UART_enuReceive (u8* Add_pu8Data)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <UART_enuReceive+0x6>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     d90:	19 82       	std	Y+1, r1	; 0x01
	if(Add_pu8Data == NULL)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	19 f4       	brne	.+6      	; 0xda0 <UART_enuReceive+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	29 c0       	rjmp	.+82     	; 0xdf2 <UART_enuReceive+0x72>
	}
	else
	{
		/*Polling on the flag -> wait for data to be received*/
		while((Get_Bit(UART_UCSRA,UART_RXC)) == 0);
     da0:	eb e2       	ldi	r30, 0x2B	; 43
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	dc f7       	brge	.-10     	; 0xda0 <UART_enuReceive+0x20>
		/*Check frame error and Data over Run error*/
		if((Get_Bit(UART_UCSRA,UART_DOR)) || (Get_Bit(UART_UCSRA,UART_FE)))
     daa:	eb e2       	ldi	r30, 0x2B	; 43
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	86 95       	lsr	r24
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	81 70       	andi	r24, 0x01	; 1
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	88 23       	and	r24, r24
     dc0:	59 f4       	brne	.+22     	; 0xdd8 <UART_enuReceive+0x58>
     dc2:	eb e2       	ldi	r30, 0x2B	; 43
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	82 95       	swap	r24
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	88 23       	and	r24, r24
     dd6:	19 f0       	breq	.+6      	; 0xdde <UART_enuReceive+0x5e>
		{
			Local_enuErrorStatus= UART_NOK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <UART_enuReceive+0x72>
		}
		else
		{
			//*Add_pu16Data =(((UART_u8_UCSRB_REG>>1) & 0X01) << 8); // get bit number 9
			*Add_pu8Data |= UART_UDR;     // get Lowbyte
     dde:	ea 81       	ldd	r30, Y+2	; 0x02
     de0:	fb 81       	ldd	r31, Y+3	; 0x03
     de2:	90 81       	ld	r25, Z
     de4:	ec e2       	ldi	r30, 0x2C	; 44
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	89 2b       	or	r24, r25
     dec:	ea 81       	ldd	r30, Y+2	; 0x02
     dee:	fb 81       	ldd	r31, Y+3	; 0x03
     df0:	80 83       	st	Z, r24
		}
	}
	return Local_enuErrorStatus;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <UART_InterruptReceive>:
void UART_InterruptReceive(u8* Add_pu8Data)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <UART_InterruptReceive+0x6>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
	*Add_pu8Data |= UART_UDR;     // get Lowbyte
     e0e:	e9 81       	ldd	r30, Y+1	; 0x01
     e10:	fa 81       	ldd	r31, Y+2	; 0x02
     e12:	90 81       	ld	r25, Z
     e14:	ec e2       	ldi	r30, 0x2C	; 44
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	89 2b       	or	r24, r25
     e1c:	e9 81       	ldd	r30, Y+1	; 0x01
     e1e:	fa 81       	ldd	r31, Y+2	; 0x02
     e20:	80 83       	st	Z, r24
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <UART_CallBackFunctionRX>:
void UART_CallBackFunctionRX(void (*PTF)(void))
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <UART_CallBackFunctionRX+0x6>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
	GPTF_RX = PTF;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	90 93 1b 01 	sts	0x011B, r25
     e42:	80 93 1a 01 	sts	0x011A, r24
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <__vector_13>:
void __vector_13(void)
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	GPTF_RX();
     e7a:	e0 91 1a 01 	lds	r30, 0x011A
     e7e:	f0 91 1b 01 	lds	r31, 0x011B
     e82:	09 95       	icall
}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	ff 91       	pop	r31
     e8a:	ef 91       	pop	r30
     e8c:	bf 91       	pop	r27
     e8e:	af 91       	pop	r26
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	7f 91       	pop	r23
     e96:	6f 91       	pop	r22
     e98:	5f 91       	pop	r21
     e9a:	4f 91       	pop	r20
     e9c:	3f 91       	pop	r19
     e9e:	2f 91       	pop	r18
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <GIE_VoidEnable>:

#include "../Header/GIE_Register.h"
#include "../Header/GIE_interface.h"

void GIE_VoidEnable (void)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GIE_SREG,GIE_SREG_I);
     eb2:	af e5       	ldi	r26, 0x5F	; 95
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ef e5       	ldi	r30, 0x5F	; 95
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 68       	ori	r24, 0x80	; 128
     ebe:	8c 93       	st	X, r24
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <GIE_VoidDisable>:

void GIE_VoidDisable (void)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	clear_Bit(GIE_SREG,GIE_SREG_I);
     ece:	af e5       	ldi	r26, 0x5F	; 95
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ef e5       	ldi	r30, 0x5F	; 95
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8f 77       	andi	r24, 0x7F	; 127
     eda:	8c 93       	st	X, r24
}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <DIO_VoidSetPinDir>:
#include "../Header/DIO_interface.h"
#include "../Header/DIO_Private.h"
#include "../Header/DIO_Register.h"

void DIO_VoidSetPinDir(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_DirectionState)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	27 97       	sbiw	r28, 0x07	; 7
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	6a 83       	std	Y+2, r22	; 0x02
     efa:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	85 30       	cpi	r24, 0x05	; 5
     f00:	08 f0       	brcs	.+2      	; 0xf04 <DIO_VoidSetPinDir+0x22>
     f02:	f0 c0       	rjmp	.+480    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	08 f0       	brcs	.+2      	; 0xf0c <DIO_VoidSetPinDir+0x2a>
     f0a:	ec c0       	rjmp	.+472    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
	{
		if (Local_DirectionState == Input)
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 23       	and	r24, r24
     f10:	09 f0       	breq	.+2      	; 0xf14 <DIO_VoidSetPinDir+0x32>
     f12:	75 c0       	rjmp	.+234    	; 0xffe <DIO_VoidSetPinDir+0x11c>
		{
			switch (Local_Groupname)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3f 83       	std	Y+7, r19	; 0x07
     f1c:	2e 83       	std	Y+6, r18	; 0x06
     f1e:	8e 81       	ldd	r24, Y+6	; 0x06
     f20:	9f 81       	ldd	r25, Y+7	; 0x07
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	91 05       	cpc	r25, r1
     f26:	61 f1       	breq	.+88     	; 0xf80 <DIO_VoidSetPinDir+0x9e>
     f28:	2e 81       	ldd	r18, Y+6	; 0x06
     f2a:	3f 81       	ldd	r19, Y+7	; 0x07
     f2c:	23 30       	cpi	r18, 0x03	; 3
     f2e:	31 05       	cpc	r19, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <DIO_VoidSetPinDir+0x5c>
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	9f 81       	ldd	r25, Y+7	; 0x07
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <DIO_VoidSetPinDir+0x74>
     f3c:	d3 c0       	rjmp	.+422    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
     f3e:	2e 81       	ldd	r18, Y+6	; 0x06
     f40:	3f 81       	ldd	r19, Y+7	; 0x07
     f42:	23 30       	cpi	r18, 0x03	; 3
     f44:	31 05       	cpc	r19, r1
     f46:	89 f1       	breq	.+98     	; 0xfaa <DIO_VoidSetPinDir+0xc8>
     f48:	8e 81       	ldd	r24, Y+6	; 0x06
     f4a:	9f 81       	ldd	r25, Y+7	; 0x07
     f4c:	84 30       	cpi	r24, 0x04	; 4
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <DIO_VoidSetPinDir+0x72>
     f52:	40 c0       	rjmp	.+128    	; 0xfd4 <DIO_VoidSetPinDir+0xf2>
     f54:	c7 c0       	rjmp	.+398    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					clear_Bit(DIO_DDRA, Local_PinNumber);
     f56:	aa e3       	ldi	r26, 0x3A	; 58
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ea e3       	ldi	r30, 0x3A	; 58
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_VoidSetPinDir+0x92>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_VoidSetPinDir+0x8e>
     f78:	80 95       	com	r24
     f7a:	84 23       	and	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	b2 c0       	rjmp	.+356    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					clear_Bit (DIO_DDRB, Local_PinNumber);
     f80:	a7 e3       	ldi	r26, 0x37	; 55
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_VoidSetPinDir+0xbc>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_VoidSetPinDir+0xb8>
     fa2:	80 95       	com	r24
     fa4:	84 23       	and	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	9d c0       	rjmp	.+314    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					clear_Bit (DIO_DDRC, Local_PinNumber);
     faa:	a4 e3       	ldi	r26, 0x34	; 52
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e4 e3       	ldi	r30, 0x34	; 52
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_VoidSetPinDir+0xe6>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_VoidSetPinDir+0xe2>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	88 c0       	rjmp	.+272    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					clear_Bit (DIO_DDRD, Local_PinNumber);
     fd4:	a1 e3       	ldi	r26, 0x31	; 49
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e1 e3       	ldi	r30, 0x31	; 49
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_VoidSetPinDir+0x110>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_VoidSetPinDir+0x10c>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	73 c0       	rjmp	.+230    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
					break;
			}
		}
		else if (Local_DirectionState == Output)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	09 f0       	breq	.+2      	; 0x1006 <DIO_VoidSetPinDir+0x124>
    1004:	6f c0       	rjmp	.+222    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
		{
			switch (Local_Groupname)
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	3d 83       	std	Y+5, r19	; 0x05
    100e:	2c 83       	std	Y+4, r18	; 0x04
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	91 05       	cpc	r25, r1
    1018:	51 f1       	breq	.+84     	; 0x106e <DIO_VoidSetPinDir+0x18c>
    101a:	2c 81       	ldd	r18, Y+4	; 0x04
    101c:	3d 81       	ldd	r19, Y+5	; 0x05
    101e:	23 30       	cpi	r18, 0x03	; 3
    1020:	31 05       	cpc	r19, r1
    1022:	34 f4       	brge	.+12     	; 0x1030 <DIO_VoidSetPinDir+0x14e>
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	61 f0       	breq	.+24     	; 0x1046 <DIO_VoidSetPinDir+0x164>
    102e:	5a c0       	rjmp	.+180    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	23 30       	cpi	r18, 0x03	; 3
    1036:	31 05       	cpc	r19, r1
    1038:	71 f1       	breq	.+92     	; 0x1096 <DIO_VoidSetPinDir+0x1b4>
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	84 30       	cpi	r24, 0x04	; 4
    1040:	91 05       	cpc	r25, r1
    1042:	e9 f1       	breq	.+122    	; 0x10be <DIO_VoidSetPinDir+0x1dc>
    1044:	4f c0       	rjmp	.+158    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					Set_Bit(DIO_DDRA, Local_PinNumber);
    1046:	aa e3       	ldi	r26, 0x3A	; 58
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ea e3       	ldi	r30, 0x3A	; 58
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_VoidSetPinDir+0x182>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_VoidSetPinDir+0x17e>
    1068:	84 2b       	or	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	3b c0       	rjmp	.+118    	; 0x10e4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					Set_Bit(DIO_DDRB, Local_PinNumber);
    106e:	a7 e3       	ldi	r26, 0x37	; 55
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e3       	ldi	r30, 0x37	; 55
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_VoidSetPinDir+0x1aa>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_VoidSetPinDir+0x1a6>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	27 c0       	rjmp	.+78     	; 0x10e4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					Set_Bit(DIO_DDRC, Local_PinNumber);
    1096:	a4 e3       	ldi	r26, 0x34	; 52
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e4 e3       	ldi	r30, 0x34	; 52
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_VoidSetPinDir+0x1d2>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_VoidSetPinDir+0x1ce>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	13 c0       	rjmp	.+38     	; 0x10e4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					Set_Bit(DIO_DDRD, Local_PinNumber);
    10be:	a1 e3       	ldi	r26, 0x31	; 49
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e1 e3       	ldi	r30, 0x31	; 49
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_VoidSetPinDir+0x1fa>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_VoidSetPinDir+0x1f6>
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    10e4:	27 96       	adiw	r28, 0x07	; 7
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_valueState)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	27 97       	sbiw	r28, 0x07	; 7
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	6a 83       	std	Y+2, r22	; 0x02
    110e:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	08 f0       	brcs	.+2      	; 0x1118 <DIO_VoidSetPinValue+0x22>
    1116:	f0 c0       	rjmp	.+480    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 30       	cpi	r24, 0x08	; 8
    111c:	08 f0       	brcs	.+2      	; 0x1120 <DIO_VoidSetPinValue+0x2a>
    111e:	ec c0       	rjmp	.+472    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
	{
		if (Local_valueState == Low)
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 23       	and	r24, r24
    1124:	09 f0       	breq	.+2      	; 0x1128 <DIO_VoidSetPinValue+0x32>
    1126:	75 c0       	rjmp	.+234    	; 0x1212 <DIO_VoidSetPinValue+0x11c>
		{
			switch (Local_Groupname)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3f 83       	std	Y+7, r19	; 0x07
    1130:	2e 83       	std	Y+6, r18	; 0x06
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	91 05       	cpc	r25, r1
    113a:	61 f1       	breq	.+88     	; 0x1194 <DIO_VoidSetPinValue+0x9e>
    113c:	2e 81       	ldd	r18, Y+6	; 0x06
    113e:	3f 81       	ldd	r19, Y+7	; 0x07
    1140:	23 30       	cpi	r18, 0x03	; 3
    1142:	31 05       	cpc	r19, r1
    1144:	34 f4       	brge	.+12     	; 0x1152 <DIO_VoidSetPinValue+0x5c>
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	9f 81       	ldd	r25, Y+7	; 0x07
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	69 f0       	breq	.+26     	; 0x116a <DIO_VoidSetPinValue+0x74>
    1150:	d3 c0       	rjmp	.+422    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
    1152:	2e 81       	ldd	r18, Y+6	; 0x06
    1154:	3f 81       	ldd	r19, Y+7	; 0x07
    1156:	23 30       	cpi	r18, 0x03	; 3
    1158:	31 05       	cpc	r19, r1
    115a:	89 f1       	breq	.+98     	; 0x11be <DIO_VoidSetPinValue+0xc8>
    115c:	8e 81       	ldd	r24, Y+6	; 0x06
    115e:	9f 81       	ldd	r25, Y+7	; 0x07
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_VoidSetPinValue+0x72>
    1166:	40 c0       	rjmp	.+128    	; 0x11e8 <DIO_VoidSetPinValue+0xf2>
    1168:	c7 c0       	rjmp	.+398    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					clear_Bit(DIO_PORTA, Local_PinNumber);
    116a:	ab e3       	ldi	r26, 0x3B	; 59
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_VoidSetPinValue+0x92>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_VoidSetPinValue+0x8e>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	b2 c0       	rjmp	.+356    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					clear_Bit(DIO_PORTB, Local_PinNumber);
    1194:	a8 e3       	ldi	r26, 0x38	; 56
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e8 e3       	ldi	r30, 0x38	; 56
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_VoidSetPinValue+0xbc>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_VoidSetPinValue+0xb8>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	9d c0       	rjmp	.+314    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					clear_Bit(DIO_PORTC, Local_PinNumber);
    11be:	a5 e3       	ldi	r26, 0x35	; 53
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e3       	ldi	r30, 0x35	; 53
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_VoidSetPinValue+0xe6>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_VoidSetPinValue+0xe2>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	88 c0       	rjmp	.+272    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					clear_Bit(DIO_PORTD, Local_PinNumber);
    11e8:	a2 e3       	ldi	r26, 0x32	; 50
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e2 e3       	ldi	r30, 0x32	; 50
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_VoidSetPinValue+0x110>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_VoidSetPinValue+0x10c>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	73 c0       	rjmp	.+230    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
					break;
			}
		}
		else if (Local_valueState == High)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	09 f0       	breq	.+2      	; 0x121a <DIO_VoidSetPinValue+0x124>
    1218:	6f c0       	rjmp	.+222    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
		{
			switch (Local_Groupname)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3d 83       	std	Y+5, r19	; 0x05
    1222:	2c 83       	std	Y+4, r18	; 0x04
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	91 05       	cpc	r25, r1
    122c:	51 f1       	breq	.+84     	; 0x1282 <DIO_VoidSetPinValue+0x18c>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	23 30       	cpi	r18, 0x03	; 3
    1234:	31 05       	cpc	r19, r1
    1236:	34 f4       	brge	.+12     	; 0x1244 <DIO_VoidSetPinValue+0x14e>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	61 f0       	breq	.+24     	; 0x125a <DIO_VoidSetPinValue+0x164>
    1242:	5a c0       	rjmp	.+180    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	23 30       	cpi	r18, 0x03	; 3
    124a:	31 05       	cpc	r19, r1
    124c:	71 f1       	breq	.+92     	; 0x12aa <DIO_VoidSetPinValue+0x1b4>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	91 05       	cpc	r25, r1
    1256:	e9 f1       	breq	.+122    	; 0x12d2 <DIO_VoidSetPinValue+0x1dc>
    1258:	4f c0       	rjmp	.+158    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					Set_Bit(DIO_PORTA, Local_PinNumber);
    125a:	ab e3       	ldi	r26, 0x3B	; 59
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_VoidSetPinValue+0x182>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_VoidSetPinValue+0x17e>
    127c:	84 2b       	or	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	3b c0       	rjmp	.+118    	; 0x12f8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					Set_Bit(DIO_PORTB, Local_PinNumber);
    1282:	a8 e3       	ldi	r26, 0x38	; 56
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e8 e3       	ldi	r30, 0x38	; 56
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_VoidSetPinValue+0x1aa>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_VoidSetPinValue+0x1a6>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					Set_Bit(DIO_PORTC, Local_PinNumber);
    12aa:	a5 e3       	ldi	r26, 0x35	; 53
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e3       	ldi	r30, 0x35	; 53
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_VoidSetPinValue+0x1d2>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_VoidSetPinValue+0x1ce>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					Set_Bit(DIO_PORTD, Local_PinNumber);
    12d2:	a2 e3       	ldi	r26, 0x32	; 50
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e2 e3       	ldi	r30, 0x32	; 50
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_VoidSetPinValue+0x1fa>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_VoidSetPinValue+0x1f6>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    12f8:	27 96       	adiw	r28, 0x07	; 7
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <DIO_u8GetPinValue>:
u8	 DIO_u8GetPinValue (u8 Local_Groupname, u8 Local_PinNumber)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <DIO_u8GetPinValue+0x6>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <DIO_u8GetPinValue+0x8>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <DIO_u8GetPinValue+0xa>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_returndata = 0;
    131c:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	85 30       	cpi	r24, 0x05	; 5
    1322:	08 f0       	brcs	.+2      	; 0x1326 <DIO_u8GetPinValue+0x1c>
    1324:	6e c0       	rjmp	.+220    	; 0x1402 <DIO_u8GetPinValue+0xf8>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 30       	cpi	r24, 0x08	; 8
    132a:	08 f0       	brcs	.+2      	; 0x132e <DIO_u8GetPinValue+0x24>
    132c:	6a c0       	rjmp	.+212    	; 0x1402 <DIO_u8GetPinValue+0xf8>
	{
		switch (Local_Groupname)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3e 83       	std	Y+6, r19	; 0x06
    1336:	2d 83       	std	Y+5, r18	; 0x05
    1338:	4d 81       	ldd	r20, Y+5	; 0x05
    133a:	5e 81       	ldd	r21, Y+6	; 0x06
    133c:	42 30       	cpi	r20, 0x02	; 2
    133e:	51 05       	cpc	r21, r1
    1340:	41 f1       	breq	.+80     	; 0x1392 <DIO_u8GetPinValue+0x88>
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	91 05       	cpc	r25, r1
    134a:	34 f4       	brge	.+12     	; 0x1358 <DIO_u8GetPinValue+0x4e>
    134c:	2d 81       	ldd	r18, Y+5	; 0x05
    134e:	3e 81       	ldd	r19, Y+6	; 0x06
    1350:	21 30       	cpi	r18, 0x01	; 1
    1352:	31 05       	cpc	r19, r1
    1354:	61 f0       	breq	.+24     	; 0x136e <DIO_u8GetPinValue+0x64>
    1356:	52 c0       	rjmp	.+164    	; 0x13fc <DIO_u8GetPinValue+0xf2>
    1358:	4d 81       	ldd	r20, Y+5	; 0x05
    135a:	5e 81       	ldd	r21, Y+6	; 0x06
    135c:	43 30       	cpi	r20, 0x03	; 3
    135e:	51 05       	cpc	r21, r1
    1360:	51 f1       	breq	.+84     	; 0x13b6 <DIO_u8GetPinValue+0xac>
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	91 05       	cpc	r25, r1
    136a:	b9 f1       	breq	.+110    	; 0x13da <DIO_u8GetPinValue+0xd0>
    136c:	47 c0       	rjmp	.+142    	; 0x13fc <DIO_u8GetPinValue+0xf2>
		{
			case Group_A:
				Local_returndata = Get_Bit(DIO_PINA, Local_PinNumber);
    136e:	e9 e3       	ldi	r30, 0x39	; 57
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a9 01       	movw	r20, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_u8GetPinValue+0x7c>
    1382:	55 95       	asr	r21
    1384:	47 95       	ror	r20
    1386:	8a 95       	dec	r24
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_u8GetPinValue+0x78>
    138a:	ca 01       	movw	r24, r20
    138c:	81 70       	andi	r24, 0x01	; 1
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	35 c0       	rjmp	.+106    	; 0x13fc <DIO_u8GetPinValue+0xf2>
				break;
			case Group_B:
				Local_returndata = Get_Bit(DIO_PINB, Local_PinNumber);
    1392:	e6 e3       	ldi	r30, 0x36	; 54
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a9 01       	movw	r20, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_u8GetPinValue+0xa0>
    13a6:	55 95       	asr	r21
    13a8:	47 95       	ror	r20
    13aa:	8a 95       	dec	r24
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_u8GetPinValue+0x9c>
    13ae:	ca 01       	movw	r24, r20
    13b0:	81 70       	andi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	23 c0       	rjmp	.+70     	; 0x13fc <DIO_u8GetPinValue+0xf2>
				break;
			case Group_C:
				Local_returndata = Get_Bit(DIO_PINC, Local_PinNumber);
    13b6:	e3 e3       	ldi	r30, 0x33	; 51
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_u8GetPinValue+0xc4>
    13ca:	55 95       	asr	r21
    13cc:	47 95       	ror	r20
    13ce:	8a 95       	dec	r24
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_u8GetPinValue+0xc0>
    13d2:	ca 01       	movw	r24, r20
    13d4:	81 70       	andi	r24, 0x01	; 1
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	11 c0       	rjmp	.+34     	; 0x13fc <DIO_u8GetPinValue+0xf2>
				break;
			case Group_D:
				Local_returndata = Get_Bit(DIO_PIND, Local_PinNumber);
    13da:	e0 e3       	ldi	r30, 0x30	; 48
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a9 01       	movw	r20, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_u8GetPinValue+0xe8>
    13ee:	55 95       	asr	r21
    13f0:	47 95       	ror	r20
    13f2:	8a 95       	dec	r24
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_u8GetPinValue+0xe4>
    13f6:	ca 01       	movw	r24, r20
    13f8:	81 70       	andi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    13fc:	59 81       	ldd	r21, Y+1	; 0x01
    13fe:	5c 83       	std	Y+4, r21	; 0x04
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_u8GetPinValue+0xfc>
	}
	else
	{
		return -1;
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	8c 83       	std	Y+4, r24	; 0x04
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    1408:	26 96       	adiw	r28, 0x06	; 6
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_VoidSetPortDir>:
void DIO_VoidSetPortDir(u8 Local_Groupname, u8 Local_DirectionState)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_VoidSetPortDir+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_VoidSetPortDir+0x8>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3c 83       	std	Y+4, r19	; 0x04
    1432:	2b 83       	std	Y+3, r18	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	91 05       	cpc	r25, r1
    143c:	d9 f0       	breq	.+54     	; 0x1474 <DIO_VoidSetPortDir+0x5a>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	23 30       	cpi	r18, 0x03	; 3
    1444:	31 05       	cpc	r19, r1
    1446:	34 f4       	brge	.+12     	; 0x1454 <DIO_VoidSetPortDir+0x3a>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	61 f0       	breq	.+24     	; 0x146a <DIO_VoidSetPortDir+0x50>
    1452:	1e c0       	rjmp	.+60     	; 0x1490 <DIO_VoidSetPortDir+0x76>
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	3c 81       	ldd	r19, Y+4	; 0x04
    1458:	23 30       	cpi	r18, 0x03	; 3
    145a:	31 05       	cpc	r19, r1
    145c:	81 f0       	breq	.+32     	; 0x147e <DIO_VoidSetPortDir+0x64>
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	84 30       	cpi	r24, 0x04	; 4
    1464:	91 05       	cpc	r25, r1
    1466:	81 f0       	breq	.+32     	; 0x1488 <DIO_VoidSetPortDir+0x6e>
    1468:	13 c0       	rjmp	.+38     	; 0x1490 <DIO_VoidSetPortDir+0x76>
	{
		case Group_A:
			DIO_DDRA = Local_DirectionState;
    146a:	ea e3       	ldi	r30, 0x3A	; 58
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 83       	st	Z, r24
    1472:	0e c0       	rjmp	.+28     	; 0x1490 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_B:
			DIO_DDRB = Local_DirectionState;
    1474:	e7 e3       	ldi	r30, 0x37	; 55
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	80 83       	st	Z, r24
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_C:
			DIO_DDRC = Local_DirectionState;
    147e:	e4 e3       	ldi	r30, 0x34	; 52
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	80 83       	st	Z, r24
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_D:
			DIO_DDRD = Local_DirectionState;
    1488:	e1 e3       	ldi	r30, 0x31	; 49
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	80 83       	st	Z, r24
			break;
	}
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Local_Groupname, u8 Local_valueState)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <DIO_VoidSetPortValue+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <DIO_VoidSetPortValue+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3c 83       	std	Y+4, r19	; 0x04
    14b6:	2b 83       	std	Y+3, r18	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	91 05       	cpc	r25, r1
    14c0:	d9 f0       	breq	.+54     	; 0x14f8 <DIO_VoidSetPortValue+0x5a>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	23 30       	cpi	r18, 0x03	; 3
    14c8:	31 05       	cpc	r19, r1
    14ca:	34 f4       	brge	.+12     	; 0x14d8 <DIO_VoidSetPortValue+0x3a>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	61 f0       	breq	.+24     	; 0x14ee <DIO_VoidSetPortValue+0x50>
    14d6:	1e c0       	rjmp	.+60     	; 0x1514 <DIO_VoidSetPortValue+0x76>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	23 30       	cpi	r18, 0x03	; 3
    14de:	31 05       	cpc	r19, r1
    14e0:	81 f0       	breq	.+32     	; 0x1502 <DIO_VoidSetPortValue+0x64>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	91 05       	cpc	r25, r1
    14ea:	81 f0       	breq	.+32     	; 0x150c <DIO_VoidSetPortValue+0x6e>
    14ec:	13 c0       	rjmp	.+38     	; 0x1514 <DIO_VoidSetPortValue+0x76>
	{
		case Group_A:
			DIO_PORTA = Local_valueState;
    14ee:	eb e3       	ldi	r30, 0x3B	; 59
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	80 83       	st	Z, r24
    14f6:	0e c0       	rjmp	.+28     	; 0x1514 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_B:
			DIO_PORTB = Local_valueState;
    14f8:	e8 e3       	ldi	r30, 0x38	; 56
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	80 83       	st	Z, r24
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_C:
			DIO_PORTC = Local_valueState;
    1502:	e5 e3       	ldi	r30, 0x35	; 53
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_D:
			DIO_PORTD = Local_valueState;
    150c:	e2 e3       	ldi	r30, 0x32	; 50
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
			break;
	}
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <DIO_u8GetPortValue>:
u8	 DIO_u8GetPortValue (u8 Local_Groupname)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <DIO_u8GetPortValue+0x6>
    1528:	00 d0       	rcall	.+0      	; 0x152a <DIO_u8GetPortValue+0x8>
    152a:	0f 92       	push	r0
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_returndata = 0;
    1532:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D)
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	85 30       	cpi	r24, 0x05	; 5
    1538:	b0 f5       	brcc	.+108    	; 0x15a6 <DIO_u8GetPortValue+0x84>
	{
		switch (Local_Groupname)
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3d 83       	std	Y+5, r19	; 0x05
    1542:	2c 83       	std	Y+4, r18	; 0x04
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	91 05       	cpc	r25, r1
    154c:	d9 f0       	breq	.+54     	; 0x1584 <DIO_u8GetPortValue+0x62>
    154e:	2c 81       	ldd	r18, Y+4	; 0x04
    1550:	3d 81       	ldd	r19, Y+5	; 0x05
    1552:	23 30       	cpi	r18, 0x03	; 3
    1554:	31 05       	cpc	r19, r1
    1556:	34 f4       	brge	.+12     	; 0x1564 <DIO_u8GetPortValue+0x42>
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	61 f0       	breq	.+24     	; 0x157a <DIO_u8GetPortValue+0x58>
    1562:	1e c0       	rjmp	.+60     	; 0x15a0 <DIO_u8GetPortValue+0x7e>
    1564:	2c 81       	ldd	r18, Y+4	; 0x04
    1566:	3d 81       	ldd	r19, Y+5	; 0x05
    1568:	23 30       	cpi	r18, 0x03	; 3
    156a:	31 05       	cpc	r19, r1
    156c:	81 f0       	breq	.+32     	; 0x158e <DIO_u8GetPortValue+0x6c>
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	91 05       	cpc	r25, r1
    1576:	81 f0       	breq	.+32     	; 0x1598 <DIO_u8GetPortValue+0x76>
    1578:	13 c0       	rjmp	.+38     	; 0x15a0 <DIO_u8GetPortValue+0x7e>
		{
			case Group_A:
				Local_returndata = DIO_PINA;
    157a:	e9 e3       	ldi	r30, 0x39	; 57
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	0e c0       	rjmp	.+28     	; 0x15a0 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_B:
				Local_returndata = DIO_PINB;
    1584:	e6 e3       	ldi	r30, 0x36	; 54
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	09 c0       	rjmp	.+18     	; 0x15a0 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_C:
				Local_returndata = DIO_PINC;
    158e:	e3 e3       	ldi	r30, 0x33	; 51
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_D:
				Local_returndata = DIO_PIND;
    1598:	e0 e3       	ldi	r30, 0x30	; 48
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    15a0:	99 81       	ldd	r25, Y+1	; 0x01
    15a2:	9b 83       	std	Y+3, r25	; 0x03
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_u8GetPortValue+0x88>
	}
	else
	{
		return -1;
    15a6:	2f ef       	ldi	r18, 0xFF	; 255
    15a8:	2b 83       	std	Y+3, r18	; 0x03
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <DIO_VoidToggleBit>:
void DIO_VoidToggleBit(u8 Local_Groupname, u8 Local_PinNumber)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <DIO_VoidToggleBit+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_VoidToggleBit+0x8>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3c 83       	std	Y+4, r19	; 0x04
    15d4:	2b 83       	std	Y+3, r18	; 0x03
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	91 05       	cpc	r25, r1
    15de:	51 f1       	breq	.+84     	; 0x1634 <DIO_VoidToggleBit+0x78>
    15e0:	2b 81       	ldd	r18, Y+3	; 0x03
    15e2:	3c 81       	ldd	r19, Y+4	; 0x04
    15e4:	23 30       	cpi	r18, 0x03	; 3
    15e6:	31 05       	cpc	r19, r1
    15e8:	34 f4       	brge	.+12     	; 0x15f6 <DIO_VoidToggleBit+0x3a>
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	91 05       	cpc	r25, r1
    15f2:	61 f0       	breq	.+24     	; 0x160c <DIO_VoidToggleBit+0x50>
    15f4:	5a c0       	rjmp	.+180    	; 0x16aa <DIO_VoidToggleBit+0xee>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	23 30       	cpi	r18, 0x03	; 3
    15fc:	31 05       	cpc	r19, r1
    15fe:	71 f1       	breq	.+92     	; 0x165c <DIO_VoidToggleBit+0xa0>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	91 05       	cpc	r25, r1
    1608:	e9 f1       	breq	.+122    	; 0x1684 <DIO_VoidToggleBit+0xc8>
    160a:	4f c0       	rjmp	.+158    	; 0x16aa <DIO_VoidToggleBit+0xee>
	{
		case Group_A:
			toggle_Bit(DIO_PORTA, Local_PinNumber);
    160c:	ab e3       	ldi	r26, 0x3B	; 59
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	eb e3       	ldi	r30, 0x3B	; 59
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_VoidToggleBit+0x6e>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_VoidToggleBit+0x6a>
    162e:	84 27       	eor	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	3b c0       	rjmp	.+118    	; 0x16aa <DIO_VoidToggleBit+0xee>
			break;
		case Group_B:
			toggle_Bit(DIO_PORTB, Local_PinNumber);
    1634:	a8 e3       	ldi	r26, 0x38	; 56
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e8 e3       	ldi	r30, 0x38	; 56
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_VoidToggleBit+0x96>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_VoidToggleBit+0x92>
    1656:	84 27       	eor	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	27 c0       	rjmp	.+78     	; 0x16aa <DIO_VoidToggleBit+0xee>
			break;
		case Group_C:
			toggle_Bit(DIO_PORTC, Local_PinNumber);
    165c:	a5 e3       	ldi	r26, 0x35	; 53
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e5 e3       	ldi	r30, 0x35	; 53
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_VoidToggleBit+0xbe>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_VoidToggleBit+0xba>
    167e:	84 27       	eor	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	13 c0       	rjmp	.+38     	; 0x16aa <DIO_VoidToggleBit+0xee>
			break;
		case Group_D:
			toggle_Bit(DIO_PORTD, Local_PinNumber);
    1684:	a2 e3       	ldi	r26, 0x32	; 50
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e2 e3       	ldi	r30, 0x32	; 50
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_VoidToggleBit+0xe6>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_VoidToggleBit+0xe2>
    16a6:	84 27       	eor	r24, r20
    16a8:	8c 93       	st	X, r24
			break;
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <DIO_VoidTogglePORT>:
void DIO_VoidTogglePORT(u8 Local_Groupname)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <DIO_VoidTogglePORT+0x6>
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	89 83       	std	Y+1, r24	; 0x01

	switch (Local_Groupname)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	3b 83       	std	Y+3, r19	; 0x03
    16ce:	2a 83       	std	Y+2, r18	; 0x02
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	91 05       	cpc	r25, r1
    16d8:	f1 f0       	breq	.+60     	; 0x1716 <DIO_VoidTogglePORT+0x5e>
    16da:	2a 81       	ldd	r18, Y+2	; 0x02
    16dc:	3b 81       	ldd	r19, Y+3	; 0x03
    16de:	23 30       	cpi	r18, 0x03	; 3
    16e0:	31 05       	cpc	r19, r1
    16e2:	34 f4       	brge	.+12     	; 0x16f0 <DIO_VoidTogglePORT+0x38>
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	61 f0       	breq	.+24     	; 0x1706 <DIO_VoidTogglePORT+0x4e>
    16ee:	2a c0       	rjmp	.+84     	; 0x1744 <DIO_VoidTogglePORT+0x8c>
    16f0:	2a 81       	ldd	r18, Y+2	; 0x02
    16f2:	3b 81       	ldd	r19, Y+3	; 0x03
    16f4:	23 30       	cpi	r18, 0x03	; 3
    16f6:	31 05       	cpc	r19, r1
    16f8:	b1 f0       	breq	.+44     	; 0x1726 <DIO_VoidTogglePORT+0x6e>
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	9b 81       	ldd	r25, Y+3	; 0x03
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	91 05       	cpc	r25, r1
    1702:	c9 f0       	breq	.+50     	; 0x1736 <DIO_VoidTogglePORT+0x7e>
    1704:	1f c0       	rjmp	.+62     	; 0x1744 <DIO_VoidTogglePORT+0x8c>
	{
		case Group_A:
			DIO_PORTA = ~DIO_PORTA;
    1706:	ab e3       	ldi	r26, 0x3B	; 59
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	eb e3       	ldi	r30, 0x3B	; 59
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 95       	com	r24
    1712:	8c 93       	st	X, r24
    1714:	17 c0       	rjmp	.+46     	; 0x1744 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_B:
			DIO_PORTB = ~DIO_PORTB;
    1716:	a8 e3       	ldi	r26, 0x38	; 56
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e8 e3       	ldi	r30, 0x38	; 56
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 95       	com	r24
    1722:	8c 93       	st	X, r24
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_C:
			DIO_PORTC = ~DIO_PORTC;
    1726:	a5 e3       	ldi	r26, 0x35	; 53
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e5 e3       	ldi	r30, 0x35	; 53
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 95       	com	r24
    1732:	8c 93       	st	X, r24
    1734:	07 c0       	rjmp	.+14     	; 0x1744 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_D:
			DIO_PORTD = ~DIO_PORTD;
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	80 95       	com	r24
    1742:	8c 93       	st	X, r24
			break;
	}

}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <LCD_VoidSendCommand>:
#include "../Header/LCD_Config.h"

#include <util/delay.h>

void LCD_VoidSendCommand(u8 Local_command)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	0f 92       	push	r0
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to command --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,Low);
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	65 e0       	ldi	r22, 0x05	; 5
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    1766:	84 e0       	ldi	r24, 0x04	; 4
    1768:	66 e0       	ldi	r22, 0x06	; 6
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>
	/*set Enable pin to High*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1770:	84 e0       	ldi	r24, 0x04	; 4
    1772:	67 e0       	ldi	r22, 0x07	; 7
    1774:	41 e0       	ldi	r20, 0x01	; 1
    1776:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>
	/*send the command line*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_command);
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	69 81       	ldd	r22, Y+1	; 0x01
    177e:	0e 94 4f 0a 	call	0x149e	; 0x149e <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    1782:	84 e0       	ldi	r24, 0x04	; 4
    1784:	67 e0       	ldi	r22, 0x07	; 7
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>
}
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <LCD_VoidSendChar>:
void LCD_VoidSendChar(u8 Local_char)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	0f 92       	push	r0
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to Data --> 1*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,High);
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	65 e0       	ldi	r22, 0x05	; 5
    17a4:	41 e0       	ldi	r20, 0x01	; 1
    17a6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    17aa:	84 e0       	ldi	r24, 0x04	; 4
    17ac:	66 e0       	ldi	r22, 0x06	; 6
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    17b4:	84 e0       	ldi	r24, 0x04	; 4
    17b6:	67 e0       	ldi	r22, 0x07	; 7
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>
	/*send the char*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_char);
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	69 81       	ldd	r22, Y+1	; 0x01
    17c2:	0e 94 4f 0a 	call	0x149e	; 0x149e <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	67 e0       	ldi	r22, 0x07	; 7
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>
}
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <LCD_Void8BitInit>:
void LCD_Void8BitInit(void)
{
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	c6 54       	subi	r28, 0x46	; 70
    17e6:	d0 40       	sbci	r29, 0x00	; 0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
	/*Select The Directions*/
	DIO_VoidSetPortDir(LCD_DataGroup,Max_Output);
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	6f ef       	ldi	r22, 0xFF	; 255
    17f6:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_VoidSetPortDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RS_Pin, Output);
    17fa:	84 e0       	ldi	r24, 0x04	; 4
    17fc:	65 e0       	ldi	r22, 0x05	; 5
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RW_Pin, Output);
    1804:	84 e0       	ldi	r24, 0x04	; 4
    1806:	66 e0       	ldi	r22, 0x06	; 6
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_E_Pin, Output);
    180e:	84 e0       	ldi	r24, 0x04	; 4
    1810:	67 e0       	ldi	r22, 0x07	; 7
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_VoidSetPinDir>
    1818:	fe 01       	movw	r30, r28
    181a:	ed 5b       	subi	r30, 0xBD	; 189
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	ac e0       	ldi	r26, 0x0C	; 12
    1824:	b2 e4       	ldi	r27, 0x42	; 66
    1826:	80 83       	st	Z, r24
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	a2 83       	std	Z+2, r26	; 0x02
    182c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	8e 01       	movw	r16, r28
    1830:	01 5c       	subi	r16, 0xC1	; 193
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	fe 01       	movw	r30, r28
    1836:	ed 5b       	subi	r30, 0xBD	; 189
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4a ef       	ldi	r20, 0xFA	; 250
    1848:	54 e4       	ldi	r21, 0x44	; 68
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	f8 01       	movw	r30, r16
    1854:	80 83       	st	Z, r24
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	a2 83       	std	Z+2, r26	; 0x02
    185a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    185c:	fe 01       	movw	r30, r28
    185e:	ff 96       	adiw	r30, 0x3f	; 63
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e8       	ldi	r20, 0x80	; 128
    186e:	5f e3       	ldi	r21, 0x3F	; 63
    1870:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1874:	88 23       	and	r24, r24
    1876:	2c f4       	brge	.+10     	; 0x1882 <LCD_Void8BitInit+0xaa>
		__ticks = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	9e af       	std	Y+62, r25	; 0x3e
    187e:	8d af       	std	Y+61, r24	; 0x3d
    1880:	46 c0       	rjmp	.+140    	; 0x190e <LCD_Void8BitInit+0x136>
	else if (__tmp > 65535)
    1882:	fe 01       	movw	r30, r28
    1884:	ff 96       	adiw	r30, 0x3f	; 63
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	64 f5       	brge	.+88     	; 0x18f6 <LCD_Void8BitInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	fe 01       	movw	r30, r28
    18a0:	ed 5b       	subi	r30, 0xBD	; 189
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9e af       	std	Y+62, r25	; 0x3e
    18ca:	8d af       	std	Y+61, r24	; 0x3d
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <LCD_Void8BitInit+0x114>
    18ce:	88 ec       	ldi	r24, 0xC8	; 200
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c af       	std	Y+60, r25	; 0x3c
    18d4:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    18d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_Void8BitInit+0x102>
    18de:	9c af       	std	Y+60, r25	; 0x3c
    18e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	9e af       	std	Y+62, r25	; 0x3e
    18ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	69 f7       	brne	.-38     	; 0x18ce <LCD_Void8BitInit+0xf6>
    18f4:	16 c0       	rjmp	.+44     	; 0x1922 <LCD_Void8BitInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f6:	fe 01       	movw	r30, r28
    18f8:	ff 96       	adiw	r30, 0x3f	; 63
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9e af       	std	Y+62, r25	; 0x3e
    190c:	8d af       	std	Y+61, r24	; 0x3d
    190e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1910:	9e ad       	ldd	r25, Y+62	; 0x3e
    1912:	9a af       	std	Y+58, r25	; 0x3a
    1914:	89 af       	std	Y+57, r24	; 0x39
    1916:	89 ad       	ldd	r24, Y+57	; 0x39
    1918:	9a ad       	ldd	r25, Y+58	; 0x3a
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <LCD_Void8BitInit+0x142>
    191e:	9a af       	std	Y+58, r25	; 0x3a
    1920:	89 af       	std	Y+57, r24	; 0x39

	/*wait for more than 30ms after power up*/
	_delay_ms(35);
	/*function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8);
    1922:	88 e3       	ldi	r24, 0x38	; 56
    1924:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 e8       	ldi	r26, 0x80	; 128
    192e:	bf e3       	ldi	r27, 0x3F	; 63
    1930:	8d ab       	std	Y+53, r24	; 0x35
    1932:	9e ab       	std	Y+54, r25	; 0x36
    1934:	af ab       	std	Y+55, r26	; 0x37
    1936:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1938:	6d a9       	ldd	r22, Y+53	; 0x35
    193a:	7e a9       	ldd	r23, Y+54	; 0x36
    193c:	8f a9       	ldd	r24, Y+55	; 0x37
    193e:	98 ad       	ldd	r25, Y+56	; 0x38
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4a ef       	ldi	r20, 0xFA	; 250
    1946:	54 e4       	ldi	r21, 0x44	; 68
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	89 ab       	std	Y+49, r24	; 0x31
    1952:	9a ab       	std	Y+50, r25	; 0x32
    1954:	ab ab       	std	Y+51, r26	; 0x33
    1956:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1958:	69 a9       	ldd	r22, Y+49	; 0x31
    195a:	7a a9       	ldd	r23, Y+50	; 0x32
    195c:	8b a9       	ldd	r24, Y+51	; 0x33
    195e:	9c a9       	ldd	r25, Y+52	; 0x34
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e8       	ldi	r20, 0x80	; 128
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196c:	88 23       	and	r24, r24
    196e:	2c f4       	brge	.+10     	; 0x197a <LCD_Void8BitInit+0x1a2>
		__ticks = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	98 ab       	std	Y+48, r25	; 0x30
    1976:	8f a7       	std	Y+47, r24	; 0x2f
    1978:	3f c0       	rjmp	.+126    	; 0x19f8 <LCD_Void8BitInit+0x220>
	else if (__tmp > 65535)
    197a:	69 a9       	ldd	r22, Y+49	; 0x31
    197c:	7a a9       	ldd	r23, Y+50	; 0x32
    197e:	8b a9       	ldd	r24, Y+51	; 0x33
    1980:	9c a9       	ldd	r25, Y+52	; 0x34
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	3f ef       	ldi	r19, 0xFF	; 255
    1986:	4f e7       	ldi	r20, 0x7F	; 127
    1988:	57 e4       	ldi	r21, 0x47	; 71
    198a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198e:	18 16       	cp	r1, r24
    1990:	4c f5       	brge	.+82     	; 0x19e4 <LCD_Void8BitInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1992:	6d a9       	ldd	r22, Y+53	; 0x35
    1994:	7e a9       	ldd	r23, Y+54	; 0x36
    1996:	8f a9       	ldd	r24, Y+55	; 0x37
    1998:	98 ad       	ldd	r25, Y+56	; 0x38
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e2       	ldi	r20, 0x20	; 32
    19a0:	51 e4       	ldi	r21, 0x41	; 65
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	98 ab       	std	Y+48, r25	; 0x30
    19b8:	8f a7       	std	Y+47, r24	; 0x2f
    19ba:	0f c0       	rjmp	.+30     	; 0x19da <LCD_Void8BitInit+0x202>
    19bc:	88 ec       	ldi	r24, 0xC8	; 200
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9e a7       	std	Y+46, r25	; 0x2e
    19c2:	8d a7       	std	Y+45, r24	; 0x2d
    19c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <LCD_Void8BitInit+0x1f0>
    19cc:	9e a7       	std	Y+46, r25	; 0x2e
    19ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d2:	98 a9       	ldd	r25, Y+48	; 0x30
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	98 ab       	std	Y+48, r25	; 0x30
    19d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19da:	8f a5       	ldd	r24, Y+47	; 0x2f
    19dc:	98 a9       	ldd	r25, Y+48	; 0x30
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	69 f7       	brne	.-38     	; 0x19bc <LCD_Void8BitInit+0x1e4>
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <LCD_Void8BitInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e4:	69 a9       	ldd	r22, Y+49	; 0x31
    19e6:	7a a9       	ldd	r23, Y+50	; 0x32
    19e8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ea:	9c a9       	ldd	r25, Y+52	; 0x34
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	98 ab       	std	Y+48, r25	; 0x30
    19f6:	8f a7       	std	Y+47, r24	; 0x2f
    19f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19fa:	98 a9       	ldd	r25, Y+48	; 0x30
    19fc:	9c a7       	std	Y+44, r25	; 0x2c
    19fe:	8b a7       	std	Y+43, r24	; 0x2b
    1a00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_Void8BitInit+0x22c>
    1a08:	9c a7       	std	Y+44, r25	; 0x2c
    1a0a:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Display On off control*/
	LCD_VoidSendCommand(LCD_CursorON);
    1a0c:	8e e0       	ldi	r24, 0x0E	; 14
    1a0e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 e8       	ldi	r26, 0x80	; 128
    1a18:	bf e3       	ldi	r27, 0x3F	; 63
    1a1a:	8f a3       	std	Y+39, r24	; 0x27
    1a1c:	98 a7       	std	Y+40, r25	; 0x28
    1a1e:	a9 a7       	std	Y+41, r26	; 0x29
    1a20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a22:	6f a1       	ldd	r22, Y+39	; 0x27
    1a24:	78 a5       	ldd	r23, Y+40	; 0x28
    1a26:	89 a5       	ldd	r24, Y+41	; 0x29
    1a28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a ef       	ldi	r20, 0xFA	; 250
    1a30:	54 e4       	ldi	r21, 0x44	; 68
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8b a3       	std	Y+35, r24	; 0x23
    1a3c:	9c a3       	std	Y+36, r25	; 0x24
    1a3e:	ad a3       	std	Y+37, r26	; 0x25
    1a40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a42:	6b a1       	ldd	r22, Y+35	; 0x23
    1a44:	7c a1       	ldd	r23, Y+36	; 0x24
    1a46:	8d a1       	ldd	r24, Y+37	; 0x25
    1a48:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a56:	88 23       	and	r24, r24
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <LCD_Void8BitInit+0x28c>
		__ticks = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9a a3       	std	Y+34, r25	; 0x22
    1a60:	89 a3       	std	Y+33, r24	; 0x21
    1a62:	3f c0       	rjmp	.+126    	; 0x1ae2 <LCD_Void8BitInit+0x30a>
	else if (__tmp > 65535)
    1a64:	6b a1       	ldd	r22, Y+35	; 0x23
    1a66:	7c a1       	ldd	r23, Y+36	; 0x24
    1a68:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	4c f5       	brge	.+82     	; 0x1ace <LCD_Void8BitInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a80:	89 a5       	ldd	r24, Y+41	; 0x29
    1a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9a a3       	std	Y+34, r25	; 0x22
    1aa2:	89 a3       	std	Y+33, r24	; 0x21
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <LCD_Void8BitInit+0x2ec>
    1aa6:	88 ec       	ldi	r24, 0xC8	; 200
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	98 a3       	std	Y+32, r25	; 0x20
    1aac:	8f 8f       	std	Y+31, r24	; 0x1f
    1aae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ab0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_Void8BitInit+0x2da>
    1ab6:	98 a3       	std	Y+32, r25	; 0x20
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	89 a1       	ldd	r24, Y+33	; 0x21
    1abc:	9a a1       	ldd	r25, Y+34	; 0x22
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	9a a3       	std	Y+34, r25	; 0x22
    1ac2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	69 f7       	brne	.-38     	; 0x1aa6 <LCD_Void8BitInit+0x2ce>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <LCD_Void8BitInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae8:	8d 8f       	std	Y+29, r24	; 0x1d
    1aea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_Void8BitInit+0x316>
    1af2:	9e 8f       	std	Y+30, r25	; 0x1e
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Clear LCD*/
	LCD_VoidSendCommand(LCD_ClearDisplay);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e0       	ldi	r26, 0x00	; 0
    1b02:	b0 e4       	ldi	r27, 0x40	; 64
    1b04:	89 8f       	std	Y+25, r24	; 0x19
    1b06:	9a 8f       	std	Y+26, r25	; 0x1a
    1b08:	ab 8f       	std	Y+27, r26	; 0x1b
    1b0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a ef       	ldi	r20, 0xFA	; 250
    1b1a:	54 e4       	ldi	r21, 0x44	; 68
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8d 8b       	std	Y+21, r24	; 0x15
    1b26:	9e 8b       	std	Y+22, r25	; 0x16
    1b28:	af 8b       	std	Y+23, r26	; 0x17
    1b2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b30:	8f 89       	ldd	r24, Y+23	; 0x17
    1b32:	98 8d       	ldd	r25, Y+24	; 0x18
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <LCD_Void8BitInit+0x376>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 8b       	std	Y+20, r25	; 0x14
    1b4a:	8b 8b       	std	Y+19, r24	; 0x13
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <LCD_Void8BitInit+0x3f4>
	else if (__tmp > 65535)
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	4c f5       	brge	.+82     	; 0x1bb8 <LCD_Void8BitInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b66:	69 8d       	ldd	r22, Y+25	; 0x19
    1b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9c 8b       	std	Y+20, r25	; 0x14
    1b8c:	8b 8b       	std	Y+19, r24	; 0x13
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <LCD_Void8BitInit+0x3d6>
    1b90:	88 ec       	ldi	r24, 0xC8	; 200
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9a 8b       	std	Y+18, r25	; 0x12
    1b96:	89 8b       	std	Y+17, r24	; 0x11
    1b98:	89 89       	ldd	r24, Y+17	; 0x11
    1b9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_Void8BitInit+0x3c4>
    1ba0:	9a 8b       	std	Y+18, r25	; 0x12
    1ba2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	9c 8b       	std	Y+20, r25	; 0x14
    1bac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <LCD_Void8BitInit+0x3b8>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <LCD_Void8BitInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bba:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9c 8b       	std	Y+20, r25	; 0x14
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
    1bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bce:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd0:	98 8b       	std	Y+16, r25	; 0x10
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	98 89       	ldd	r25, Y+16	; 0x10
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_Void8BitInit+0x400>
    1bdc:	98 8b       	std	Y+16, r25	; 0x10
    1bde:	8f 87       	std	Y+15, r24	; 0x0f
	/*wait for more than 1.53ms*/
	_delay_ms(2);
	/*Entry Mode*/
	LCD_VoidSendCommand(LCD_EntryMode2);
    1be0:	86 e0       	ldi	r24, 0x06	; 6
    1be2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e8       	ldi	r26, 0x80	; 128
    1bec:	bf e3       	ldi	r27, 0x3F	; 63
    1bee:	8b 87       	std	Y+11, r24	; 0x0b
    1bf0:	9c 87       	std	Y+12, r25	; 0x0c
    1bf2:	ad 87       	std	Y+13, r26	; 0x0d
    1bf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	4a ef       	ldi	r20, 0xFA	; 250
    1c04:	54 e4       	ldi	r21, 0x44	; 68
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	8f 83       	std	Y+7, r24	; 0x07
    1c10:	98 87       	std	Y+8, r25	; 0x08
    1c12:	a9 87       	std	Y+9, r26	; 0x09
    1c14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <LCD_Void8BitInit+0x460>
		__ticks = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	3f c0       	rjmp	.+126    	; 0x1cb6 <LCD_Void8BitInit+0x4de>
	else if (__tmp > 65535)
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	3f ef       	ldi	r19, 0xFF	; 255
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	57 e4       	ldi	r21, 0x47	; 71
    1c48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4c:	18 16       	cp	r1, r24
    1c4e:	4c f5       	brge	.+82     	; 0x1ca2 <LCD_Void8BitInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <LCD_Void8BitInit+0x4c0>
    1c7a:	88 ec       	ldi	r24, 0xC8	; 200
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <LCD_Void8BitInit+0x4ae>
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	69 f7       	brne	.-38     	; 0x1c7a <LCD_Void8BitInit+0x4a2>
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <LCD_Void8BitInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <LCD_Void8BitInit+0x4ea>
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1cca:	ca 5b       	subi	r28, 0xBA	; 186
    1ccc:	df 4f       	sbci	r29, 0xFF	; 255
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	08 95       	ret

00001ce2 <LCD_VoidSendString>:
void LCD_VoidSendString (char *Ref_string)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <LCD_VoidSendString+0x6>
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	0a c0       	rjmp	.+20     	; 0x1d06 <LCD_VoidSendString+0x24>
	while (*Ref_string != '\0')
	{
		LCD_VoidSendChar(*Ref_string);
    1cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf6:	80 81       	ld	r24, Z
    1cf8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VoidSendChar>
		Ref_string++;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LCD_EntryMode2);
	_delay_ms(1);
}
void LCD_VoidSendString (char *Ref_string)
{
	while (*Ref_string != '\0')
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 23       	and	r24, r24
    1d0e:	89 f7       	brne	.-30     	; 0x1cf2 <LCD_VoidSendString+0x10>
	{
		LCD_VoidSendChar(*Ref_string);
		Ref_string++;
	}
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32 Local_Number)
{
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	28 97       	sbiw	r28, 0x08	; 8
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	6d 83       	std	Y+5, r22	; 0x05
    1d38:	7e 83       	std	Y+6, r23	; 0x06
    1d3a:	8f 83       	std	Y+7, r24	; 0x07
    1d3c:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_ReversedNum = 2;
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e0       	ldi	r26, 0x00	; 0
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	ab 83       	std	Y+3, r26	; 0x03
    1d4c:	bc 83       	std	Y+4, r27	; 0x04
    1d4e:	36 c0       	rjmp	.+108    	; 0x1dbc <LCD_VoidSendNumber+0xa2>
	while (Local_Number != 0)
	{
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	ab 81       	ldd	r26, Y+3	; 0x03
    1d56:	bc 81       	ldd	r27, Y+4	; 0x04
    1d58:	2a e0       	ldi	r18, 0x0A	; 10
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsi3>
    1d68:	7b 01       	movw	r14, r22
    1d6a:	8c 01       	movw	r16, r24
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	af 81       	ldd	r26, Y+7	; 0x07
    1d72:	b8 85       	ldd	r27, Y+8	; 0x08
    1d74:	2a e0       	ldi	r18, 0x0A	; 10
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8e 0d       	add	r24, r14
    1d8a:	9f 1d       	adc	r25, r15
    1d8c:	a0 1f       	adc	r26, r16
    1d8e:	b1 1f       	adc	r27, r17
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	ab 83       	std	Y+3, r26	; 0x03
    1d96:	bc 83       	std	Y+4, r27	; 0x04
		Local_Number = Local_Number / 10;
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	af 81       	ldd	r26, Y+7	; 0x07
    1d9e:	b8 85       	ldd	r27, Y+8	; 0x08
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    1db0:	da 01       	movw	r26, r20
    1db2:	c9 01       	movw	r24, r18
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	af 83       	std	Y+7, r26	; 0x07
    1dba:	b8 87       	std	Y+8, r27	; 0x08
	}
}
void LCD_VoidSendNumber(u32 Local_Number)
{
	u32 Local_ReversedNum = 2;
	while (Local_Number != 0)
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	af 81       	ldd	r26, Y+7	; 0x07
    1dc2:	b8 85       	ldd	r27, Y+8	; 0x08
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	a1 05       	cpc	r26, r1
    1dc8:	b1 05       	cpc	r27, r1
    1dca:	11 f6       	brne	.-124    	; 0x1d50 <LCD_VoidSendNumber+0x36>
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
		Local_Number = Local_Number / 10;
	}
	do
	{
		LCD_VoidSendChar((Local_ReversedNum%10)+ '0');
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	ab 81       	ldd	r26, Y+3	; 0x03
    1dd2:	bc 81       	ldd	r27, Y+4	; 0x04
    1dd4:	2a e0       	ldi	r18, 0x0A	; 10
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	80 5d       	subi	r24, 0xD0	; 208
    1dea:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VoidSendChar>
		Local_ReversedNum /= 10;
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	ab 81       	ldd	r26, Y+3	; 0x03
    1df4:	bc 81       	ldd	r27, Y+4	; 0x04
    1df6:	2a e0       	ldi	r18, 0x0A	; 10
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    1e06:	da 01       	movw	r26, r20
    1e08:	c9 01       	movw	r24, r18
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	ab 83       	std	Y+3, r26	; 0x03
    1e10:	bc 83       	std	Y+4, r27	; 0x04
	}while(Local_ReversedNum != 2);
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	ab 81       	ldd	r26, Y+3	; 0x03
    1e18:	bc 81       	ldd	r27, Y+4	; 0x04
    1e1a:	82 30       	cpi	r24, 0x02	; 2
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	a1 05       	cpc	r26, r1
    1e20:	b1 05       	cpc	r27, r1
    1e22:	a1 f6       	brne	.-88     	; 0x1dcc <LCD_VoidSendNumber+0xb2>
	}
	for (int count = i-1; count >= 0; count--)
	{
		LCD_VoidSendChar(arr[count] + '0');
	}*/
}
    1e24:	28 96       	adiw	r28, 0x08	; 8
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	08 95       	ret

00001e3e <LCD_VoidStartFrom>:
void LCD_VoidStartFrom(u8 Local_RowPosition, u8 Local_ColPosition)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <LCD_VoidStartFrom+0x6>
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	6b 83       	std	Y+3, r22	; 0x03
	if((Local_ColPosition < Cols_Number) && (Local_RowPosition < Rows_Number))
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	80 31       	cpi	r24, 0x10	; 16
    1e52:	b8 f4       	brcc	.+46     	; 0x1e82 <LCD_VoidStartFrom+0x44>
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	a0 f4       	brcc	.+40     	; 0x1e82 <LCD_VoidStartFrom+0x44>
	{
		u8 Local_DDRAMAddress = LCD_SetAddressDDRAM + (Local_RowPosition * Line1_Address) + Local_ColPosition;
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 96       	adiw	r24, 0x02	; 2
    1e62:	00 24       	eor	r0, r0
    1e64:	96 95       	lsr	r25
    1e66:	87 95       	ror	r24
    1e68:	07 94       	ror	r0
    1e6a:	96 95       	lsr	r25
    1e6c:	87 95       	ror	r24
    1e6e:	07 94       	ror	r0
    1e70:	98 2f       	mov	r25, r24
    1e72:	80 2d       	mov	r24, r0
    1e74:	98 2f       	mov	r25, r24
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	89 0f       	add	r24, r25
    1e7a:	89 83       	std	Y+1, r24	; 0x01
		LCD_VoidSendCommand(Local_DDRAMAddress);
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
	}
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <LCD_VoidSendStringFromPos>:
void LCD_VoidSendStringFromPos (char *Ref_string, u8 Local_RowPosition, u8 Local_ColPosition)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <LCD_VoidSendStringFromPos+0x6>
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <LCD_VoidSendStringFromPos+0x8>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <LCD_VoidSendStringFromPos+0xa>
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	9c 83       	std	Y+4, r25	; 0x04
    1e9e:	8b 83       	std	Y+3, r24	; 0x03
    1ea0:	6d 83       	std	Y+5, r22	; 0x05
    1ea2:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_Index = 0;
    1ea4:	1a 82       	std	Y+2, r1	; 0x02
	u8 line;
	if (Local_RowPosition == 0)
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	88 23       	and	r24, r24
    1eaa:	11 f4       	brne	.+4      	; 0x1eb0 <LCD_VoidSendStringFromPos+0x22>
	{
		line = Line_1;
    1eac:	19 82       	std	Y+1, r1	; 0x01
    1eae:	05 c0       	rjmp	.+10     	; 0x1eba <LCD_VoidSendStringFromPos+0x2c>
	}
	else if (Local_RowPosition == 1)
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	11 f4       	brne	.+4      	; 0x1eba <LCD_VoidSendStringFromPos+0x2c>
	{
		line = Line_2;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebc:	6e 81       	ldd	r22, Y+6	; 0x06
    1ebe:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_VoidStartFrom>
    1ec2:	90 c0       	rjmp	.+288    	; 0x1fe4 <LCD_VoidSendStringFromPos+0x156>
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
	{
		if((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Cols_Number)
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	88 2f       	mov	r24, r24
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	ac 01       	movw	r20, r24
    1ecc:	42 95       	swap	r20
    1ece:	52 95       	swap	r21
    1ed0:	50 7f       	andi	r21, 0xF0	; 240
    1ed2:	54 27       	eor	r21, r20
    1ed4:	40 7f       	andi	r20, 0xF0	; 240
    1ed6:	54 27       	eor	r21, r20
    1ed8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	88 2f       	mov	r24, r24
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	82 0f       	add	r24, r18
    1ee6:	93 1f       	adc	r25, r19
    1ee8:	84 0f       	add	r24, r20
    1eea:	95 1f       	adc	r25, r21
    1eec:	80 31       	cpi	r24, 0x10	; 16
    1eee:	91 05       	cpc	r25, r1
    1ef0:	7c f4       	brge	.+30     	; 0x1f10 <LCD_VoidSendStringFromPos+0x82>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	fc 01       	movw	r30, r24
    1efe:	e2 0f       	add	r30, r18
    1f00:	f3 1f       	adc	r31, r19
    1f02:	80 81       	ld	r24, Z
    1f04:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VoidSendChar>
			Local_Index++;
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	6a c0       	rjmp	.+212    	; 0x1fe4 <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) == Cols_Number) && (line == Line_1))
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	ac 01       	movw	r20, r24
    1f18:	42 95       	swap	r20
    1f1a:	52 95       	swap	r21
    1f1c:	50 7f       	andi	r21, 0xF0	; 240
    1f1e:	54 27       	eor	r21, r20
    1f20:	40 7f       	andi	r20, 0xF0	; 240
    1f22:	54 27       	eor	r21, r20
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	82 0f       	add	r24, r18
    1f32:	93 1f       	adc	r25, r19
    1f34:	84 0f       	add	r24, r20
    1f36:	95 1f       	adc	r25, r21
    1f38:	80 31       	cpi	r24, 0x10	; 16
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	69 f4       	brne	.+26     	; 0x1f58 <LCD_VoidSendStringFromPos+0xca>
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	88 23       	and	r24, r24
    1f42:	51 f4       	brne	.+20     	; 0x1f58 <LCD_VoidSendStringFromPos+0xca>
		{
			LCD_VoidStartFrom(1,0);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_VoidStartFrom>
			line = Line_2;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
			Local_RowPosition = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	8d 83       	std	Y+5, r24	; 0x05
			Local_ColPosition = 0;
    1f54:	1e 82       	std	Y+6, r1	; 0x06
    1f56:	46 c0       	rjmp	.+140    	; 0x1fe4 <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Total_blocks_Num) && (line == Line_2))
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	ac 01       	movw	r20, r24
    1f60:	42 95       	swap	r20
    1f62:	52 95       	swap	r21
    1f64:	50 7f       	andi	r21, 0xF0	; 240
    1f66:	54 27       	eor	r21, r20
    1f68:	40 7f       	andi	r20, 0xF0	; 240
    1f6a:	54 27       	eor	r21, r20
    1f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	82 0f       	add	r24, r18
    1f7a:	93 1f       	adc	r25, r19
    1f7c:	84 0f       	add	r24, r20
    1f7e:	95 1f       	adc	r25, r21
    1f80:	80 32       	cpi	r24, 0x20	; 32
    1f82:	91 05       	cpc	r25, r1
    1f84:	7c f5       	brge	.+94     	; 0x1fe4 <LCD_VoidSendStringFromPos+0x156>
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	61 f5       	brne	.+88     	; 0x1fe4 <LCD_VoidSendStringFromPos+0x156>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	fc 01       	movw	r30, r24
    1f98:	e2 0f       	add	r30, r18
    1f9a:	f3 1f       	adc	r31, r19
    1f9c:	80 81       	ld	r24, Z
    1f9e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VoidSendChar>
			Local_Index++;
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	8f 5f       	subi	r24, 0xFF	; 255
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
			if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index)) == Total_blocks_Num)
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	ac 01       	movw	r20, r24
    1fb0:	42 95       	swap	r20
    1fb2:	52 95       	swap	r21
    1fb4:	50 7f       	andi	r21, 0xF0	; 240
    1fb6:	54 27       	eor	r21, r20
    1fb8:	40 7f       	andi	r20, 0xF0	; 240
    1fba:	54 27       	eor	r21, r20
    1fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	82 0f       	add	r24, r18
    1fca:	93 1f       	adc	r25, r19
    1fcc:	84 0f       	add	r24, r20
    1fce:	95 1f       	adc	r25, r21
    1fd0:	80 32       	cpi	r24, 0x20	; 32
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	39 f4       	brne	.+14     	; 0x1fe4 <LCD_VoidSendStringFromPos+0x156>
			{
				LCD_VoidStartFrom(0,0);
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_VoidStartFrom>
				Local_RowPosition = 0;
    1fde:	1d 82       	std	Y+5, r1	; 0x05
				Local_ColPosition = 0;
    1fe0:	1e 82       	std	Y+6, r1	; 0x06
				line = Line_1;
    1fe2:	19 82       	std	Y+1, r1	; 0x01
	else if (Local_RowPosition == 1)
	{
		line = Line_2;
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	fc 01       	movw	r30, r24
    1ff0:	e2 0f       	add	r30, r18
    1ff2:	f3 1f       	adc	r31, r19
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 23       	and	r24, r24
    1ff8:	c1 f0       	breq	.+48     	; 0x202a <LCD_VoidSendStringFromPos+0x19c>
    1ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	ac 01       	movw	r20, r24
    2002:	42 95       	swap	r20
    2004:	52 95       	swap	r21
    2006:	50 7f       	andi	r21, 0xF0	; 240
    2008:	54 27       	eor	r21, r20
    200a:	40 7f       	andi	r20, 0xF0	; 240
    200c:	54 27       	eor	r21, r20
    200e:	8e 81       	ldd	r24, Y+6	; 0x06
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	88 2f       	mov	r24, r24
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	82 0f       	add	r24, r18
    201c:	93 1f       	adc	r25, r19
    201e:	84 0f       	add	r24, r20
    2020:	95 1f       	adc	r25, r21
    2022:	80 32       	cpi	r24, 0x20	; 32
    2024:	91 05       	cpc	r25, r1
    2026:	0c f4       	brge	.+2      	; 0x202a <LCD_VoidSendStringFromPos+0x19c>
    2028:	4d cf       	rjmp	.-358    	; 0x1ec4 <LCD_VoidSendStringFromPos+0x36>
				Local_ColPosition = 0;
				line = Line_1;
			}
		}
	}
}
    202a:	26 96       	adiw	r28, 0x06	; 6
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <LCD_VoidAddCustomPattern>:
void LCD_VoidAddCustomPattern(u8 * Local_Pattern, u8 Local_IndexCGRAM)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	64 97       	sbiw	r28, 0x14	; 20
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	9b 8b       	std	Y+19, r25	; 0x13
    2052:	8a 8b       	std	Y+18, r24	; 0x12
    2054:	6c 8b       	std	Y+20, r22	; 0x14
	if(Local_IndexCGRAM < CGRAM_MaxSize)
    2056:	8c 89       	ldd	r24, Y+20	; 0x14
    2058:	88 30       	cpi	r24, 0x08	; 8
    205a:	08 f0       	brcs	.+2      	; 0x205e <LCD_VoidAddCustomPattern+0x22>
    205c:	9a c0       	rjmp	.+308    	; 0x2192 <LCD_VoidAddCustomPattern+0x156>
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
    205e:	8c 89       	ldd	r24, Y+20	; 0x14
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	08 96       	adiw	r24, 0x08	; 8
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	89 8b       	std	Y+17, r24	; 0x11
		LCD_VoidSendCommand(Local_CGRAMAddress);
    2074:	89 89       	ldd	r24, Y+17	; 0x11
    2076:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
		for(int index = 0; index < CGRAM_MaxSize; index++)
    207a:	18 8a       	std	Y+16, r1	; 0x10
    207c:	1f 86       	std	Y+15, r1	; 0x0f
    207e:	0f c0       	rjmp	.+30     	; 0x209e <LCD_VoidAddCustomPattern+0x62>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
    2080:	2f 85       	ldd	r18, Y+15	; 0x0f
    2082:	38 89       	ldd	r19, Y+16	; 0x10
    2084:	8a 89       	ldd	r24, Y+18	; 0x12
    2086:	9b 89       	ldd	r25, Y+19	; 0x13
    2088:	fc 01       	movw	r30, r24
    208a:	e2 0f       	add	r30, r18
    208c:	f3 1f       	adc	r31, r19
    208e:	80 81       	ld	r24, Z
    2090:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VoidSendChar>
{
	if(Local_IndexCGRAM < CGRAM_MaxSize)
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
		LCD_VoidSendCommand(Local_CGRAMAddress);
		for(int index = 0; index < CGRAM_MaxSize; index++)
    2094:	8f 85       	ldd	r24, Y+15	; 0x0f
    2096:	98 89       	ldd	r25, Y+16	; 0x10
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	98 89       	ldd	r25, Y+16	; 0x10
    20a2:	88 30       	cpi	r24, 0x08	; 8
    20a4:	91 05       	cpc	r25, r1
    20a6:	64 f3       	brlt	.-40     	; 0x2080 <LCD_VoidAddCustomPattern+0x44>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
		}
		LCD_VoidSendCommand(LCD_ReturnHome);
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 e0       	ldi	r26, 0x00	; 0
    20b4:	b0 e4       	ldi	r27, 0x40	; 64
    20b6:	8b 87       	std	Y+11, r24	; 0x0b
    20b8:	9c 87       	std	Y+12, r25	; 0x0c
    20ba:	ad 87       	std	Y+13, r26	; 0x0d
    20bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a ef       	ldi	r20, 0xFA	; 250
    20cc:	54 e4       	ldi	r21, 0x44	; 68
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	8f 83       	std	Y+7, r24	; 0x07
    20d8:	98 87       	std	Y+8, r25	; 0x08
    20da:	a9 87       	std	Y+9, r26	; 0x09
    20dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20de:	6f 81       	ldd	r22, Y+7	; 0x07
    20e0:	78 85       	ldd	r23, Y+8	; 0x08
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e8       	ldi	r20, 0x80	; 128
    20ec:	5f e3       	ldi	r21, 0x3F	; 63
    20ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f2:	88 23       	and	r24, r24
    20f4:	2c f4       	brge	.+10     	; 0x2100 <LCD_VoidAddCustomPattern+0xc4>
		__ticks = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	3f c0       	rjmp	.+126    	; 0x217e <LCD_VoidAddCustomPattern+0x142>
	else if (__tmp > 65535)
    2100:	6f 81       	ldd	r22, Y+7	; 0x07
    2102:	78 85       	ldd	r23, Y+8	; 0x08
    2104:	89 85       	ldd	r24, Y+9	; 0x09
    2106:	9a 85       	ldd	r25, Y+10	; 0x0a
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	4c f5       	brge	.+82     	; 0x216a <LCD_VoidAddCustomPattern+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	6b 85       	ldd	r22, Y+11	; 0x0b
    211a:	7c 85       	ldd	r23, Y+12	; 0x0c
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	51 e4       	ldi	r21, 0x41	; 65
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <LCD_VoidAddCustomPattern+0x124>
    2142:	88 ec       	ldi	r24, 0xC8	; 200
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_VoidAddCustomPattern+0x112>
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	69 f7       	brne	.-38     	; 0x2142 <LCD_VoidAddCustomPattern+0x106>
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <LCD_VoidAddCustomPattern+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_VoidAddCustomPattern+0x14e>
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
		/*Wait more than 1.53ms after ReturnHome Command*/
		_delay_ms(2);
	}
}
    2192:	64 96       	adiw	r28, 0x14	; 20
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <LCD_VoidCustomDisplay>:
void LCD_VoidCustomDisplay(u8 Local_CGRAMIndex, u8 Local_RowPosition, u8 Local_ColPosition)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <LCD_VoidCustomDisplay+0x6>
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	6a 83       	std	Y+2, r22	; 0x02
    21b4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VoidStartFrom(Local_RowPosition, Local_ColPosition);
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	6b 81       	ldd	r22, Y+3	; 0x03
    21ba:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_VoidStartFrom>
	LCD_VoidSendChar(Local_CGRAMIndex);
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VoidSendChar>
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <LCD_VoidRightShift>:
void LCD_VoidRightShift (char *Ref_string)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	ae 97       	sbiw	r28, 0x2e	; 46
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	9e a7       	std	Y+46, r25	; 0x2e
    21e6:	8d a7       	std	Y+45, r24	; 0x2d
	u8 Local_RowPosition = 0;
    21e8:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Local_ColPosition = 0;
    21ea:	1b a6       	std	Y+43, r1	; 0x2b
    21ec:	84 c0       	rjmp	.+264    	; 0x22f6 <LCD_VoidRightShift+0x126>
	while(1){
		while(Local_RowPosition == Line_1)
		{
			LCD_VoidSendStringFromPos(Ref_string,0,0);
    21ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    21f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    21fa:	8c e1       	ldi	r24, 0x1C	; 28
    21fc:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	aa e7       	ldi	r26, 0x7A	; 122
    2206:	b3 e4       	ldi	r27, 0x43	; 67
    2208:	8f a3       	std	Y+39, r24	; 0x27
    220a:	98 a7       	std	Y+40, r25	; 0x28
    220c:	a9 a7       	std	Y+41, r26	; 0x29
    220e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	6f a1       	ldd	r22, Y+39	; 0x27
    2212:	78 a5       	ldd	r23, Y+40	; 0x28
    2214:	89 a5       	ldd	r24, Y+41	; 0x29
    2216:	9a a5       	ldd	r25, Y+42	; 0x2a
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	4a ef       	ldi	r20, 0xFA	; 250
    221e:	54 e4       	ldi	r21, 0x44	; 68
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8b a3       	std	Y+35, r24	; 0x23
    222a:	9c a3       	std	Y+36, r25	; 0x24
    222c:	ad a3       	std	Y+37, r26	; 0x25
    222e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2230:	6b a1       	ldd	r22, Y+35	; 0x23
    2232:	7c a1       	ldd	r23, Y+36	; 0x24
    2234:	8d a1       	ldd	r24, Y+37	; 0x25
    2236:	9e a1       	ldd	r25, Y+38	; 0x26
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	2c f4       	brge	.+10     	; 0x2252 <LCD_VoidRightShift+0x82>
		__ticks = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9a a3       	std	Y+34, r25	; 0x22
    224e:	89 a3       	std	Y+33, r24	; 0x21
    2250:	3f c0       	rjmp	.+126    	; 0x22d0 <LCD_VoidRightShift+0x100>
	else if (__tmp > 65535)
    2252:	6b a1       	ldd	r22, Y+35	; 0x23
    2254:	7c a1       	ldd	r23, Y+36	; 0x24
    2256:	8d a1       	ldd	r24, Y+37	; 0x25
    2258:	9e a1       	ldd	r25, Y+38	; 0x26
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	57 e4       	ldi	r21, 0x47	; 71
    2262:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	4c f5       	brge	.+82     	; 0x22bc <LCD_VoidRightShift+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	6f a1       	ldd	r22, Y+39	; 0x27
    226c:	78 a5       	ldd	r23, Y+40	; 0x28
    226e:	89 a5       	ldd	r24, Y+41	; 0x29
    2270:	9a a5       	ldd	r25, Y+42	; 0x2a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e2       	ldi	r20, 0x20	; 32
    2278:	51 e4       	ldi	r21, 0x41	; 65
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9a a3       	std	Y+34, r25	; 0x22
    2290:	89 a3       	std	Y+33, r24	; 0x21
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <LCD_VoidRightShift+0xe2>
    2294:	88 ec       	ldi	r24, 0xC8	; 200
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	98 a3       	std	Y+32, r25	; 0x20
    229a:	8f 8f       	std	Y+31, r24	; 0x1f
    229c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    229e:	98 a1       	ldd	r25, Y+32	; 0x20
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <LCD_VoidRightShift+0xd0>
    22a4:	98 a3       	std	Y+32, r25	; 0x20
    22a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a8:	89 a1       	ldd	r24, Y+33	; 0x21
    22aa:	9a a1       	ldd	r25, Y+34	; 0x22
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	9a a3       	std	Y+34, r25	; 0x22
    22b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	89 a1       	ldd	r24, Y+33	; 0x21
    22b4:	9a a1       	ldd	r25, Y+34	; 0x22
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	69 f7       	brne	.-38     	; 0x2294 <LCD_VoidRightShift+0xc4>
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <LCD_VoidRightShift+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	6b a1       	ldd	r22, Y+35	; 0x23
    22be:	7c a1       	ldd	r23, Y+36	; 0x24
    22c0:	8d a1       	ldd	r24, Y+37	; 0x25
    22c2:	9e a1       	ldd	r25, Y+38	; 0x26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9a a3       	std	Y+34, r25	; 0x22
    22ce:	89 a3       	std	Y+33, r24	; 0x21
    22d0:	89 a1       	ldd	r24, Y+33	; 0x21
    22d2:	9a a1       	ldd	r25, Y+34	; 0x22
    22d4:	9e 8f       	std	Y+30, r25	; 0x1e
    22d6:	8d 8f       	std	Y+29, r24	; 0x1d
    22d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_VoidRightShift+0x10c>
    22e0:	9e 8f       	std	Y+30, r25	; 0x1e
    22e2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    22e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e6:	8f 5f       	subi	r24, 0xFF	; 255
    22e8:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    22ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ec:	80 31       	cpi	r24, 0x10	; 16
    22ee:	19 f4       	brne	.+6      	; 0x22f6 <LCD_VoidRightShift+0x126>
			{
				Local_ColPosition = 0;
    22f0:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_2;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	8c a7       	std	Y+44, r24	; 0x2c
void LCD_VoidRightShift (char *Ref_string)
{
	u8 Local_RowPosition = 0;
	u8 Local_ColPosition = 0;
	while(1){
		while(Local_RowPosition == Line_1)
    22f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    22f8:	88 23       	and	r24, r24
    22fa:	09 f4       	brne	.+2      	; 0x22fe <LCD_VoidRightShift+0x12e>
    22fc:	78 cf       	rjmp	.-272    	; 0x21ee <LCD_VoidRightShift+0x1e>
			{
				Local_ColPosition = 0;
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 e0       	ldi	r26, 0x00	; 0
    230a:	b0 e4       	ldi	r27, 0x40	; 64
    230c:	89 8f       	std	Y+25, r24	; 0x19
    230e:	9a 8f       	std	Y+26, r25	; 0x1a
    2310:	ab 8f       	std	Y+27, r26	; 0x1b
    2312:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	69 8d       	ldd	r22, Y+25	; 0x19
    2316:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4a ef       	ldi	r20, 0xFA	; 250
    2322:	54 e4       	ldi	r21, 0x44	; 68
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	8d 8b       	std	Y+21, r24	; 0x15
    232e:	9e 8b       	std	Y+22, r25	; 0x16
    2330:	af 8b       	std	Y+23, r26	; 0x17
    2332:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2334:	6d 89       	ldd	r22, Y+21	; 0x15
    2336:	7e 89       	ldd	r23, Y+22	; 0x16
    2338:	8f 89       	ldd	r24, Y+23	; 0x17
    233a:	98 8d       	ldd	r25, Y+24	; 0x18
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2348:	88 23       	and	r24, r24
    234a:	2c f4       	brge	.+10     	; 0x2356 <LCD_VoidRightShift+0x186>
		__ticks = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
    2354:	3f c0       	rjmp	.+126    	; 0x23d4 <LCD_VoidRightShift+0x204>
	else if (__tmp > 65535)
    2356:	6d 89       	ldd	r22, Y+21	; 0x15
    2358:	7e 89       	ldd	r23, Y+22	; 0x16
    235a:	8f 89       	ldd	r24, Y+23	; 0x17
    235c:	98 8d       	ldd	r25, Y+24	; 0x18
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	4c f5       	brge	.+82     	; 0x23c0 <LCD_VoidRightShift+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	69 8d       	ldd	r22, Y+25	; 0x19
    2370:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e2       	ldi	r20, 0x20	; 32
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
    2396:	0f c0       	rjmp	.+30     	; 0x23b6 <LCD_VoidRightShift+0x1e6>
    2398:	88 ec       	ldi	r24, 0xC8	; 200
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9a 8b       	std	Y+18, r25	; 0x12
    239e:	89 8b       	std	Y+17, r24	; 0x11
    23a0:	89 89       	ldd	r24, Y+17	; 0x11
    23a2:	9a 89       	ldd	r25, Y+18	; 0x12
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_VoidRightShift+0x1d4>
    23a8:	9a 8b       	std	Y+18, r25	; 0x12
    23aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b6:	8b 89       	ldd	r24, Y+19	; 0x13
    23b8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	69 f7       	brne	.-38     	; 0x2398 <LCD_VoidRightShift+0x1c8>
    23be:	98 c0       	rjmp	.+304    	; 0x24f0 <LCD_VoidRightShift+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	6d 89       	ldd	r22, Y+21	; 0x15
    23c2:	7e 89       	ldd	r23, Y+22	; 0x16
    23c4:	8f 89       	ldd	r24, Y+23	; 0x17
    23c6:	98 8d       	ldd	r25, Y+24	; 0x18
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9c 8b       	std	Y+20, r25	; 0x14
    23d2:	8b 8b       	std	Y+19, r24	; 0x13
    23d4:	8b 89       	ldd	r24, Y+19	; 0x13
    23d6:	9c 89       	ldd	r25, Y+20	; 0x14
    23d8:	98 8b       	std	Y+16, r25	; 0x10
    23da:	8f 87       	std	Y+15, r24	; 0x0f
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23de:	98 89       	ldd	r25, Y+16	; 0x10
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <LCD_VoidRightShift+0x210>
    23e4:	98 8b       	std	Y+16, r25	; 0x10
    23e6:	8f 87       	std	Y+15, r24	; 0x0f
    23e8:	83 c0       	rjmp	.+262    	; 0x24f0 <LCD_VoidRightShift+0x320>
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
		{
			LCD_VoidSendStringFromPos(Ref_string,1,0);
    23ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    23ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    23f6:	8c e1       	ldi	r24, 0x1C	; 28
    23f8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	aa e7       	ldi	r26, 0x7A	; 122
    2402:	b3 e4       	ldi	r27, 0x43	; 67
    2404:	8b 87       	std	Y+11, r24	; 0x0b
    2406:	9c 87       	std	Y+12, r25	; 0x0c
    2408:	ad 87       	std	Y+13, r26	; 0x0d
    240a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	6b 85       	ldd	r22, Y+11	; 0x0b
    240e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2410:	8d 85       	ldd	r24, Y+13	; 0x0d
    2412:	9e 85       	ldd	r25, Y+14	; 0x0e
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a ef       	ldi	r20, 0xFA	; 250
    241a:	54 e4       	ldi	r21, 0x44	; 68
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	8f 83       	std	Y+7, r24	; 0x07
    2426:	98 87       	std	Y+8, r25	; 0x08
    2428:	a9 87       	std	Y+9, r26	; 0x09
    242a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242c:	6f 81       	ldd	r22, Y+7	; 0x07
    242e:	78 85       	ldd	r23, Y+8	; 0x08
    2430:	89 85       	ldd	r24, Y+9	; 0x09
    2432:	9a 85       	ldd	r25, Y+10	; 0x0a
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <LCD_VoidRightShift+0x27e>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <LCD_VoidRightShift+0x2fc>
	else if (__tmp > 65535)
    244e:	6f 81       	ldd	r22, Y+7	; 0x07
    2450:	78 85       	ldd	r23, Y+8	; 0x08
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	9a 85       	ldd	r25, Y+10	; 0x0a
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <LCD_VoidRightShift+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	6b 85       	ldd	r22, Y+11	; 0x0b
    2468:	7c 85       	ldd	r23, Y+12	; 0x0c
    246a:	8d 85       	ldd	r24, Y+13	; 0x0d
    246c:	9e 85       	ldd	r25, Y+14	; 0x0e
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <LCD_VoidRightShift+0x2de>
    2490:	88 ec       	ldi	r24, 0xC8	; 200
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9c 83       	std	Y+4, r25	; 0x04
    2496:	8b 83       	std	Y+3, r24	; 0x03
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_VoidRightShift+0x2cc>
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <LCD_VoidRightShift+0x2c0>
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <LCD_VoidRightShift+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ba:	78 85       	ldd	r23, Y+8	; 0x08
    24bc:	89 85       	ldd	r24, Y+9	; 0x09
    24be:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	9e 81       	ldd	r25, Y+6	; 0x06
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_VoidRightShift+0x308>
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    24e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e2:	8f 5f       	subi	r24, 0xFF	; 255
    24e4:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    24e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e8:	80 31       	cpi	r24, 0x10	; 16
    24ea:	11 f4       	brne	.+4      	; 0x24f0 <LCD_VoidRightShift+0x320>
			{
				Local_ColPosition = 0;
    24ec:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_1;
    24ee:	1c a6       	std	Y+44, r1	; 0x2c
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
    24f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <LCD_VoidRightShift+0x328>
    24f6:	79 cf       	rjmp	.-270    	; 0x23ea <LCD_VoidRightShift+0x21a>
    24f8:	fe ce       	rjmp	.-516    	; 0x22f6 <LCD_VoidRightShift+0x126>

000024fa <Keypad_GetPressedKey>:

/**************************************************************************************************/
/****************************************Function Definition***************************************/

u8 Keypad_GetPressedKey(void)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <Keypad_GetPressedKey+0x6>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Row, Local_Col;
	while(1)
	{
		for (Local_Col = 0; Local_Col < N_COL; Local_Col++)
    2504:	19 82       	std	Y+1, r1	; 0x01
    2506:	4c c0       	rjmp	.+152    	; 0x25a0 <Keypad_GetPressedKey+0xa6>
		{
			//DIO_VoidSetPortDir(KEYPAD_PORT,(0b00010000 << Local_Col));
			KEYPAD_PORT_DIR = (0b00010000 << Local_Col);
    2508:	ea e3       	ldi	r30, 0x3A	; 58
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	80 e1       	ldi	r24, 0x10	; 16
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <Keypad_GetPressedKey+0x22>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	2a 95       	dec	r18
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <Keypad_GetPressedKey+0x1e>
    2520:	80 83       	st	Z, r24
			//DIO_VoidSetPortValue(KEYPAD_PORT,(~(0b00010000<< Local_Col)));
			KEYPAD_PORT_OUT = (~(0b00010000<< Local_Col));
    2522:	eb e3       	ldi	r30, 0x3B	; 59
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	80 e1       	ldi	r24, 0x10	; 16
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	02 2e       	mov	r0, r18
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <Keypad_GetPressedKey+0x3e>
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	0a 94       	dec	r0
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <Keypad_GetPressedKey+0x3a>
    253c:	80 95       	com	r24
    253e:	80 83       	st	Z, r24

			for (Local_Row = 0; Local_Row < N_ROW; Local_Row++)
    2540:	1a 82       	std	Y+2, r1	; 0x02
    2542:	28 c0       	rjmp	.+80     	; 0x2594 <Keypad_GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,Local_Row))
    2544:	e9 e3       	ldi	r30, 0x39	; 57
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	88 2f       	mov	r24, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a9 01       	movw	r20, r18
    2556:	02 c0       	rjmp	.+4      	; 0x255c <Keypad_GetPressedKey+0x62>
    2558:	55 95       	asr	r21
    255a:	47 95       	ror	r20
    255c:	8a 95       	dec	r24
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <Keypad_GetPressedKey+0x5e>
    2560:	ca 01       	movw	r24, r20
    2562:	81 70       	andi	r24, 0x01	; 1
    2564:	90 70       	andi	r25, 0x00	; 0
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	91 f4       	brne	.+36     	; 0x258e <Keypad_GetPressedKey+0x94>
					#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
					#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((Local_Row*N_COL)+Local_Col+1));
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	98 2f       	mov	r25, r24
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	89 0f       	add	r24, r25
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	0e 94 d5 12 	call	0x25aa	; 0x25aa <Keypad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret
			//DIO_VoidSetPortDir(KEYPAD_PORT,(0b00010000 << Local_Col));
			KEYPAD_PORT_DIR = (0b00010000 << Local_Col);
			//DIO_VoidSetPortValue(KEYPAD_PORT,(~(0b00010000<< Local_Col)));
			KEYPAD_PORT_OUT = (~(0b00010000<< Local_Col));

			for (Local_Row = 0; Local_Row < N_ROW; Local_Row++)
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	8a 83       	std	Y+2, r24	; 0x02
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	84 30       	cpi	r24, 0x04	; 4
    2598:	a8 f2       	brcs	.-86     	; 0x2544 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey(void)
{
	u8 Local_Row, Local_Col;
	while(1)
	{
		for (Local_Col = 0; Local_Col < N_COL; Local_Col++)
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	84 30       	cpi	r24, 0x04	; 4
    25a4:	08 f4       	brcc	.+2      	; 0x25a8 <Keypad_GetPressedKey+0xae>
    25a6:	b0 cf       	rjmp	.-160    	; 0x2508 <Keypad_GetPressedKey+0xe>
    25a8:	ad cf       	rjmp	.-166    	; 0x2504 <Keypad_GetPressedKey+0xa>

000025aa <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <Keypad_4x4_adjustKeyNumber+0x6>
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <Keypad_4x4_adjustKeyNumber+0x8>
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	3c 83       	std	Y+4, r19	; 0x04
    25c2:	2b 83       	std	Y+3, r18	; 0x03
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	88 30       	cpi	r24, 0x08	; 8
    25ca:	91 05       	cpc	r25, r1
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <Keypad_4x4_adjustKeyNumber+0x26>
    25ce:	70 c0       	rjmp	.+224    	; 0x26b0 <Keypad_4x4_adjustKeyNumber+0x106>
    25d0:	2b 81       	ldd	r18, Y+3	; 0x03
    25d2:	3c 81       	ldd	r19, Y+4	; 0x04
    25d4:	29 30       	cpi	r18, 0x09	; 9
    25d6:	31 05       	cpc	r19, r1
    25d8:	5c f5       	brge	.+86     	; 0x2630 <Keypad_4x4_adjustKeyNumber+0x86>
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	9c 81       	ldd	r25, Y+4	; 0x04
    25de:	84 30       	cpi	r24, 0x04	; 4
    25e0:	91 05       	cpc	r25, r1
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <Keypad_4x4_adjustKeyNumber+0x3c>
    25e4:	59 c0       	rjmp	.+178    	; 0x2698 <Keypad_4x4_adjustKeyNumber+0xee>
    25e6:	2b 81       	ldd	r18, Y+3	; 0x03
    25e8:	3c 81       	ldd	r19, Y+4	; 0x04
    25ea:	25 30       	cpi	r18, 0x05	; 5
    25ec:	31 05       	cpc	r19, r1
    25ee:	9c f4       	brge	.+38     	; 0x2616 <Keypad_4x4_adjustKeyNumber+0x6c>
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	91 05       	cpc	r25, r1
    25f8:	09 f4       	brne	.+2      	; 0x25fc <Keypad_4x4_adjustKeyNumber+0x52>
    25fa:	48 c0       	rjmp	.+144    	; 0x268c <Keypad_4x4_adjustKeyNumber+0xe2>
    25fc:	2b 81       	ldd	r18, Y+3	; 0x03
    25fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2600:	23 30       	cpi	r18, 0x03	; 3
    2602:	31 05       	cpc	r19, r1
    2604:	0c f0       	brlt	.+2      	; 0x2608 <Keypad_4x4_adjustKeyNumber+0x5e>
    2606:	45 c0       	rjmp	.+138    	; 0x2692 <Keypad_4x4_adjustKeyNumber+0xe8>
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	91 05       	cpc	r25, r1
    2610:	09 f4       	brne	.+2      	; 0x2614 <Keypad_4x4_adjustKeyNumber+0x6a>
    2612:	39 c0       	rjmp	.+114    	; 0x2686 <Keypad_4x4_adjustKeyNumber+0xdc>
    2614:	67 c0       	rjmp	.+206    	; 0x26e4 <Keypad_4x4_adjustKeyNumber+0x13a>
    2616:	2b 81       	ldd	r18, Y+3	; 0x03
    2618:	3c 81       	ldd	r19, Y+4	; 0x04
    261a:	26 30       	cpi	r18, 0x06	; 6
    261c:	31 05       	cpc	r19, r1
    261e:	09 f4       	brne	.+2      	; 0x2622 <Keypad_4x4_adjustKeyNumber+0x78>
    2620:	41 c0       	rjmp	.+130    	; 0x26a4 <Keypad_4x4_adjustKeyNumber+0xfa>
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	87 30       	cpi	r24, 0x07	; 7
    2628:	91 05       	cpc	r25, r1
    262a:	0c f0       	brlt	.+2      	; 0x262e <Keypad_4x4_adjustKeyNumber+0x84>
    262c:	3e c0       	rjmp	.+124    	; 0x26aa <Keypad_4x4_adjustKeyNumber+0x100>
    262e:	37 c0       	rjmp	.+110    	; 0x269e <Keypad_4x4_adjustKeyNumber+0xf4>
    2630:	2b 81       	ldd	r18, Y+3	; 0x03
    2632:	3c 81       	ldd	r19, Y+4	; 0x04
    2634:	2c 30       	cpi	r18, 0x0C	; 12
    2636:	31 05       	cpc	r19, r1
    2638:	09 f4       	brne	.+2      	; 0x263c <Keypad_4x4_adjustKeyNumber+0x92>
    263a:	46 c0       	rjmp	.+140    	; 0x26c8 <Keypad_4x4_adjustKeyNumber+0x11e>
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	8d 30       	cpi	r24, 0x0D	; 13
    2642:	91 05       	cpc	r25, r1
    2644:	5c f4       	brge	.+22     	; 0x265c <Keypad_4x4_adjustKeyNumber+0xb2>
    2646:	2b 81       	ldd	r18, Y+3	; 0x03
    2648:	3c 81       	ldd	r19, Y+4	; 0x04
    264a:	2a 30       	cpi	r18, 0x0A	; 10
    264c:	31 05       	cpc	r19, r1
    264e:	b1 f1       	breq	.+108    	; 0x26bc <Keypad_4x4_adjustKeyNumber+0x112>
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	8b 30       	cpi	r24, 0x0B	; 11
    2656:	91 05       	cpc	r25, r1
    2658:	a4 f5       	brge	.+104    	; 0x26c2 <Keypad_4x4_adjustKeyNumber+0x118>
    265a:	2d c0       	rjmp	.+90     	; 0x26b6 <Keypad_4x4_adjustKeyNumber+0x10c>
    265c:	2b 81       	ldd	r18, Y+3	; 0x03
    265e:	3c 81       	ldd	r19, Y+4	; 0x04
    2660:	2e 30       	cpi	r18, 0x0E	; 14
    2662:	31 05       	cpc	r19, r1
    2664:	b9 f1       	breq	.+110    	; 0x26d4 <Keypad_4x4_adjustKeyNumber+0x12a>
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	8e 30       	cpi	r24, 0x0E	; 14
    266c:	91 05       	cpc	r25, r1
    266e:	7c f1       	brlt	.+94     	; 0x26ce <Keypad_4x4_adjustKeyNumber+0x124>
    2670:	2b 81       	ldd	r18, Y+3	; 0x03
    2672:	3c 81       	ldd	r19, Y+4	; 0x04
    2674:	2f 30       	cpi	r18, 0x0F	; 15
    2676:	31 05       	cpc	r19, r1
    2678:	79 f1       	breq	.+94     	; 0x26d8 <Keypad_4x4_adjustKeyNumber+0x12e>
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	80 31       	cpi	r24, 0x10	; 16
    2680:	91 05       	cpc	r25, r1
    2682:	69 f1       	breq	.+90     	; 0x26de <Keypad_4x4_adjustKeyNumber+0x134>
    2684:	2f c0       	rjmp	.+94     	; 0x26e4 <Keypad_4x4_adjustKeyNumber+0x13a>
	{
	case 1:		return 7;
    2686:	97 e0       	ldi	r25, 0x07	; 7
    2688:	9a 83       	std	Y+2, r25	; 0x02
    268a:	2d c0       	rjmp	.+90     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 2:		return 8;
    268c:	28 e0       	ldi	r18, 0x08	; 8
    268e:	2a 83       	std	Y+2, r18	; 0x02
    2690:	2a c0       	rjmp	.+84     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 3:		return 9;
    2692:	39 e0       	ldi	r19, 0x09	; 9
    2694:	3a 83       	std	Y+2, r19	; 0x02
    2696:	27 c0       	rjmp	.+78     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 4:		return '/';
    2698:	8f e2       	ldi	r24, 0x2F	; 47
    269a:	8a 83       	std	Y+2, r24	; 0x02
    269c:	24 c0       	rjmp	.+72     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 5:		return 4;
    269e:	94 e0       	ldi	r25, 0x04	; 4
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	21 c0       	rjmp	.+66     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 6:		return 5;
    26a4:	25 e0       	ldi	r18, 0x05	; 5
    26a6:	2a 83       	std	Y+2, r18	; 0x02
    26a8:	1e c0       	rjmp	.+60     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 7:		return 6;
    26aa:	36 e0       	ldi	r19, 0x06	; 6
    26ac:	3a 83       	std	Y+2, r19	; 0x02
    26ae:	1b c0       	rjmp	.+54     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 8:		return '*';
    26b0:	8a e2       	ldi	r24, 0x2A	; 42
    26b2:	8a 83       	std	Y+2, r24	; 0x02
    26b4:	18 c0       	rjmp	.+48     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 9:		return 1;
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	15 c0       	rjmp	.+42     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 10:	return 2;
    26bc:	22 e0       	ldi	r18, 0x02	; 2
    26be:	2a 83       	std	Y+2, r18	; 0x02
    26c0:	12 c0       	rjmp	.+36     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 11:	return 3;
    26c2:	33 e0       	ldi	r19, 0x03	; 3
    26c4:	3a 83       	std	Y+2, r19	; 0x02
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 12:	return '-';
    26c8:	8d e2       	ldi	r24, 0x2D	; 45
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	0c c0       	rjmp	.+24     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 13:	return 'c';
    26ce:	93 e6       	ldi	r25, 0x63	; 99
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	09 c0       	rjmp	.+18     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 14:	return 0;
    26d4:	1a 82       	std	Y+2, r1	; 0x02
    26d6:	07 c0       	rjmp	.+14     	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 15:	return '=';
    26d8:	2d e3       	ldi	r18, 0x3D	; 61
    26da:	2a 83       	std	Y+2, r18	; 0x02
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 16:	return '+';
    26de:	3b e2       	ldi	r19, 0x2B	; 43
    26e0:	3a 83       	std	Y+2, r19	; 0x02
    26e2:	01 c0       	rjmp	.+2      	; 0x26e6 <Keypad_4x4_adjustKeyNumber+0x13c>
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <Keypad_4x4_adjustKeyNumber+0x140>
				break;
	}
}
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <main>:
void UART_Interrupt_Fun (void);
u8 UART_RecValue = 0;

#include <util/delay.h>
void main (void)
{
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	cd 5f       	subi	r28, 0xFD	; 253
    270a:	d1 40       	sbci	r29, 0x01	; 1
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
	UART_CallBackFunctionRX(UART_Interrupt_Fun);
    2716:	84 ef       	ldi	r24, 0xF4	; 244
    2718:	9d e2       	ldi	r25, 0x2D	; 45
    271a:	0e 94 16 07 	call	0xe2c	; 0xe2c <UART_CallBackFunctionRX>

	UART_tstrConfiguration object ;
	object.UART_u8Mode = UART_u8_Recieve;
    271e:	fe 01       	movw	r30, r28
    2720:	ea 50       	subi	r30, 0x0A	; 10
    2722:	fe 4f       	sbci	r31, 0xFE	; 254
    2724:	80 e1       	ldi	r24, 0x10	; 16
    2726:	83 83       	std	Z+3, r24	; 0x03
	object.UART_u16BaudRate = UART_u16_BAUD_RATE_9600;
    2728:	fe 01       	movw	r30, r28
    272a:	ea 50       	subi	r30, 0x0A	; 10
    272c:	fe 4f       	sbci	r31, 0xFE	; 254
    272e:	87 e6       	ldi	r24, 0x67	; 103
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	95 83       	std	Z+5, r25	; 0x05
    2734:	84 83       	std	Z+4, r24	; 0x04
	object.UART_u8DataBits = UART_u8_EIGHT_DATA_BITS;
    2736:	fe 01       	movw	r30, r28
    2738:	ea 50       	subi	r30, 0x0A	; 10
    273a:	fe 4f       	sbci	r31, 0xFE	; 254
    273c:	86 e0       	ldi	r24, 0x06	; 6
    273e:	82 83       	std	Z+2, r24	; 0x02
	object.UART_u8PStopBit = UART_u8_ONE_STOP_BIT;
    2740:	fe 01       	movw	r30, r28
    2742:	ea 50       	subi	r30, 0x0A	; 10
    2744:	fe 4f       	sbci	r31, 0xFE	; 254
    2746:	11 82       	std	Z+1, r1	; 0x01
	object.UART_u8ParityBits = UART_u8_DISABLED_PARITY;
    2748:	fe 01       	movw	r30, r28
    274a:	ea 50       	subi	r30, 0x0A	; 10
    274c:	fe 4f       	sbci	r31, 0xFE	; 254
    274e:	10 82       	st	Z, r1

	GIE_VoidEnable();
    2750:	0e 94 55 07 	call	0xeaa	; 0xeaa <GIE_VoidEnable>
	//UART_enuInit(&object);
	UART_enuInitRXInterrupt(&object);
    2754:	ce 01       	movw	r24, r28
    2756:	8a 50       	subi	r24, 0x0A	; 10
    2758:	9e 4f       	sbci	r25, 0xFE	; 254
    275a:	0e 94 14 06 	call	0xc28	; 0xc28 <UART_enuInitRXInterrupt>

	//u8 UART_Flag = 0;

	u8 Key_Value;
	u8 Chosen_Mode = 0;
    275e:	fe 01       	movw	r30, r28
    2760:	ec 50       	subi	r30, 0x0C	; 12
    2762:	fe 4f       	sbci	r31, 0xFE	; 254
    2764:	10 82       	st	Z, r1
	u32 Saved_Pass = 1234;
    2766:	fe 01       	movw	r30, r28
    2768:	e0 51       	subi	r30, 0x10	; 16
    276a:	fe 4f       	sbci	r31, 0xFE	; 254
    276c:	82 ed       	ldi	r24, 0xD2	; 210
    276e:	94 e0       	ldi	r25, 0x04	; 4
    2770:	a0 e0       	ldi	r26, 0x00	; 0
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	80 83       	st	Z, r24
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	a2 83       	std	Z+2, r26	; 0x02
    277a:	b3 83       	std	Z+3, r27	; 0x03
	u32 Reversed_Pass = 4321;
    277c:	fe 01       	movw	r30, r28
    277e:	e4 51       	subi	r30, 0x14	; 20
    2780:	fe 4f       	sbci	r31, 0xFE	; 254
    2782:	81 ee       	ldi	r24, 0xE1	; 225
    2784:	90 e1       	ldi	r25, 0x10	; 16
    2786:	a0 e0       	ldi	r26, 0x00	; 0
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	80 83       	st	Z, r24
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	a2 83       	std	Z+2, r26	; 0x02
    2790:	b3 83       	std	Z+3, r27	; 0x03
	u32 Get_Reversed_Pass = 0;
    2792:	fe 01       	movw	r30, r28
    2794:	e8 51       	subi	r30, 0x18	; 24
    2796:	fe 4f       	sbci	r31, 0xFE	; 254
    2798:	10 82       	st	Z, r1
    279a:	11 82       	std	Z+1, r1	; 0x01
    279c:	12 82       	std	Z+2, r1	; 0x02
    279e:	13 82       	std	Z+3, r1	; 0x03
	u32 Temp_Pass = 0;
    27a0:	fe 01       	movw	r30, r28
    27a2:	ec 51       	subi	r30, 0x1C	; 28
    27a4:	fe 4f       	sbci	r31, 0xFE	; 254
    27a6:	10 82       	st	Z, r1
    27a8:	11 82       	std	Z+1, r1	; 0x01
    27aa:	12 82       	std	Z+2, r1	; 0x02
    27ac:	13 82       	std	Z+3, r1	; 0x03
	u32 Comp_Pass = 0;
    27ae:	fe 01       	movw	r30, r28
    27b0:	e0 52       	subi	r30, 0x20	; 32
    27b2:	fe 4f       	sbci	r31, 0xFE	; 254
    27b4:	10 82       	st	Z, r1
    27b6:	11 82       	std	Z+1, r1	; 0x01
    27b8:	12 82       	std	Z+2, r1	; 0x02
    27ba:	13 82       	std	Z+3, r1	; 0x03
	u8 motor_steps[2] = {6,3};
    27bc:	fe 01       	movw	r30, r28
    27be:	e4 50       	subi	r30, 0x04	; 4
    27c0:	fe 4f       	sbci	r31, 0xFE	; 254
    27c2:	86 e0       	ldi	r24, 0x06	; 6
    27c4:	80 83       	st	Z, r24
    27c6:	fe 01       	movw	r30, r28
    27c8:	e4 50       	subi	r30, 0x04	; 4
    27ca:	fe 4f       	sbci	r31, 0xFE	; 254
    27cc:	83 e0       	ldi	r24, 0x03	; 3
    27ce:	81 83       	std	Z+1, r24	; 0x01
	DIO_VoidSetPortDir(Group_C,0x0f);
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	6f e0       	ldi	r22, 0x0F	; 15
    27d4:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_VoidSetPortDir>
	DIO_VoidSetPortValue(Group_C,0xf0);
    27d8:	83 e0       	ldi	r24, 0x03	; 3
    27da:	60 ef       	ldi	r22, 0xF0	; 240
    27dc:	0e 94 4f 0a 	call	0x149e	; 0x149e <DIO_VoidSetPortValue>
	DIO_VoidSetPinDir(Group_D,Pin_D4,Output);
    27e0:	84 e0       	ldi	r24, 0x04	; 4
    27e2:	64 e0       	ldi	r22, 0x04	; 4
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_VoidSetPinDir>

	LCD_Void8BitInit();
    27ea:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCD_Void8BitInit>
	LCD_VoidSendStringFromPos("Welcome Home",0,2);
    27ee:	80 e6       	ldi	r24, 0x60	; 96
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	42 e0       	ldi	r20, 0x02	; 2
    27f6:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
    27fa:	fe 01       	movw	r30, r28
    27fc:	e7 52       	subi	r30, 0x27	; 39
    27fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	aa e7       	ldi	r26, 0x7A	; 122
    2806:	b3 e4       	ldi	r27, 0x43	; 67
    2808:	80 83       	st	Z, r24
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	a2 83       	std	Z+2, r26	; 0x02
    280e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	8e 01       	movw	r16, r28
    2812:	0b 52       	subi	r16, 0x2B	; 43
    2814:	1e 4f       	sbci	r17, 0xFE	; 254
    2816:	fe 01       	movw	r30, r28
    2818:	e7 52       	subi	r30, 0x27	; 39
    281a:	fe 4f       	sbci	r31, 0xFE	; 254
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	82 81       	ldd	r24, Z+2	; 0x02
    2822:	93 81       	ldd	r25, Z+3	; 0x03
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4a ef       	ldi	r20, 0xFA	; 250
    282a:	54 e4       	ldi	r21, 0x44	; 68
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	f8 01       	movw	r30, r16
    2836:	80 83       	st	Z, r24
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	a2 83       	std	Z+2, r26	; 0x02
    283c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    283e:	fe 01       	movw	r30, r28
    2840:	eb 52       	subi	r30, 0x2B	; 43
    2842:	fe 4f       	sbci	r31, 0xFE	; 254
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	44 f4       	brge	.+16     	; 0x286c <main+0x170>
		__ticks = 1;
    285c:	fe 01       	movw	r30, r28
    285e:	ed 52       	subi	r30, 0x2D	; 45
    2860:	fe 4f       	sbci	r31, 0xFE	; 254
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
    286a:	64 c0       	rjmp	.+200    	; 0x2934 <main+0x238>
	else if (__tmp > 65535)
    286c:	fe 01       	movw	r30, r28
    286e:	eb 52       	subi	r30, 0x2B	; 43
    2870:	fe 4f       	sbci	r31, 0xFE	; 254
    2872:	60 81       	ld	r22, Z
    2874:	71 81       	ldd	r23, Z+1	; 0x01
    2876:	82 81       	ldd	r24, Z+2	; 0x02
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	3f ef       	ldi	r19, 0xFF	; 255
    287e:	4f e7       	ldi	r20, 0x7F	; 127
    2880:	57 e4       	ldi	r21, 0x47	; 71
    2882:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2886:	18 16       	cp	r1, r24
    2888:	0c f0       	brlt	.+2      	; 0x288c <main+0x190>
    288a:	43 c0       	rjmp	.+134    	; 0x2912 <main+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	fe 01       	movw	r30, r28
    288e:	e7 52       	subi	r30, 0x27	; 39
    2890:	fe 4f       	sbci	r31, 0xFE	; 254
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	8e 01       	movw	r16, r28
    28ac:	0d 52       	subi	r16, 0x2D	; 45
    28ae:	1e 4f       	sbci	r17, 0xFE	; 254
    28b0:	bc 01       	movw	r22, r24
    28b2:	cd 01       	movw	r24, r26
    28b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	f8 01       	movw	r30, r16
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	80 83       	st	Z, r24
    28c2:	1f c0       	rjmp	.+62     	; 0x2902 <main+0x206>
    28c4:	fe 01       	movw	r30, r28
    28c6:	ef 52       	subi	r30, 0x2F	; 47
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	88 ec       	ldi	r24, 0xC8	; 200
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
    28d2:	fe 01       	movw	r30, r28
    28d4:	ef 52       	subi	r30, 0x2F	; 47
    28d6:	fe 4f       	sbci	r31, 0xFE	; 254
    28d8:	80 81       	ld	r24, Z
    28da:	91 81       	ldd	r25, Z+1	; 0x01
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <main+0x1e0>
    28e0:	fe 01       	movw	r30, r28
    28e2:	ef 52       	subi	r30, 0x2F	; 47
    28e4:	fe 4f       	sbci	r31, 0xFE	; 254
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ea:	de 01       	movw	r26, r28
    28ec:	ad 52       	subi	r26, 0x2D	; 45
    28ee:	be 4f       	sbci	r27, 0xFE	; 254
    28f0:	fe 01       	movw	r30, r28
    28f2:	ed 52       	subi	r30, 0x2D	; 45
    28f4:	fe 4f       	sbci	r31, 0xFE	; 254
    28f6:	80 81       	ld	r24, Z
    28f8:	91 81       	ldd	r25, Z+1	; 0x01
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	11 96       	adiw	r26, 0x01	; 1
    28fe:	9c 93       	st	X, r25
    2900:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2902:	fe 01       	movw	r30, r28
    2904:	ed 52       	subi	r30, 0x2D	; 45
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	d1 f6       	brne	.-76     	; 0x28c4 <main+0x1c8>
    2910:	27 c0       	rjmp	.+78     	; 0x2960 <main+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	8e 01       	movw	r16, r28
    2914:	0d 52       	subi	r16, 0x2D	; 45
    2916:	1e 4f       	sbci	r17, 0xFE	; 254
    2918:	fe 01       	movw	r30, r28
    291a:	eb 52       	subi	r30, 0x2B	; 43
    291c:	fe 4f       	sbci	r31, 0xFE	; 254
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	f8 01       	movw	r30, r16
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	80 83       	st	Z, r24
    2934:	de 01       	movw	r26, r28
    2936:	a1 53       	subi	r26, 0x31	; 49
    2938:	be 4f       	sbci	r27, 0xFE	; 254
    293a:	fe 01       	movw	r30, r28
    293c:	ed 52       	subi	r30, 0x2D	; 45
    293e:	fe 4f       	sbci	r31, 0xFE	; 254
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	8d 93       	st	X+, r24
    2946:	9c 93       	st	X, r25
    2948:	fe 01       	movw	r30, r28
    294a:	e1 53       	subi	r30, 0x31	; 49
    294c:	fe 4f       	sbci	r31, 0xFE	; 254
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <main+0x256>
    2956:	fe 01       	movw	r30, r28
    2958:	e1 53       	subi	r30, 0x31	; 49
    295a:	fe 4f       	sbci	r31, 0xFE	; 254
    295c:	91 83       	std	Z+1, r25	; 0x01
    295e:	80 83       	st	Z, r24
	_delay_ms(250);

	while(1)
	{
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    2966:	fe 01       	movw	r30, r28
    2968:	e5 53       	subi	r30, 0x35	; 53
    296a:	fe 4f       	sbci	r31, 0xFE	; 254
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	a0 e0       	ldi	r26, 0x00	; 0
    2972:	b0 e4       	ldi	r27, 0x40	; 64
    2974:	80 83       	st	Z, r24
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	a2 83       	std	Z+2, r26	; 0x02
    297a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	8e 01       	movw	r16, r28
    297e:	09 53       	subi	r16, 0x39	; 57
    2980:	1e 4f       	sbci	r17, 0xFE	; 254
    2982:	fe 01       	movw	r30, r28
    2984:	e5 53       	subi	r30, 0x35	; 53
    2986:	fe 4f       	sbci	r31, 0xFE	; 254
    2988:	60 81       	ld	r22, Z
    298a:	71 81       	ldd	r23, Z+1	; 0x01
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a ef       	ldi	r20, 0xFA	; 250
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	f8 01       	movw	r30, r16
    29a2:	80 83       	st	Z, r24
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	a2 83       	std	Z+2, r26	; 0x02
    29a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29aa:	fe 01       	movw	r30, r28
    29ac:	e9 53       	subi	r30, 0x39	; 57
    29ae:	fe 4f       	sbci	r31, 0xFE	; 254
    29b0:	60 81       	ld	r22, Z
    29b2:	71 81       	ldd	r23, Z+1	; 0x01
    29b4:	82 81       	ldd	r24, Z+2	; 0x02
    29b6:	93 81       	ldd	r25, Z+3	; 0x03
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e8       	ldi	r20, 0x80	; 128
    29be:	5f e3       	ldi	r21, 0x3F	; 63
    29c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c4:	88 23       	and	r24, r24
    29c6:	44 f4       	brge	.+16     	; 0x29d8 <main+0x2dc>
		__ticks = 1;
    29c8:	fe 01       	movw	r30, r28
    29ca:	eb 53       	subi	r30, 0x3B	; 59
    29cc:	fe 4f       	sbci	r31, 0xFE	; 254
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	91 83       	std	Z+1, r25	; 0x01
    29d4:	80 83       	st	Z, r24
    29d6:	64 c0       	rjmp	.+200    	; 0x2aa0 <main+0x3a4>
	else if (__tmp > 65535)
    29d8:	fe 01       	movw	r30, r28
    29da:	e9 53       	subi	r30, 0x39	; 57
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	60 81       	ld	r22, Z
    29e0:	71 81       	ldd	r23, Z+1	; 0x01
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	57 e4       	ldi	r21, 0x47	; 71
    29ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	0c f0       	brlt	.+2      	; 0x29f8 <main+0x2fc>
    29f6:	43 c0       	rjmp	.+134    	; 0x2a7e <main+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f8:	fe 01       	movw	r30, r28
    29fa:	e5 53       	subi	r30, 0x35	; 53
    29fc:	fe 4f       	sbci	r31, 0xFE	; 254
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8e 01       	movw	r16, r28
    2a18:	0b 53       	subi	r16, 0x3B	; 59
    2a1a:	1e 4f       	sbci	r17, 0xFE	; 254
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	f8 01       	movw	r30, r16
    2a2a:	91 83       	std	Z+1, r25	; 0x01
    2a2c:	80 83       	st	Z, r24
    2a2e:	1f c0       	rjmp	.+62     	; 0x2a6e <main+0x372>
    2a30:	fe 01       	movw	r30, r28
    2a32:	ed 53       	subi	r30, 0x3D	; 61
    2a34:	fe 4f       	sbci	r31, 0xFE	; 254
    2a36:	88 ec       	ldi	r24, 0xC8	; 200
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	80 83       	st	Z, r24
    2a3e:	fe 01       	movw	r30, r28
    2a40:	ed 53       	subi	r30, 0x3D	; 61
    2a42:	fe 4f       	sbci	r31, 0xFE	; 254
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <main+0x34c>
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ed 53       	subi	r30, 0x3D	; 61
    2a50:	fe 4f       	sbci	r31, 0xFE	; 254
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	de 01       	movw	r26, r28
    2a58:	ab 53       	subi	r26, 0x3B	; 59
    2a5a:	be 4f       	sbci	r27, 0xFE	; 254
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	eb 53       	subi	r30, 0x3B	; 59
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	80 81       	ld	r24, Z
    2a64:	91 81       	ldd	r25, Z+1	; 0x01
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	11 96       	adiw	r26, 0x01	; 1
    2a6a:	9c 93       	st	X, r25
    2a6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6e:	fe 01       	movw	r30, r28
    2a70:	eb 53       	subi	r30, 0x3B	; 59
    2a72:	fe 4f       	sbci	r31, 0xFE	; 254
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	d1 f6       	brne	.-76     	; 0x2a30 <main+0x334>
    2a7c:	27 c0       	rjmp	.+78     	; 0x2acc <main+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7e:	8e 01       	movw	r16, r28
    2a80:	0b 53       	subi	r16, 0x3B	; 59
    2a82:	1e 4f       	sbci	r17, 0xFE	; 254
    2a84:	fe 01       	movw	r30, r28
    2a86:	e9 53       	subi	r30, 0x39	; 57
    2a88:	fe 4f       	sbci	r31, 0xFE	; 254
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	91 83       	std	Z+1, r25	; 0x01
    2a9e:	80 83       	st	Z, r24
    2aa0:	de 01       	movw	r26, r28
    2aa2:	af 53       	subi	r26, 0x3F	; 63
    2aa4:	be 4f       	sbci	r27, 0xFE	; 254
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	eb 53       	subi	r30, 0x3B	; 59
    2aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2aac:	80 81       	ld	r24, Z
    2aae:	91 81       	ldd	r25, Z+1	; 0x01
    2ab0:	8d 93       	st	X+, r24
    2ab2:	9c 93       	st	X, r25
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ef 53       	subi	r30, 0x3F	; 63
    2ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aba:	80 81       	ld	r24, Z
    2abc:	91 81       	ldd	r25, Z+1	; 0x01
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <main+0x3c2>
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ef 53       	subi	r30, 0x3F	; 63
    2ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
		_delay_ms(2);
		LCD_VoidSendStringFromPos("Choose a Mode",0,2);
    2acc:	8d e6       	ldi	r24, 0x6D	; 109
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	42 e0       	ldi	r20, 0x02	; 2
    2ad4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e3 54       	subi	r30, 0x43	; 67
    2adc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	aa ef       	ldi	r26, 0xFA	; 250
    2ae4:	b3 e4       	ldi	r27, 0x43	; 67
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aee:	8e 01       	movw	r16, r28
    2af0:	07 54       	subi	r16, 0x47	; 71
    2af2:	1e 4f       	sbci	r17, 0xFE	; 254
    2af4:	fe 01       	movw	r30, r28
    2af6:	e3 54       	subi	r30, 0x43	; 67
    2af8:	fe 4f       	sbci	r31, 0xFE	; 254
    2afa:	60 81       	ld	r22, Z
    2afc:	71 81       	ldd	r23, Z+1	; 0x01
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	4a ef       	ldi	r20, 0xFA	; 250
    2b08:	54 e4       	ldi	r21, 0x44	; 68
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	f8 01       	movw	r30, r16
    2b14:	80 83       	st	Z, r24
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	a2 83       	std	Z+2, r26	; 0x02
    2b1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e7 54       	subi	r30, 0x47	; 71
    2b20:	fe 4f       	sbci	r31, 0xFE	; 254
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	44 f4       	brge	.+16     	; 0x2b4a <main+0x44e>
		__ticks = 1;
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e9 54       	subi	r30, 0x49	; 73
    2b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
    2b48:	64 c0       	rjmp	.+200    	; 0x2c12 <main+0x516>
	else if (__tmp > 65535)
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e7 54       	subi	r30, 0x47	; 71
    2b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b50:	60 81       	ld	r22, Z
    2b52:	71 81       	ldd	r23, Z+1	; 0x01
    2b54:	82 81       	ldd	r24, Z+2	; 0x02
    2b56:	93 81       	ldd	r25, Z+3	; 0x03
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	3f ef       	ldi	r19, 0xFF	; 255
    2b5c:	4f e7       	ldi	r20, 0x7F	; 127
    2b5e:	57 e4       	ldi	r21, 0x47	; 71
    2b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b64:	18 16       	cp	r1, r24
    2b66:	0c f0       	brlt	.+2      	; 0x2b6a <main+0x46e>
    2b68:	43 c0       	rjmp	.+134    	; 0x2bf0 <main+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e3 54       	subi	r30, 0x43	; 67
    2b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b70:	60 81       	ld	r22, Z
    2b72:	71 81       	ldd	r23, Z+1	; 0x01
    2b74:	82 81       	ldd	r24, Z+2	; 0x02
    2b76:	93 81       	ldd	r25, Z+3	; 0x03
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	8e 01       	movw	r16, r28
    2b8a:	09 54       	subi	r16, 0x49	; 73
    2b8c:	1e 4f       	sbci	r17, 0xFE	; 254
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	1f c0       	rjmp	.+62     	; 0x2be0 <main+0x4e4>
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	eb 54       	subi	r30, 0x4B	; 75
    2ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba8:	88 ec       	ldi	r24, 0xC8	; 200
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	eb 54       	subi	r30, 0x4B	; 75
    2bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <main+0x4be>
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	eb 54       	subi	r30, 0x4B	; 75
    2bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	de 01       	movw	r26, r28
    2bca:	a9 54       	subi	r26, 0x49	; 73
    2bcc:	be 4f       	sbci	r27, 0xFE	; 254
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e9 54       	subi	r30, 0x49	; 73
    2bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	11 96       	adiw	r26, 0x01	; 1
    2bdc:	9c 93       	st	X, r25
    2bde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be0:	fe 01       	movw	r30, r28
    2be2:	e9 54       	subi	r30, 0x49	; 73
    2be4:	fe 4f       	sbci	r31, 0xFE	; 254
    2be6:	80 81       	ld	r24, Z
    2be8:	91 81       	ldd	r25, Z+1	; 0x01
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	d1 f6       	brne	.-76     	; 0x2ba2 <main+0x4a6>
    2bee:	27 c0       	rjmp	.+78     	; 0x2c3e <main+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf0:	8e 01       	movw	r16, r28
    2bf2:	09 54       	subi	r16, 0x49	; 73
    2bf4:	1e 4f       	sbci	r17, 0xFE	; 254
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e7 54       	subi	r30, 0x47	; 71
    2bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	82 81       	ldd	r24, Z+2	; 0x02
    2c02:	93 81       	ldd	r25, Z+3	; 0x03
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	f8 01       	movw	r30, r16
    2c0e:	91 83       	std	Z+1, r25	; 0x01
    2c10:	80 83       	st	Z, r24
    2c12:	de 01       	movw	r26, r28
    2c14:	ad 54       	subi	r26, 0x4D	; 77
    2c16:	be 4f       	sbci	r27, 0xFE	; 254
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e9 54       	subi	r30, 0x49	; 73
    2c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1e:	80 81       	ld	r24, Z
    2c20:	91 81       	ldd	r25, Z+1	; 0x01
    2c22:	8d 93       	st	X+, r24
    2c24:	9c 93       	st	X, r25
    2c26:	fe 01       	movw	r30, r28
    2c28:	ed 54       	subi	r30, 0x4D	; 77
    2c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <main+0x534>
    2c34:	fe 01       	movw	r30, r28
    2c36:	ed 54       	subi	r30, 0x4D	; 77
    2c38:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    2c44:	fe 01       	movw	r30, r28
    2c46:	e1 55       	subi	r30, 0x51	; 81
    2c48:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a0 e0       	ldi	r26, 0x00	; 0
    2c50:	b0 e4       	ldi	r27, 0x40	; 64
    2c52:	80 83       	st	Z, r24
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	a2 83       	std	Z+2, r26	; 0x02
    2c58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	8e 01       	movw	r16, r28
    2c5c:	05 55       	subi	r16, 0x55	; 85
    2c5e:	1e 4f       	sbci	r17, 0xFE	; 254
    2c60:	fe 01       	movw	r30, r28
    2c62:	e1 55       	subi	r30, 0x51	; 81
    2c64:	fe 4f       	sbci	r31, 0xFE	; 254
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a ef       	ldi	r20, 0xFA	; 250
    2c74:	54 e4       	ldi	r21, 0x44	; 68
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	f8 01       	movw	r30, r16
    2c80:	80 83       	st	Z, r24
    2c82:	91 83       	std	Z+1, r25	; 0x01
    2c84:	a2 83       	std	Z+2, r26	; 0x02
    2c86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e5 55       	subi	r30, 0x55	; 85
    2c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	44 f4       	brge	.+16     	; 0x2cb6 <main+0x5ba>
		__ticks = 1;
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e7 55       	subi	r30, 0x57	; 87
    2caa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    2cb4:	64 c0       	rjmp	.+200    	; 0x2d7e <main+0x682>
	else if (__tmp > 65535)
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e5 55       	subi	r30, 0x55	; 85
    2cba:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbc:	60 81       	ld	r22, Z
    2cbe:	71 81       	ldd	r23, Z+1	; 0x01
    2cc0:	82 81       	ldd	r24, Z+2	; 0x02
    2cc2:	93 81       	ldd	r25, Z+3	; 0x03
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	4f e7       	ldi	r20, 0x7F	; 127
    2cca:	57 e4       	ldi	r21, 0x47	; 71
    2ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd0:	18 16       	cp	r1, r24
    2cd2:	0c f0       	brlt	.+2      	; 0x2cd6 <main+0x5da>
    2cd4:	43 c0       	rjmp	.+134    	; 0x2d5c <main+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	e1 55       	subi	r30, 0x51	; 81
    2cda:	fe 4f       	sbci	r31, 0xFE	; 254
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e2       	ldi	r20, 0x20	; 32
    2cea:	51 e4       	ldi	r21, 0x41	; 65
    2cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	07 55       	subi	r16, 0x57	; 87
    2cf8:	1e 4f       	sbci	r17, 0xFE	; 254
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	f8 01       	movw	r30, r16
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
    2d0c:	1f c0       	rjmp	.+62     	; 0x2d4c <main+0x650>
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e9 55       	subi	r30, 0x59	; 89
    2d12:	fe 4f       	sbci	r31, 0xFE	; 254
    2d14:	88 ec       	ldi	r24, 0xC8	; 200
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	80 83       	st	Z, r24
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e9 55       	subi	r30, 0x59	; 89
    2d20:	fe 4f       	sbci	r31, 0xFE	; 254
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <main+0x62a>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e9 55       	subi	r30, 0x59	; 89
    2d2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	de 01       	movw	r26, r28
    2d36:	a7 55       	subi	r26, 0x57	; 87
    2d38:	be 4f       	sbci	r27, 0xFE	; 254
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e7 55       	subi	r30, 0x57	; 87
    2d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	11 96       	adiw	r26, 0x01	; 1
    2d48:	9c 93       	st	X, r25
    2d4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e7 55       	subi	r30, 0x57	; 87
    2d50:	fe 4f       	sbci	r31, 0xFE	; 254
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	d1 f6       	brne	.-76     	; 0x2d0e <main+0x612>
    2d5a:	27 c0       	rjmp	.+78     	; 0x2daa <main+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5c:	8e 01       	movw	r16, r28
    2d5e:	07 55       	subi	r16, 0x57	; 87
    2d60:	1e 4f       	sbci	r17, 0xFE	; 254
    2d62:	fe 01       	movw	r30, r28
    2d64:	e5 55       	subi	r30, 0x55	; 85
    2d66:	fe 4f       	sbci	r31, 0xFE	; 254
    2d68:	60 81       	ld	r22, Z
    2d6a:	71 81       	ldd	r23, Z+1	; 0x01
    2d6c:	82 81       	ldd	r24, Z+2	; 0x02
    2d6e:	93 81       	ldd	r25, Z+3	; 0x03
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	de 01       	movw	r26, r28
    2d80:	ab 55       	subi	r26, 0x5B	; 91
    2d82:	be 4f       	sbci	r27, 0xFE	; 254
    2d84:	fe 01       	movw	r30, r28
    2d86:	e7 55       	subi	r30, 0x57	; 87
    2d88:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	8d 93       	st	X+, r24
    2d90:	9c 93       	st	X, r25
    2d92:	fe 01       	movw	r30, r28
    2d94:	eb 55       	subi	r30, 0x5B	; 91
    2d96:	fe 4f       	sbci	r31, 0xFE	; 254
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <main+0x6a0>
    2da0:	fe 01       	movw	r30, r28
    2da2:	eb 55       	subi	r30, 0x5B	; 91
    2da4:	fe 4f       	sbci	r31, 0xFE	; 254
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	80 83       	st	Z, r24
		_delay_ms(2);
		LCD_VoidSendString("1- Enter Pass");
    2daa:	8b e7       	ldi	r24, 0x7B	; 123
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_VoidSendString>
		LCD_VoidSendStringFromPos("2- Change Pass",1,0);
    2db2:	89 e8       	ldi	r24, 0x89	; 137
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	61 e0       	ldi	r22, 0x01	; 1
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
		Chosen_Mode = Keypad_GetPressedKey();
    2dbe:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Keypad_GetPressedKey>
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ec 50       	subi	r30, 0x0C	; 12
    2dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc8:	80 83       	st	Z, r24
		DIO_VoidSetPinValue(Group_D,Pin_D4,Low);
    2dca:	84 e0       	ldi	r24, 0x04	; 4
    2dcc:	64 e0       	ldi	r22, 0x04	; 4
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinValue>

		/*Code to get the Password From the User*/
		if (Chosen_Mode == 1)
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	ec 50       	subi	r30, 0x0C	; 12
    2dd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dda:	80 81       	ld	r24, Z
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	11 f0       	breq	.+4      	; 0x2de4 <main+0x6e8>
    2de0:	0c 94 29 21 	jmp	0x4252	; 0x4252 <main+0x1b56>
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    2dea:	fe 01       	movw	r30, r28
    2dec:	ef 55       	subi	r30, 0x5F	; 95
    2dee:	fe 4f       	sbci	r31, 0xFE	; 254
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	a0 e0       	ldi	r26, 0x00	; 0
    2df6:	b0 e4       	ldi	r27, 0x40	; 64
    2df8:	80 83       	st	Z, r24
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	a2 83       	std	Z+2, r26	; 0x02
    2dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e00:	8e 01       	movw	r16, r28
    2e02:	03 56       	subi	r16, 0x63	; 99
    2e04:	1e 4f       	sbci	r17, 0xFE	; 254
    2e06:	fe 01       	movw	r30, r28
    2e08:	ef 55       	subi	r30, 0x5F	; 95
    2e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	4a ef       	ldi	r20, 0xFA	; 250
    2e1a:	54 e4       	ldi	r21, 0x44	; 68
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	f8 01       	movw	r30, r16
    2e26:	80 83       	st	Z, r24
    2e28:	91 83       	std	Z+1, r25	; 0x01
    2e2a:	a2 83       	std	Z+2, r26	; 0x02
    2e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e3 56       	subi	r30, 0x63	; 99
    2e32:	fe 4f       	sbci	r31, 0xFE	; 254
    2e34:	60 81       	ld	r22, Z
    2e36:	71 81       	ldd	r23, Z+1	; 0x01
    2e38:	82 81       	ldd	r24, Z+2	; 0x02
    2e3a:	93 81       	ldd	r25, Z+3	; 0x03
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e8       	ldi	r20, 0x80	; 128
    2e42:	5f e3       	ldi	r21, 0x3F	; 63
    2e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e48:	88 23       	and	r24, r24
    2e4a:	44 f4       	brge	.+16     	; 0x2e5c <main+0x760>
		__ticks = 1;
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e5 56       	subi	r30, 0x65	; 101
    2e50:	fe 4f       	sbci	r31, 0xFE	; 254
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	64 c0       	rjmp	.+200    	; 0x2f24 <main+0x828>
	else if (__tmp > 65535)
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e3 56       	subi	r30, 0x63	; 99
    2e60:	fe 4f       	sbci	r31, 0xFE	; 254
    2e62:	60 81       	ld	r22, Z
    2e64:	71 81       	ldd	r23, Z+1	; 0x01
    2e66:	82 81       	ldd	r24, Z+2	; 0x02
    2e68:	93 81       	ldd	r25, Z+3	; 0x03
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	0c f0       	brlt	.+2      	; 0x2e7c <main+0x780>
    2e7a:	43 c0       	rjmp	.+134    	; 0x2f02 <main+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ef 55       	subi	r30, 0x5F	; 95
    2e80:	fe 4f       	sbci	r31, 0xFE	; 254
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e2       	ldi	r20, 0x20	; 32
    2e90:	51 e4       	ldi	r21, 0x41	; 65
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	8e 01       	movw	r16, r28
    2e9c:	05 56       	subi	r16, 0x65	; 101
    2e9e:	1e 4f       	sbci	r17, 0xFE	; 254
    2ea0:	bc 01       	movw	r22, r24
    2ea2:	cd 01       	movw	r24, r26
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	f8 01       	movw	r30, r16
    2eae:	91 83       	std	Z+1, r25	; 0x01
    2eb0:	80 83       	st	Z, r24
    2eb2:	1f c0       	rjmp	.+62     	; 0x2ef2 <main+0x7f6>
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e7 56       	subi	r30, 0x67	; 103
    2eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eba:	88 ec       	ldi	r24, 0xC8	; 200
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	80 83       	st	Z, r24
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e7 56       	subi	r30, 0x67	; 103
    2ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <main+0x7d0>
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e7 56       	subi	r30, 0x67	; 103
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eda:	de 01       	movw	r26, r28
    2edc:	a5 56       	subi	r26, 0x65	; 101
    2ede:	be 4f       	sbci	r27, 0xFE	; 254
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e5 56       	subi	r30, 0x65	; 101
    2ee4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee6:	80 81       	ld	r24, Z
    2ee8:	91 81       	ldd	r25, Z+1	; 0x01
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	11 96       	adiw	r26, 0x01	; 1
    2eee:	9c 93       	st	X, r25
    2ef0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e5 56       	subi	r30, 0x65	; 101
    2ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	d1 f6       	brne	.-76     	; 0x2eb4 <main+0x7b8>
    2f00:	27 c0       	rjmp	.+78     	; 0x2f50 <main+0x854>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	8e 01       	movw	r16, r28
    2f04:	05 56       	subi	r16, 0x65	; 101
    2f06:	1e 4f       	sbci	r17, 0xFE	; 254
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e3 56       	subi	r30, 0x63	; 99
    2f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	f8 01       	movw	r30, r16
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	de 01       	movw	r26, r28
    2f26:	a9 56       	subi	r26, 0x69	; 105
    2f28:	be 4f       	sbci	r27, 0xFE	; 254
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e5 56       	subi	r30, 0x65	; 101
    2f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	8d 93       	st	X+, r24
    2f36:	9c 93       	st	X, r25
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e9 56       	subi	r30, 0x69	; 105
    2f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <main+0x846>
    2f46:	fe 01       	movw	r30, r28
    2f48:	e9 56       	subi	r30, 0x69	; 105
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_VoidSendString("Password : ");
    2f50:	88 e9       	ldi	r24, 0x98	; 152
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_VoidSendString>
			for (u8 i = 0; i < 4 ; i++)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e1 52       	subi	r30, 0x21	; 33
    2f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5e:	10 82       	st	Z, r1
    2f60:	40 c3       	rjmp	.+1664   	; 0x35e2 <main+0xee6>
			{
				LCD_VoidSendCommand(LCD_CursorON);
    2f62:	8e e0       	ldi	r24, 0x0E	; 14
    2f64:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ed 56       	subi	r30, 0x6D	; 109
    2f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	a8 ec       	ldi	r26, 0xC8	; 200
    2f74:	b2 e4       	ldi	r27, 0x42	; 66
    2f76:	80 83       	st	Z, r24
    2f78:	91 83       	std	Z+1, r25	; 0x01
    2f7a:	a2 83       	std	Z+2, r26	; 0x02
    2f7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f7e:	8e 01       	movw	r16, r28
    2f80:	01 57       	subi	r16, 0x71	; 113
    2f82:	1e 4f       	sbci	r17, 0xFE	; 254
    2f84:	fe 01       	movw	r30, r28
    2f86:	ed 56       	subi	r30, 0x6D	; 109
    2f88:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8a:	60 81       	ld	r22, Z
    2f8c:	71 81       	ldd	r23, Z+1	; 0x01
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	93 81       	ldd	r25, Z+3	; 0x03
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	4a ef       	ldi	r20, 0xFA	; 250
    2f98:	54 e4       	ldi	r21, 0x44	; 68
    2f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	80 83       	st	Z, r24
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	a2 83       	std	Z+2, r26	; 0x02
    2faa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fac:	fe 01       	movw	r30, r28
    2fae:	e1 57       	subi	r30, 0x71	; 113
    2fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e8       	ldi	r20, 0x80	; 128
    2fc0:	5f e3       	ldi	r21, 0x3F	; 63
    2fc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fc6:	88 23       	and	r24, r24
    2fc8:	44 f4       	brge	.+16     	; 0x2fda <main+0x8de>
		__ticks = 1;
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e3 57       	subi	r30, 0x73	; 115
    2fce:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    2fd8:	64 c0       	rjmp	.+200    	; 0x30a2 <main+0x9a6>
	else if (__tmp > 65535)
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e1 57       	subi	r30, 0x71	; 113
    2fde:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe0:	60 81       	ld	r22, Z
    2fe2:	71 81       	ldd	r23, Z+1	; 0x01
    2fe4:	82 81       	ldd	r24, Z+2	; 0x02
    2fe6:	93 81       	ldd	r25, Z+3	; 0x03
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	3f ef       	ldi	r19, 0xFF	; 255
    2fec:	4f e7       	ldi	r20, 0x7F	; 127
    2fee:	57 e4       	ldi	r21, 0x47	; 71
    2ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ff4:	18 16       	cp	r1, r24
    2ff6:	0c f0       	brlt	.+2      	; 0x2ffa <main+0x8fe>
    2ff8:	43 c0       	rjmp	.+134    	; 0x3080 <main+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	ed 56       	subi	r30, 0x6D	; 109
    2ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    3000:	60 81       	ld	r22, Z
    3002:	71 81       	ldd	r23, Z+1	; 0x01
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	40 e2       	ldi	r20, 0x20	; 32
    300e:	51 e4       	ldi	r21, 0x41	; 65
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	8e 01       	movw	r16, r28
    301a:	03 57       	subi	r16, 0x73	; 115
    301c:	1e 4f       	sbci	r17, 0xFE	; 254
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	f8 01       	movw	r30, r16
    302c:	91 83       	std	Z+1, r25	; 0x01
    302e:	80 83       	st	Z, r24
    3030:	1f c0       	rjmp	.+62     	; 0x3070 <main+0x974>
    3032:	fe 01       	movw	r30, r28
    3034:	e5 57       	subi	r30, 0x75	; 117
    3036:	fe 4f       	sbci	r31, 0xFE	; 254
    3038:	88 ec       	ldi	r24, 0xC8	; 200
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	80 83       	st	Z, r24
    3040:	fe 01       	movw	r30, r28
    3042:	e5 57       	subi	r30, 0x75	; 117
    3044:	fe 4f       	sbci	r31, 0xFE	; 254
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <main+0x94e>
    304e:	fe 01       	movw	r30, r28
    3050:	e5 57       	subi	r30, 0x75	; 117
    3052:	fe 4f       	sbci	r31, 0xFE	; 254
    3054:	91 83       	std	Z+1, r25	; 0x01
    3056:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3058:	de 01       	movw	r26, r28
    305a:	a3 57       	subi	r26, 0x73	; 115
    305c:	be 4f       	sbci	r27, 0xFE	; 254
    305e:	fe 01       	movw	r30, r28
    3060:	e3 57       	subi	r30, 0x73	; 115
    3062:	fe 4f       	sbci	r31, 0xFE	; 254
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	11 96       	adiw	r26, 0x01	; 1
    306c:	9c 93       	st	X, r25
    306e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	fe 01       	movw	r30, r28
    3072:	e3 57       	subi	r30, 0x73	; 115
    3074:	fe 4f       	sbci	r31, 0xFE	; 254
    3076:	80 81       	ld	r24, Z
    3078:	91 81       	ldd	r25, Z+1	; 0x01
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	d1 f6       	brne	.-76     	; 0x3032 <main+0x936>
    307e:	27 c0       	rjmp	.+78     	; 0x30ce <main+0x9d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3080:	8e 01       	movw	r16, r28
    3082:	03 57       	subi	r16, 0x73	; 115
    3084:	1e 4f       	sbci	r17, 0xFE	; 254
    3086:	fe 01       	movw	r30, r28
    3088:	e1 57       	subi	r30, 0x71	; 113
    308a:	fe 4f       	sbci	r31, 0xFE	; 254
    308c:	60 81       	ld	r22, Z
    308e:	71 81       	ldd	r23, Z+1	; 0x01
    3090:	82 81       	ldd	r24, Z+2	; 0x02
    3092:	93 81       	ldd	r25, Z+3	; 0x03
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	f8 01       	movw	r30, r16
    309e:	91 83       	std	Z+1, r25	; 0x01
    30a0:	80 83       	st	Z, r24
    30a2:	de 01       	movw	r26, r28
    30a4:	a7 57       	subi	r26, 0x77	; 119
    30a6:	be 4f       	sbci	r27, 0xFE	; 254
    30a8:	fe 01       	movw	r30, r28
    30aa:	e3 57       	subi	r30, 0x73	; 115
    30ac:	fe 4f       	sbci	r31, 0xFE	; 254
    30ae:	80 81       	ld	r24, Z
    30b0:	91 81       	ldd	r25, Z+1	; 0x01
    30b2:	8d 93       	st	X+, r24
    30b4:	9c 93       	st	X, r25
    30b6:	fe 01       	movw	r30, r28
    30b8:	e7 57       	subi	r30, 0x77	; 119
    30ba:	fe 4f       	sbci	r31, 0xFE	; 254
    30bc:	80 81       	ld	r24, Z
    30be:	91 81       	ldd	r25, Z+1	; 0x01
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <main+0x9c4>
    30c4:	fe 01       	movw	r30, r28
    30c6:	e7 57       	subi	r30, 0x77	; 119
    30c8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ca:	91 83       	std	Z+1, r25	; 0x01
    30cc:	80 83       	st	Z, r24
				_delay_ms(100);
				LCD_VoidSendCommand(LCD_CURSOROFF);
    30ce:	8c e0       	ldi	r24, 0x0C	; 12
    30d0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>

				Key_Value = Keypad_GetPressedKey();
    30d4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Keypad_GetPressedKey>
    30d8:	fe 01       	movw	r30, r28
    30da:	eb 50       	subi	r30, 0x0B	; 11
    30dc:	fe 4f       	sbci	r31, 0xFE	; 254
    30de:	80 83       	st	Z, r24
				if ((Key_Value >= 0) && (Key_Value <= 9))
    30e0:	fe 01       	movw	r30, r28
    30e2:	eb 50       	subi	r30, 0x0B	; 11
    30e4:	fe 4f       	sbci	r31, 0xFE	; 254
    30e6:	80 81       	ld	r24, Z
    30e8:	8a 30       	cpi	r24, 0x0A	; 10
    30ea:	08 f0       	brcs	.+2      	; 0x30ee <main+0x9f2>
    30ec:	09 c1       	rjmp	.+530    	; 0x3300 <main+0xc04>
				{
					LCD_VoidSendNumber(Key_Value);
    30ee:	fe 01       	movw	r30, r28
    30f0:	eb 50       	subi	r30, 0x0B	; 11
    30f2:	fe 4f       	sbci	r31, 0xFE	; 254
    30f4:	80 81       	ld	r24, Z
    30f6:	88 2f       	mov	r24, r24
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a0 e0       	ldi	r26, 0x00	; 0
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_VoidSendNumber>
    3106:	fe 01       	movw	r30, r28
    3108:	eb 57       	subi	r30, 0x7B	; 123
    310a:	fe 4f       	sbci	r31, 0xFE	; 254
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a8 e4       	ldi	r26, 0x48	; 72
    3112:	b3 e4       	ldi	r27, 0x43	; 67
    3114:	80 83       	st	Z, r24
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	a2 83       	std	Z+2, r26	; 0x02
    311a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311c:	8e 01       	movw	r16, r28
    311e:	0f 57       	subi	r16, 0x7F	; 127
    3120:	1e 4f       	sbci	r17, 0xFE	; 254
    3122:	fe 01       	movw	r30, r28
    3124:	eb 57       	subi	r30, 0x7B	; 123
    3126:	fe 4f       	sbci	r31, 0xFE	; 254
    3128:	60 81       	ld	r22, Z
    312a:	71 81       	ldd	r23, Z+1	; 0x01
    312c:	82 81       	ldd	r24, Z+2	; 0x02
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	4a ef       	ldi	r20, 0xFA	; 250
    3136:	54 e4       	ldi	r21, 0x44	; 68
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	f8 01       	movw	r30, r16
    3142:	80 83       	st	Z, r24
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	a2 83       	std	Z+2, r26	; 0x02
    3148:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    314a:	fe 01       	movw	r30, r28
    314c:	ef 57       	subi	r30, 0x7F	; 127
    314e:	fe 4f       	sbci	r31, 0xFE	; 254
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e8       	ldi	r20, 0x80	; 128
    315e:	5f e3       	ldi	r21, 0x3F	; 63
    3160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3164:	88 23       	and	r24, r24
    3166:	44 f4       	brge	.+16     	; 0x3178 <main+0xa7c>
		__ticks = 1;
    3168:	fe 01       	movw	r30, r28
    316a:	e1 58       	subi	r30, 0x81	; 129
    316c:	fe 4f       	sbci	r31, 0xFE	; 254
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	80 83       	st	Z, r24
    3176:	64 c0       	rjmp	.+200    	; 0x3240 <main+0xb44>
	else if (__tmp > 65535)
    3178:	fe 01       	movw	r30, r28
    317a:	ef 57       	subi	r30, 0x7F	; 127
    317c:	fe 4f       	sbci	r31, 0xFE	; 254
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	0c f0       	brlt	.+2      	; 0x3198 <main+0xa9c>
    3196:	43 c0       	rjmp	.+134    	; 0x321e <main+0xb22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3198:	fe 01       	movw	r30, r28
    319a:	eb 57       	subi	r30, 0x7B	; 123
    319c:	fe 4f       	sbci	r31, 0xFE	; 254
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e2       	ldi	r20, 0x20	; 32
    31ac:	51 e4       	ldi	r21, 0x41	; 65
    31ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	8e 01       	movw	r16, r28
    31b8:	01 58       	subi	r16, 0x81	; 129
    31ba:	1e 4f       	sbci	r17, 0xFE	; 254
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	f8 01       	movw	r30, r16
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	80 83       	st	Z, r24
    31ce:	1f c0       	rjmp	.+62     	; 0x320e <main+0xb12>
    31d0:	fe 01       	movw	r30, r28
    31d2:	e3 58       	subi	r30, 0x83	; 131
    31d4:	fe 4f       	sbci	r31, 0xFE	; 254
    31d6:	88 ec       	ldi	r24, 0xC8	; 200
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    31de:	fe 01       	movw	r30, r28
    31e0:	e3 58       	subi	r30, 0x83	; 131
    31e2:	fe 4f       	sbci	r31, 0xFE	; 254
    31e4:	80 81       	ld	r24, Z
    31e6:	91 81       	ldd	r25, Z+1	; 0x01
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <main+0xaec>
    31ec:	fe 01       	movw	r30, r28
    31ee:	e3 58       	subi	r30, 0x83	; 131
    31f0:	fe 4f       	sbci	r31, 0xFE	; 254
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f6:	de 01       	movw	r26, r28
    31f8:	a1 58       	subi	r26, 0x81	; 129
    31fa:	be 4f       	sbci	r27, 0xFE	; 254
    31fc:	fe 01       	movw	r30, r28
    31fe:	e1 58       	subi	r30, 0x81	; 129
    3200:	fe 4f       	sbci	r31, 0xFE	; 254
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	11 96       	adiw	r26, 0x01	; 1
    320a:	9c 93       	st	X, r25
    320c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320e:	fe 01       	movw	r30, r28
    3210:	e1 58       	subi	r30, 0x81	; 129
    3212:	fe 4f       	sbci	r31, 0xFE	; 254
    3214:	80 81       	ld	r24, Z
    3216:	91 81       	ldd	r25, Z+1	; 0x01
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	d1 f6       	brne	.-76     	; 0x31d0 <main+0xad4>
    321c:	27 c0       	rjmp	.+78     	; 0x326c <main+0xb70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321e:	8e 01       	movw	r16, r28
    3220:	01 58       	subi	r16, 0x81	; 129
    3222:	1e 4f       	sbci	r17, 0xFE	; 254
    3224:	fe 01       	movw	r30, r28
    3226:	ef 57       	subi	r30, 0x7F	; 127
    3228:	fe 4f       	sbci	r31, 0xFE	; 254
    322a:	60 81       	ld	r22, Z
    322c:	71 81       	ldd	r23, Z+1	; 0x01
    322e:	82 81       	ldd	r24, Z+2	; 0x02
    3230:	93 81       	ldd	r25, Z+3	; 0x03
    3232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	f8 01       	movw	r30, r16
    323c:	91 83       	std	Z+1, r25	; 0x01
    323e:	80 83       	st	Z, r24
    3240:	de 01       	movw	r26, r28
    3242:	a5 58       	subi	r26, 0x85	; 133
    3244:	be 4f       	sbci	r27, 0xFE	; 254
    3246:	fe 01       	movw	r30, r28
    3248:	e1 58       	subi	r30, 0x81	; 129
    324a:	fe 4f       	sbci	r31, 0xFE	; 254
    324c:	80 81       	ld	r24, Z
    324e:	91 81       	ldd	r25, Z+1	; 0x01
    3250:	8d 93       	st	X+, r24
    3252:	9c 93       	st	X, r25
    3254:	fe 01       	movw	r30, r28
    3256:	e5 58       	subi	r30, 0x85	; 133
    3258:	fe 4f       	sbci	r31, 0xFE	; 254
    325a:	80 81       	ld	r24, Z
    325c:	91 81       	ldd	r25, Z+1	; 0x01
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <main+0xb62>
    3262:	fe 01       	movw	r30, r28
    3264:	e5 58       	subi	r30, 0x85	; 133
    3266:	fe 4f       	sbci	r31, 0xFE	; 254
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
					_delay_ms(200);
					LCD_VoidSendStringFromPos("*",0,11+i);
    326c:	fe 01       	movw	r30, r28
    326e:	e1 52       	subi	r30, 0x21	; 33
    3270:	fe 4f       	sbci	r31, 0xFE	; 254
    3272:	80 81       	ld	r24, Z
    3274:	28 2f       	mov	r18, r24
    3276:	25 5f       	subi	r18, 0xF5	; 245
    3278:	84 ea       	ldi	r24, 0xA4	; 164
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	42 2f       	mov	r20, r18
    3280:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
					_delay_ms(2);
					LCD_VoidSendStringFromPos("Invalid Input",0,1);
					_delay_ms(500);
					break;
				}
				Comp_Pass += Key_Value;
    3284:	fe 01       	movw	r30, r28
    3286:	eb 50       	subi	r30, 0x0B	; 11
    3288:	fe 4f       	sbci	r31, 0xFE	; 254
    328a:	80 81       	ld	r24, Z
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	be 01       	movw	r22, r28
    3296:	60 52       	subi	r22, 0x20	; 32
    3298:	7e 4f       	sbci	r23, 0xFE	; 254
    329a:	fe 01       	movw	r30, r28
    329c:	e0 52       	subi	r30, 0x20	; 32
    329e:	fe 4f       	sbci	r31, 0xFE	; 254
    32a0:	80 81       	ld	r24, Z
    32a2:	91 81       	ldd	r25, Z+1	; 0x01
    32a4:	a2 81       	ldd	r26, Z+2	; 0x02
    32a6:	b3 81       	ldd	r27, Z+3	; 0x03
    32a8:	82 0f       	add	r24, r18
    32aa:	93 1f       	adc	r25, r19
    32ac:	a4 1f       	adc	r26, r20
    32ae:	b5 1f       	adc	r27, r21
    32b0:	fb 01       	movw	r30, r22
    32b2:	80 83       	st	Z, r24
    32b4:	91 83       	std	Z+1, r25	; 0x01
    32b6:	a2 83       	std	Z+2, r26	; 0x02
    32b8:	b3 83       	std	Z+3, r27	; 0x03
				Comp_Pass = Comp_Pass * 10;
    32ba:	8e 01       	movw	r16, r28
    32bc:	00 52       	subi	r16, 0x20	; 32
    32be:	1e 4f       	sbci	r17, 0xFE	; 254
    32c0:	fe 01       	movw	r30, r28
    32c2:	e0 52       	subi	r30, 0x20	; 32
    32c4:	fe 4f       	sbci	r31, 0xFE	; 254
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	a2 81       	ldd	r26, Z+2	; 0x02
    32cc:	b3 81       	ldd	r27, Z+3	; 0x03
    32ce:	2a e0       	ldi	r18, 0x0A	; 10
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	50 e0       	ldi	r21, 0x00	; 0
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsi3>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	f8 01       	movw	r30, r16
    32e4:	80 83       	st	Z, r24
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	a2 83       	std	Z+2, r26	; 0x02
    32ea:	b3 83       	std	Z+3, r27	; 0x03
		if (Chosen_Mode == 1)
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
			_delay_ms(2);
			LCD_VoidSendString("Password : ");
			for (u8 i = 0; i < 4 ; i++)
    32ec:	de 01       	movw	r26, r28
    32ee:	a1 52       	subi	r26, 0x21	; 33
    32f0:	be 4f       	sbci	r27, 0xFE	; 254
    32f2:	fe 01       	movw	r30, r28
    32f4:	e1 52       	subi	r30, 0x21	; 33
    32f6:	fe 4f       	sbci	r31, 0xFE	; 254
    32f8:	80 81       	ld	r24, Z
    32fa:	8f 5f       	subi	r24, 0xFF	; 255
    32fc:	8c 93       	st	X, r24
    32fe:	71 c1       	rjmp	.+738    	; 0x35e2 <main+0xee6>
					_delay_ms(200);
					LCD_VoidSendStringFromPos("*",0,11+i);
				}
				else
				{
					LCD_VoidSendCommand(LCD_ClearDisplay);
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    3306:	fe 01       	movw	r30, r28
    3308:	e9 58       	subi	r30, 0x89	; 137
    330a:	fe 4f       	sbci	r31, 0xFE	; 254
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	a0 e0       	ldi	r26, 0x00	; 0
    3312:	b0 e4       	ldi	r27, 0x40	; 64
    3314:	80 83       	st	Z, r24
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	a2 83       	std	Z+2, r26	; 0x02
    331a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331c:	8e 01       	movw	r16, r28
    331e:	0d 58       	subi	r16, 0x8D	; 141
    3320:	1e 4f       	sbci	r17, 0xFE	; 254
    3322:	fe 01       	movw	r30, r28
    3324:	e9 58       	subi	r30, 0x89	; 137
    3326:	fe 4f       	sbci	r31, 0xFE	; 254
    3328:	60 81       	ld	r22, Z
    332a:	71 81       	ldd	r23, Z+1	; 0x01
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	93 81       	ldd	r25, Z+3	; 0x03
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	4a ef       	ldi	r20, 0xFA	; 250
    3336:	54 e4       	ldi	r21, 0x44	; 68
    3338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	f8 01       	movw	r30, r16
    3342:	80 83       	st	Z, r24
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	a2 83       	std	Z+2, r26	; 0x02
    3348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    334a:	fe 01       	movw	r30, r28
    334c:	ed 58       	subi	r30, 0x8D	; 141
    334e:	fe 4f       	sbci	r31, 0xFE	; 254
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5f e3       	ldi	r21, 0x3F	; 63
    3360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3364:	88 23       	and	r24, r24
    3366:	44 f4       	brge	.+16     	; 0x3378 <main+0xc7c>
		__ticks = 1;
    3368:	fe 01       	movw	r30, r28
    336a:	ef 58       	subi	r30, 0x8F	; 143
    336c:	fe 4f       	sbci	r31, 0xFE	; 254
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24
    3376:	64 c0       	rjmp	.+200    	; 0x3440 <main+0xd44>
	else if (__tmp > 65535)
    3378:	fe 01       	movw	r30, r28
    337a:	ed 58       	subi	r30, 0x8D	; 141
    337c:	fe 4f       	sbci	r31, 0xFE	; 254
    337e:	60 81       	ld	r22, Z
    3380:	71 81       	ldd	r23, Z+1	; 0x01
    3382:	82 81       	ldd	r24, Z+2	; 0x02
    3384:	93 81       	ldd	r25, Z+3	; 0x03
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	3f ef       	ldi	r19, 0xFF	; 255
    338a:	4f e7       	ldi	r20, 0x7F	; 127
    338c:	57 e4       	ldi	r21, 0x47	; 71
    338e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3392:	18 16       	cp	r1, r24
    3394:	0c f0       	brlt	.+2      	; 0x3398 <main+0xc9c>
    3396:	43 c0       	rjmp	.+134    	; 0x341e <main+0xd22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3398:	fe 01       	movw	r30, r28
    339a:	e9 58       	subi	r30, 0x89	; 137
    339c:	fe 4f       	sbci	r31, 0xFE	; 254
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e2       	ldi	r20, 0x20	; 32
    33ac:	51 e4       	ldi	r21, 0x41	; 65
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	8e 01       	movw	r16, r28
    33b8:	0f 58       	subi	r16, 0x8F	; 143
    33ba:	1e 4f       	sbci	r17, 0xFE	; 254
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	f8 01       	movw	r30, r16
    33ca:	91 83       	std	Z+1, r25	; 0x01
    33cc:	80 83       	st	Z, r24
    33ce:	1f c0       	rjmp	.+62     	; 0x340e <main+0xd12>
    33d0:	fe 01       	movw	r30, r28
    33d2:	e1 59       	subi	r30, 0x91	; 145
    33d4:	fe 4f       	sbci	r31, 0xFE	; 254
    33d6:	88 ec       	ldi	r24, 0xC8	; 200
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	80 83       	st	Z, r24
    33de:	fe 01       	movw	r30, r28
    33e0:	e1 59       	subi	r30, 0x91	; 145
    33e2:	fe 4f       	sbci	r31, 0xFE	; 254
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <main+0xcec>
    33ec:	fe 01       	movw	r30, r28
    33ee:	e1 59       	subi	r30, 0x91	; 145
    33f0:	fe 4f       	sbci	r31, 0xFE	; 254
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f6:	de 01       	movw	r26, r28
    33f8:	af 58       	subi	r26, 0x8F	; 143
    33fa:	be 4f       	sbci	r27, 0xFE	; 254
    33fc:	fe 01       	movw	r30, r28
    33fe:	ef 58       	subi	r30, 0x8F	; 143
    3400:	fe 4f       	sbci	r31, 0xFE	; 254
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	11 96       	adiw	r26, 0x01	; 1
    340a:	9c 93       	st	X, r25
    340c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340e:	fe 01       	movw	r30, r28
    3410:	ef 58       	subi	r30, 0x8F	; 143
    3412:	fe 4f       	sbci	r31, 0xFE	; 254
    3414:	80 81       	ld	r24, Z
    3416:	91 81       	ldd	r25, Z+1	; 0x01
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	d1 f6       	brne	.-76     	; 0x33d0 <main+0xcd4>
    341c:	27 c0       	rjmp	.+78     	; 0x346c <main+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    341e:	8e 01       	movw	r16, r28
    3420:	0f 58       	subi	r16, 0x8F	; 143
    3422:	1e 4f       	sbci	r17, 0xFE	; 254
    3424:	fe 01       	movw	r30, r28
    3426:	ed 58       	subi	r30, 0x8D	; 141
    3428:	fe 4f       	sbci	r31, 0xFE	; 254
    342a:	60 81       	ld	r22, Z
    342c:	71 81       	ldd	r23, Z+1	; 0x01
    342e:	82 81       	ldd	r24, Z+2	; 0x02
    3430:	93 81       	ldd	r25, Z+3	; 0x03
    3432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	f8 01       	movw	r30, r16
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	80 83       	st	Z, r24
    3440:	de 01       	movw	r26, r28
    3442:	a3 59       	subi	r26, 0x93	; 147
    3444:	be 4f       	sbci	r27, 0xFE	; 254
    3446:	fe 01       	movw	r30, r28
    3448:	ef 58       	subi	r30, 0x8F	; 143
    344a:	fe 4f       	sbci	r31, 0xFE	; 254
    344c:	80 81       	ld	r24, Z
    344e:	91 81       	ldd	r25, Z+1	; 0x01
    3450:	8d 93       	st	X+, r24
    3452:	9c 93       	st	X, r25
    3454:	fe 01       	movw	r30, r28
    3456:	e3 59       	subi	r30, 0x93	; 147
    3458:	fe 4f       	sbci	r31, 0xFE	; 254
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <main+0xd62>
    3462:	fe 01       	movw	r30, r28
    3464:	e3 59       	subi	r30, 0x93	; 147
    3466:	fe 4f       	sbci	r31, 0xFE	; 254
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	80 83       	st	Z, r24
					_delay_ms(2);
					LCD_VoidSendStringFromPos("Invalid Input",0,1);
    346c:	86 ea       	ldi	r24, 0xA6	; 166
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	41 e0       	ldi	r20, 0x01	; 1
    3474:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
    3478:	fe 01       	movw	r30, r28
    347a:	e7 59       	subi	r30, 0x97	; 151
    347c:	fe 4f       	sbci	r31, 0xFE	; 254
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	aa ef       	ldi	r26, 0xFA	; 250
    3484:	b3 e4       	ldi	r27, 0x43	; 67
    3486:	80 83       	st	Z, r24
    3488:	91 83       	std	Z+1, r25	; 0x01
    348a:	a2 83       	std	Z+2, r26	; 0x02
    348c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348e:	8e 01       	movw	r16, r28
    3490:	0b 59       	subi	r16, 0x9B	; 155
    3492:	1e 4f       	sbci	r17, 0xFE	; 254
    3494:	fe 01       	movw	r30, r28
    3496:	e7 59       	subi	r30, 0x97	; 151
    3498:	fe 4f       	sbci	r31, 0xFE	; 254
    349a:	60 81       	ld	r22, Z
    349c:	71 81       	ldd	r23, Z+1	; 0x01
    349e:	82 81       	ldd	r24, Z+2	; 0x02
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	4a ef       	ldi	r20, 0xFA	; 250
    34a8:	54 e4       	ldi	r21, 0x44	; 68
    34aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	f8 01       	movw	r30, r16
    34b4:	80 83       	st	Z, r24
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	a2 83       	std	Z+2, r26	; 0x02
    34ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34bc:	fe 01       	movw	r30, r28
    34be:	eb 59       	subi	r30, 0x9B	; 155
    34c0:	fe 4f       	sbci	r31, 0xFE	; 254
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e8       	ldi	r20, 0x80	; 128
    34d0:	5f e3       	ldi	r21, 0x3F	; 63
    34d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34d6:	88 23       	and	r24, r24
    34d8:	44 f4       	brge	.+16     	; 0x34ea <main+0xdee>
		__ticks = 1;
    34da:	fe 01       	movw	r30, r28
    34dc:	ed 59       	subi	r30, 0x9D	; 157
    34de:	fe 4f       	sbci	r31, 0xFE	; 254
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	80 83       	st	Z, r24
    34e8:	64 c0       	rjmp	.+200    	; 0x35b2 <main+0xeb6>
	else if (__tmp > 65535)
    34ea:	fe 01       	movw	r30, r28
    34ec:	eb 59       	subi	r30, 0x9B	; 155
    34ee:	fe 4f       	sbci	r31, 0xFE	; 254
    34f0:	60 81       	ld	r22, Z
    34f2:	71 81       	ldd	r23, Z+1	; 0x01
    34f4:	82 81       	ldd	r24, Z+2	; 0x02
    34f6:	93 81       	ldd	r25, Z+3	; 0x03
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	3f ef       	ldi	r19, 0xFF	; 255
    34fc:	4f e7       	ldi	r20, 0x7F	; 127
    34fe:	57 e4       	ldi	r21, 0x47	; 71
    3500:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3504:	18 16       	cp	r1, r24
    3506:	0c f0       	brlt	.+2      	; 0x350a <main+0xe0e>
    3508:	43 c0       	rjmp	.+134    	; 0x3590 <main+0xe94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350a:	fe 01       	movw	r30, r28
    350c:	e7 59       	subi	r30, 0x97	; 151
    350e:	fe 4f       	sbci	r31, 0xFE	; 254
    3510:	60 81       	ld	r22, Z
    3512:	71 81       	ldd	r23, Z+1	; 0x01
    3514:	82 81       	ldd	r24, Z+2	; 0x02
    3516:	93 81       	ldd	r25, Z+3	; 0x03
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e2       	ldi	r20, 0x20	; 32
    351e:	51 e4       	ldi	r21, 0x41	; 65
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	8e 01       	movw	r16, r28
    352a:	0d 59       	subi	r16, 0x9D	; 157
    352c:	1e 4f       	sbci	r17, 0xFE	; 254
    352e:	bc 01       	movw	r22, r24
    3530:	cd 01       	movw	r24, r26
    3532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	f8 01       	movw	r30, r16
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	80 83       	st	Z, r24
    3540:	1f c0       	rjmp	.+62     	; 0x3580 <main+0xe84>
    3542:	fe 01       	movw	r30, r28
    3544:	ef 59       	subi	r30, 0x9F	; 159
    3546:	fe 4f       	sbci	r31, 0xFE	; 254
    3548:	88 ec       	ldi	r24, 0xC8	; 200
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	91 83       	std	Z+1, r25	; 0x01
    354e:	80 83       	st	Z, r24
    3550:	fe 01       	movw	r30, r28
    3552:	ef 59       	subi	r30, 0x9F	; 159
    3554:	fe 4f       	sbci	r31, 0xFE	; 254
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	f1 f7       	brne	.-4      	; 0x355a <main+0xe5e>
    355e:	fe 01       	movw	r30, r28
    3560:	ef 59       	subi	r30, 0x9F	; 159
    3562:	fe 4f       	sbci	r31, 0xFE	; 254
    3564:	91 83       	std	Z+1, r25	; 0x01
    3566:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3568:	de 01       	movw	r26, r28
    356a:	ad 59       	subi	r26, 0x9D	; 157
    356c:	be 4f       	sbci	r27, 0xFE	; 254
    356e:	fe 01       	movw	r30, r28
    3570:	ed 59       	subi	r30, 0x9D	; 157
    3572:	fe 4f       	sbci	r31, 0xFE	; 254
    3574:	80 81       	ld	r24, Z
    3576:	91 81       	ldd	r25, Z+1	; 0x01
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	11 96       	adiw	r26, 0x01	; 1
    357c:	9c 93       	st	X, r25
    357e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3580:	fe 01       	movw	r30, r28
    3582:	ed 59       	subi	r30, 0x9D	; 157
    3584:	fe 4f       	sbci	r31, 0xFE	; 254
    3586:	80 81       	ld	r24, Z
    3588:	91 81       	ldd	r25, Z+1	; 0x01
    358a:	00 97       	sbiw	r24, 0x00	; 0
    358c:	d1 f6       	brne	.-76     	; 0x3542 <main+0xe46>
    358e:	30 c0       	rjmp	.+96     	; 0x35f0 <main+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3590:	8e 01       	movw	r16, r28
    3592:	0d 59       	subi	r16, 0x9D	; 157
    3594:	1e 4f       	sbci	r17, 0xFE	; 254
    3596:	fe 01       	movw	r30, r28
    3598:	eb 59       	subi	r30, 0x9B	; 155
    359a:	fe 4f       	sbci	r31, 0xFE	; 254
    359c:	60 81       	ld	r22, Z
    359e:	71 81       	ldd	r23, Z+1	; 0x01
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	93 81       	ldd	r25, Z+3	; 0x03
    35a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	f8 01       	movw	r30, r16
    35ae:	91 83       	std	Z+1, r25	; 0x01
    35b0:	80 83       	st	Z, r24
    35b2:	de 01       	movw	r26, r28
    35b4:	a1 5a       	subi	r26, 0xA1	; 161
    35b6:	be 4f       	sbci	r27, 0xFE	; 254
    35b8:	fe 01       	movw	r30, r28
    35ba:	ed 59       	subi	r30, 0x9D	; 157
    35bc:	fe 4f       	sbci	r31, 0xFE	; 254
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	11 96       	adiw	r26, 0x01	; 1
    35c4:	9c 93       	st	X, r25
    35c6:	8e 93       	st	-X, r24
    35c8:	fe 01       	movw	r30, r28
    35ca:	e1 5a       	subi	r30, 0xA1	; 161
    35cc:	fe 4f       	sbci	r31, 0xFE	; 254
    35ce:	80 81       	ld	r24, Z
    35d0:	91 81       	ldd	r25, Z+1	; 0x01
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	f1 f7       	brne	.-4      	; 0x35d2 <main+0xed6>
    35d6:	fe 01       	movw	r30, r28
    35d8:	e1 5a       	subi	r30, 0xA1	; 161
    35da:	fe 4f       	sbci	r31, 0xFE	; 254
    35dc:	91 83       	std	Z+1, r25	; 0x01
    35de:	80 83       	st	Z, r24
    35e0:	07 c0       	rjmp	.+14     	; 0x35f0 <main+0xef4>
		if (Chosen_Mode == 1)
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
			_delay_ms(2);
			LCD_VoidSendString("Password : ");
			for (u8 i = 0; i < 4 ; i++)
    35e2:	fe 01       	movw	r30, r28
    35e4:	e1 52       	subi	r30, 0x21	; 33
    35e6:	fe 4f       	sbci	r31, 0xFE	; 254
    35e8:	80 81       	ld	r24, Z
    35ea:	84 30       	cpi	r24, 0x04	; 4
    35ec:	08 f4       	brcc	.+2      	; 0x35f0 <main+0xef4>
    35ee:	b9 cc       	rjmp	.-1678   	; 0x2f62 <main+0x866>
					break;
				}
				Comp_Pass += Key_Value;
				Comp_Pass = Comp_Pass * 10;
			}
			Comp_Pass = Comp_Pass / 10;
    35f0:	8e 01       	movw	r16, r28
    35f2:	00 52       	subi	r16, 0x20	; 32
    35f4:	1e 4f       	sbci	r17, 0xFE	; 254
    35f6:	fe 01       	movw	r30, r28
    35f8:	e0 52       	subi	r30, 0x20	; 32
    35fa:	fe 4f       	sbci	r31, 0xFE	; 254
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	a2 81       	ldd	r26, Z+2	; 0x02
    3602:	b3 81       	ldd	r27, Z+3	; 0x03
    3604:	2a e0       	ldi	r18, 0x0A	; 10
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	50 e0       	ldi	r21, 0x00	; 0
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    3614:	da 01       	movw	r26, r20
    3616:	c9 01       	movw	r24, r18
    3618:	f8 01       	movw	r30, r16
    361a:	80 83       	st	Z, r24
    361c:	91 83       	std	Z+1, r25	; 0x01
    361e:	a2 83       	std	Z+2, r26	; 0x02
    3620:	b3 83       	std	Z+3, r27	; 0x03
    3622:	fe 01       	movw	r30, r28
    3624:	e5 5a       	subi	r30, 0xA5	; 165
    3626:	fe 4f       	sbci	r31, 0xFE	; 254
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	aa ef       	ldi	r26, 0xFA	; 250
    362e:	b3 e4       	ldi	r27, 0x43	; 67
    3630:	80 83       	st	Z, r24
    3632:	91 83       	std	Z+1, r25	; 0x01
    3634:	a2 83       	std	Z+2, r26	; 0x02
    3636:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3638:	8e 01       	movw	r16, r28
    363a:	09 5a       	subi	r16, 0xA9	; 169
    363c:	1e 4f       	sbci	r17, 0xFE	; 254
    363e:	fe 01       	movw	r30, r28
    3640:	e5 5a       	subi	r30, 0xA5	; 165
    3642:	fe 4f       	sbci	r31, 0xFE	; 254
    3644:	60 81       	ld	r22, Z
    3646:	71 81       	ldd	r23, Z+1	; 0x01
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	4a ef       	ldi	r20, 0xFA	; 250
    3652:	54 e4       	ldi	r21, 0x44	; 68
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	f8 01       	movw	r30, r16
    365e:	80 83       	st	Z, r24
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	a2 83       	std	Z+2, r26	; 0x02
    3664:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3666:	fe 01       	movw	r30, r28
    3668:	e9 5a       	subi	r30, 0xA9	; 169
    366a:	fe 4f       	sbci	r31, 0xFE	; 254
    366c:	60 81       	ld	r22, Z
    366e:	71 81       	ldd	r23, Z+1	; 0x01
    3670:	82 81       	ldd	r24, Z+2	; 0x02
    3672:	93 81       	ldd	r25, Z+3	; 0x03
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	40 e8       	ldi	r20, 0x80	; 128
    367a:	5f e3       	ldi	r21, 0x3F	; 63
    367c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3680:	88 23       	and	r24, r24
    3682:	44 f4       	brge	.+16     	; 0x3694 <main+0xf98>
		__ticks = 1;
    3684:	fe 01       	movw	r30, r28
    3686:	eb 5a       	subi	r30, 0xAB	; 171
    3688:	fe 4f       	sbci	r31, 0xFE	; 254
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	91 83       	std	Z+1, r25	; 0x01
    3690:	80 83       	st	Z, r24
    3692:	64 c0       	rjmp	.+200    	; 0x375c <main+0x1060>
	else if (__tmp > 65535)
    3694:	fe 01       	movw	r30, r28
    3696:	e9 5a       	subi	r30, 0xA9	; 169
    3698:	fe 4f       	sbci	r31, 0xFE	; 254
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	82 81       	ldd	r24, Z+2	; 0x02
    36a0:	93 81       	ldd	r25, Z+3	; 0x03
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	3f ef       	ldi	r19, 0xFF	; 255
    36a6:	4f e7       	ldi	r20, 0x7F	; 127
    36a8:	57 e4       	ldi	r21, 0x47	; 71
    36aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36ae:	18 16       	cp	r1, r24
    36b0:	0c f0       	brlt	.+2      	; 0x36b4 <main+0xfb8>
    36b2:	43 c0       	rjmp	.+134    	; 0x373a <main+0x103e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b4:	fe 01       	movw	r30, r28
    36b6:	e5 5a       	subi	r30, 0xA5	; 165
    36b8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ba:	60 81       	ld	r22, Z
    36bc:	71 81       	ldd	r23, Z+1	; 0x01
    36be:	82 81       	ldd	r24, Z+2	; 0x02
    36c0:	93 81       	ldd	r25, Z+3	; 0x03
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e2       	ldi	r20, 0x20	; 32
    36c8:	51 e4       	ldi	r21, 0x41	; 65
    36ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	8e 01       	movw	r16, r28
    36d4:	0b 5a       	subi	r16, 0xAB	; 171
    36d6:	1e 4f       	sbci	r17, 0xFE	; 254
    36d8:	bc 01       	movw	r22, r24
    36da:	cd 01       	movw	r24, r26
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	f8 01       	movw	r30, r16
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	80 83       	st	Z, r24
    36ea:	1f c0       	rjmp	.+62     	; 0x372a <main+0x102e>
    36ec:	fe 01       	movw	r30, r28
    36ee:	ed 5a       	subi	r30, 0xAD	; 173
    36f0:	fe 4f       	sbci	r31, 0xFE	; 254
    36f2:	88 ec       	ldi	r24, 0xC8	; 200
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	80 83       	st	Z, r24
    36fa:	fe 01       	movw	r30, r28
    36fc:	ed 5a       	subi	r30, 0xAD	; 173
    36fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3700:	80 81       	ld	r24, Z
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <main+0x1008>
    3708:	fe 01       	movw	r30, r28
    370a:	ed 5a       	subi	r30, 0xAD	; 173
    370c:	fe 4f       	sbci	r31, 0xFE	; 254
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3712:	de 01       	movw	r26, r28
    3714:	ab 5a       	subi	r26, 0xAB	; 171
    3716:	be 4f       	sbci	r27, 0xFE	; 254
    3718:	fe 01       	movw	r30, r28
    371a:	eb 5a       	subi	r30, 0xAB	; 171
    371c:	fe 4f       	sbci	r31, 0xFE	; 254
    371e:	80 81       	ld	r24, Z
    3720:	91 81       	ldd	r25, Z+1	; 0x01
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	11 96       	adiw	r26, 0x01	; 1
    3726:	9c 93       	st	X, r25
    3728:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    372a:	fe 01       	movw	r30, r28
    372c:	eb 5a       	subi	r30, 0xAB	; 171
    372e:	fe 4f       	sbci	r31, 0xFE	; 254
    3730:	80 81       	ld	r24, Z
    3732:	91 81       	ldd	r25, Z+1	; 0x01
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	d1 f6       	brne	.-76     	; 0x36ec <main+0xff0>
    3738:	27 c0       	rjmp	.+78     	; 0x3788 <main+0x108c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    373a:	8e 01       	movw	r16, r28
    373c:	0b 5a       	subi	r16, 0xAB	; 171
    373e:	1e 4f       	sbci	r17, 0xFE	; 254
    3740:	fe 01       	movw	r30, r28
    3742:	e9 5a       	subi	r30, 0xA9	; 169
    3744:	fe 4f       	sbci	r31, 0xFE	; 254
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	f8 01       	movw	r30, r16
    3758:	91 83       	std	Z+1, r25	; 0x01
    375a:	80 83       	st	Z, r24
    375c:	de 01       	movw	r26, r28
    375e:	af 5a       	subi	r26, 0xAF	; 175
    3760:	be 4f       	sbci	r27, 0xFE	; 254
    3762:	fe 01       	movw	r30, r28
    3764:	eb 5a       	subi	r30, 0xAB	; 171
    3766:	fe 4f       	sbci	r31, 0xFE	; 254
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	8d 93       	st	X+, r24
    376e:	9c 93       	st	X, r25
    3770:	fe 01       	movw	r30, r28
    3772:	ef 5a       	subi	r30, 0xAF	; 175
    3774:	fe 4f       	sbci	r31, 0xFE	; 254
    3776:	80 81       	ld	r24, Z
    3778:	91 81       	ldd	r25, Z+1	; 0x01
    377a:	01 97       	sbiw	r24, 0x01	; 1
    377c:	f1 f7       	brne	.-4      	; 0x377a <main+0x107e>
    377e:	fe 01       	movw	r30, r28
    3780:	ef 5a       	subi	r30, 0xAF	; 175
    3782:	fe 4f       	sbci	r31, 0xFE	; 254
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	80 83       	st	Z, r24
			_delay_ms(500);

			if (Saved_Pass == Comp_Pass)
    3788:	fe 01       	movw	r30, r28
    378a:	e0 51       	subi	r30, 0x10	; 16
    378c:	fe 4f       	sbci	r31, 0xFE	; 254
    378e:	de 01       	movw	r26, r28
    3790:	a0 52       	subi	r26, 0x20	; 32
    3792:	be 4f       	sbci	r27, 0xFE	; 254
    3794:	20 81       	ld	r18, Z
    3796:	31 81       	ldd	r19, Z+1	; 0x01
    3798:	42 81       	ldd	r20, Z+2	; 0x02
    379a:	53 81       	ldd	r21, Z+3	; 0x03
    379c:	8d 91       	ld	r24, X+
    379e:	9d 91       	ld	r25, X+
    37a0:	0d 90       	ld	r0, X+
    37a2:	bc 91       	ld	r27, X
    37a4:	a0 2d       	mov	r26, r0
    37a6:	28 17       	cp	r18, r24
    37a8:	39 07       	cpc	r19, r25
    37aa:	4a 07       	cpc	r20, r26
    37ac:	5b 07       	cpc	r21, r27
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <main+0x10b6>
    37b0:	49 c2       	rjmp	.+1170   	; 0x3c44 <main+0x1548>
			{
				LCD_VoidSendCommand(LCD_ClearDisplay);
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    37b8:	fe 01       	movw	r30, r28
    37ba:	e3 5b       	subi	r30, 0xB3	; 179
    37bc:	fe 4f       	sbci	r31, 0xFE	; 254
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	a0 e0       	ldi	r26, 0x00	; 0
    37c4:	b0 e4       	ldi	r27, 0x40	; 64
    37c6:	80 83       	st	Z, r24
    37c8:	91 83       	std	Z+1, r25	; 0x01
    37ca:	a2 83       	std	Z+2, r26	; 0x02
    37cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ce:	8e 01       	movw	r16, r28
    37d0:	07 5b       	subi	r16, 0xB7	; 183
    37d2:	1e 4f       	sbci	r17, 0xFE	; 254
    37d4:	fe 01       	movw	r30, r28
    37d6:	e3 5b       	subi	r30, 0xB3	; 179
    37d8:	fe 4f       	sbci	r31, 0xFE	; 254
    37da:	60 81       	ld	r22, Z
    37dc:	71 81       	ldd	r23, Z+1	; 0x01
    37de:	82 81       	ldd	r24, Z+2	; 0x02
    37e0:	93 81       	ldd	r25, Z+3	; 0x03
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	4a ef       	ldi	r20, 0xFA	; 250
    37e8:	54 e4       	ldi	r21, 0x44	; 68
    37ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	f8 01       	movw	r30, r16
    37f4:	80 83       	st	Z, r24
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	a2 83       	std	Z+2, r26	; 0x02
    37fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37fc:	fe 01       	movw	r30, r28
    37fe:	e7 5b       	subi	r30, 0xB7	; 183
    3800:	fe 4f       	sbci	r31, 0xFE	; 254
    3802:	60 81       	ld	r22, Z
    3804:	71 81       	ldd	r23, Z+1	; 0x01
    3806:	82 81       	ldd	r24, Z+2	; 0x02
    3808:	93 81       	ldd	r25, Z+3	; 0x03
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e8       	ldi	r20, 0x80	; 128
    3810:	5f e3       	ldi	r21, 0x3F	; 63
    3812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3816:	88 23       	and	r24, r24
    3818:	44 f4       	brge	.+16     	; 0x382a <main+0x112e>
		__ticks = 1;
    381a:	fe 01       	movw	r30, r28
    381c:	e9 5b       	subi	r30, 0xB9	; 185
    381e:	fe 4f       	sbci	r31, 0xFE	; 254
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	64 c0       	rjmp	.+200    	; 0x38f2 <main+0x11f6>
	else if (__tmp > 65535)
    382a:	fe 01       	movw	r30, r28
    382c:	e7 5b       	subi	r30, 0xB7	; 183
    382e:	fe 4f       	sbci	r31, 0xFE	; 254
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	3f ef       	ldi	r19, 0xFF	; 255
    383c:	4f e7       	ldi	r20, 0x7F	; 127
    383e:	57 e4       	ldi	r21, 0x47	; 71
    3840:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3844:	18 16       	cp	r1, r24
    3846:	0c f0       	brlt	.+2      	; 0x384a <main+0x114e>
    3848:	43 c0       	rjmp	.+134    	; 0x38d0 <main+0x11d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384a:	fe 01       	movw	r30, r28
    384c:	e3 5b       	subi	r30, 0xB3	; 179
    384e:	fe 4f       	sbci	r31, 0xFE	; 254
    3850:	60 81       	ld	r22, Z
    3852:	71 81       	ldd	r23, Z+1	; 0x01
    3854:	82 81       	ldd	r24, Z+2	; 0x02
    3856:	93 81       	ldd	r25, Z+3	; 0x03
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e2       	ldi	r20, 0x20	; 32
    385e:	51 e4       	ldi	r21, 0x41	; 65
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	8e 01       	movw	r16, r28
    386a:	09 5b       	subi	r16, 0xB9	; 185
    386c:	1e 4f       	sbci	r17, 0xFE	; 254
    386e:	bc 01       	movw	r22, r24
    3870:	cd 01       	movw	r24, r26
    3872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	f8 01       	movw	r30, r16
    387c:	91 83       	std	Z+1, r25	; 0x01
    387e:	80 83       	st	Z, r24
    3880:	1f c0       	rjmp	.+62     	; 0x38c0 <main+0x11c4>
    3882:	fe 01       	movw	r30, r28
    3884:	eb 5b       	subi	r30, 0xBB	; 187
    3886:	fe 4f       	sbci	r31, 0xFE	; 254
    3888:	88 ec       	ldi	r24, 0xC8	; 200
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	91 83       	std	Z+1, r25	; 0x01
    388e:	80 83       	st	Z, r24
    3890:	fe 01       	movw	r30, r28
    3892:	eb 5b       	subi	r30, 0xBB	; 187
    3894:	fe 4f       	sbci	r31, 0xFE	; 254
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <main+0x119e>
    389e:	fe 01       	movw	r30, r28
    38a0:	eb 5b       	subi	r30, 0xBB	; 187
    38a2:	fe 4f       	sbci	r31, 0xFE	; 254
    38a4:	91 83       	std	Z+1, r25	; 0x01
    38a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a8:	de 01       	movw	r26, r28
    38aa:	a9 5b       	subi	r26, 0xB9	; 185
    38ac:	be 4f       	sbci	r27, 0xFE	; 254
    38ae:	fe 01       	movw	r30, r28
    38b0:	e9 5b       	subi	r30, 0xB9	; 185
    38b2:	fe 4f       	sbci	r31, 0xFE	; 254
    38b4:	80 81       	ld	r24, Z
    38b6:	91 81       	ldd	r25, Z+1	; 0x01
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	11 96       	adiw	r26, 0x01	; 1
    38bc:	9c 93       	st	X, r25
    38be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c0:	fe 01       	movw	r30, r28
    38c2:	e9 5b       	subi	r30, 0xB9	; 185
    38c4:	fe 4f       	sbci	r31, 0xFE	; 254
    38c6:	80 81       	ld	r24, Z
    38c8:	91 81       	ldd	r25, Z+1	; 0x01
    38ca:	00 97       	sbiw	r24, 0x00	; 0
    38cc:	d1 f6       	brne	.-76     	; 0x3882 <main+0x1186>
    38ce:	27 c0       	rjmp	.+78     	; 0x391e <main+0x1222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d0:	8e 01       	movw	r16, r28
    38d2:	09 5b       	subi	r16, 0xB9	; 185
    38d4:	1e 4f       	sbci	r17, 0xFE	; 254
    38d6:	fe 01       	movw	r30, r28
    38d8:	e7 5b       	subi	r30, 0xB7	; 183
    38da:	fe 4f       	sbci	r31, 0xFE	; 254
    38dc:	60 81       	ld	r22, Z
    38de:	71 81       	ldd	r23, Z+1	; 0x01
    38e0:	82 81       	ldd	r24, Z+2	; 0x02
    38e2:	93 81       	ldd	r25, Z+3	; 0x03
    38e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	f8 01       	movw	r30, r16
    38ee:	91 83       	std	Z+1, r25	; 0x01
    38f0:	80 83       	st	Z, r24
    38f2:	de 01       	movw	r26, r28
    38f4:	ad 5b       	subi	r26, 0xBD	; 189
    38f6:	be 4f       	sbci	r27, 0xFE	; 254
    38f8:	fe 01       	movw	r30, r28
    38fa:	e9 5b       	subi	r30, 0xB9	; 185
    38fc:	fe 4f       	sbci	r31, 0xFE	; 254
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	8d 93       	st	X+, r24
    3904:	9c 93       	st	X, r25
    3906:	fe 01       	movw	r30, r28
    3908:	ed 5b       	subi	r30, 0xBD	; 189
    390a:	fe 4f       	sbci	r31, 0xFE	; 254
    390c:	80 81       	ld	r24, Z
    390e:	91 81       	ldd	r25, Z+1	; 0x01
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <main+0x1214>
    3914:	fe 01       	movw	r30, r28
    3916:	ed 5b       	subi	r30, 0xBD	; 189
    3918:	fe 4f       	sbci	r31, 0xFE	; 254
    391a:	91 83       	std	Z+1, r25	; 0x01
    391c:	80 83       	st	Z, r24
				_delay_ms(2);
				LCD_VoidSendString("Welcome Back");
    391e:	84 eb       	ldi	r24, 0xB4	; 180
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_VoidSendString>

				DIO_PORTC = (DIO_PORTC & 0xF0) | (motor_steps[1] & 0x0F);  // 90
    3926:	a5 e3       	ldi	r26, 0x35	; 53
    3928:	b0 e0       	ldi	r27, 0x00	; 0
    392a:	e5 e3       	ldi	r30, 0x35	; 53
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	80 81       	ld	r24, Z
    3930:	98 2f       	mov	r25, r24
    3932:	90 7f       	andi	r25, 0xF0	; 240
    3934:	fe 01       	movw	r30, r28
    3936:	e4 50       	subi	r30, 0x04	; 4
    3938:	fe 4f       	sbci	r31, 0xFE	; 254
    393a:	81 81       	ldd	r24, Z+1	; 0x01
    393c:	8f 70       	andi	r24, 0x0F	; 15
    393e:	89 2b       	or	r24, r25
    3940:	8c 93       	st	X, r24
    3942:	fe 01       	movw	r30, r28
    3944:	e1 5c       	subi	r30, 0xC1	; 193
    3946:	fe 4f       	sbci	r31, 0xFE	; 254
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	aa e7       	ldi	r26, 0x7A	; 122
    394e:	b4 e4       	ldi	r27, 0x44	; 68
    3950:	80 83       	st	Z, r24
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	a2 83       	std	Z+2, r26	; 0x02
    3956:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3958:	8e 01       	movw	r16, r28
    395a:	05 5c       	subi	r16, 0xC5	; 197
    395c:	1e 4f       	sbci	r17, 0xFE	; 254
    395e:	fe 01       	movw	r30, r28
    3960:	e1 5c       	subi	r30, 0xC1	; 193
    3962:	fe 4f       	sbci	r31, 0xFE	; 254
    3964:	60 81       	ld	r22, Z
    3966:	71 81       	ldd	r23, Z+1	; 0x01
    3968:	82 81       	ldd	r24, Z+2	; 0x02
    396a:	93 81       	ldd	r25, Z+3	; 0x03
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	4a ef       	ldi	r20, 0xFA	; 250
    3972:	54 e4       	ldi	r21, 0x44	; 68
    3974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	f8 01       	movw	r30, r16
    397e:	80 83       	st	Z, r24
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	a2 83       	std	Z+2, r26	; 0x02
    3984:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3986:	fe 01       	movw	r30, r28
    3988:	e5 5c       	subi	r30, 0xC5	; 197
    398a:	fe 4f       	sbci	r31, 0xFE	; 254
    398c:	60 81       	ld	r22, Z
    398e:	71 81       	ldd	r23, Z+1	; 0x01
    3990:	82 81       	ldd	r24, Z+2	; 0x02
    3992:	93 81       	ldd	r25, Z+3	; 0x03
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	40 e8       	ldi	r20, 0x80	; 128
    399a:	5f e3       	ldi	r21, 0x3F	; 63
    399c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39a0:	88 23       	and	r24, r24
    39a2:	44 f4       	brge	.+16     	; 0x39b4 <main+0x12b8>
		__ticks = 1;
    39a4:	fe 01       	movw	r30, r28
    39a6:	e7 5c       	subi	r30, 0xC7	; 199
    39a8:	fe 4f       	sbci	r31, 0xFE	; 254
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	91 83       	std	Z+1, r25	; 0x01
    39b0:	80 83       	st	Z, r24
    39b2:	64 c0       	rjmp	.+200    	; 0x3a7c <main+0x1380>
	else if (__tmp > 65535)
    39b4:	fe 01       	movw	r30, r28
    39b6:	e5 5c       	subi	r30, 0xC5	; 197
    39b8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ba:	60 81       	ld	r22, Z
    39bc:	71 81       	ldd	r23, Z+1	; 0x01
    39be:	82 81       	ldd	r24, Z+2	; 0x02
    39c0:	93 81       	ldd	r25, Z+3	; 0x03
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	3f ef       	ldi	r19, 0xFF	; 255
    39c6:	4f e7       	ldi	r20, 0x7F	; 127
    39c8:	57 e4       	ldi	r21, 0x47	; 71
    39ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ce:	18 16       	cp	r1, r24
    39d0:	0c f0       	brlt	.+2      	; 0x39d4 <main+0x12d8>
    39d2:	43 c0       	rjmp	.+134    	; 0x3a5a <main+0x135e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d4:	fe 01       	movw	r30, r28
    39d6:	e1 5c       	subi	r30, 0xC1	; 193
    39d8:	fe 4f       	sbci	r31, 0xFE	; 254
    39da:	60 81       	ld	r22, Z
    39dc:	71 81       	ldd	r23, Z+1	; 0x01
    39de:	82 81       	ldd	r24, Z+2	; 0x02
    39e0:	93 81       	ldd	r25, Z+3	; 0x03
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	40 e2       	ldi	r20, 0x20	; 32
    39e8:	51 e4       	ldi	r21, 0x41	; 65
    39ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	8e 01       	movw	r16, r28
    39f4:	07 5c       	subi	r16, 0xC7	; 199
    39f6:	1e 4f       	sbci	r17, 0xFE	; 254
    39f8:	bc 01       	movw	r22, r24
    39fa:	cd 01       	movw	r24, r26
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	f8 01       	movw	r30, r16
    3a06:	91 83       	std	Z+1, r25	; 0x01
    3a08:	80 83       	st	Z, r24
    3a0a:	1f c0       	rjmp	.+62     	; 0x3a4a <main+0x134e>
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e9 5c       	subi	r30, 0xC9	; 201
    3a10:	fe 4f       	sbci	r31, 0xFE	; 254
    3a12:	88 ec       	ldi	r24, 0xC8	; 200
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	80 83       	st	Z, r24
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e9 5c       	subi	r30, 0xC9	; 201
    3a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a20:	80 81       	ld	r24, Z
    3a22:	91 81       	ldd	r25, Z+1	; 0x01
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <main+0x1328>
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e9 5c       	subi	r30, 0xC9	; 201
    3a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2e:	91 83       	std	Z+1, r25	; 0x01
    3a30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a32:	de 01       	movw	r26, r28
    3a34:	a7 5c       	subi	r26, 0xC7	; 199
    3a36:	be 4f       	sbci	r27, 0xFE	; 254
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e7 5c       	subi	r30, 0xC7	; 199
    3a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	11 96       	adiw	r26, 0x01	; 1
    3a46:	9c 93       	st	X, r25
    3a48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	e7 5c       	subi	r30, 0xC7	; 199
    3a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a50:	80 81       	ld	r24, Z
    3a52:	91 81       	ldd	r25, Z+1	; 0x01
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	d1 f6       	brne	.-76     	; 0x3a0c <main+0x1310>
    3a58:	27 c0       	rjmp	.+78     	; 0x3aa8 <main+0x13ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5a:	8e 01       	movw	r16, r28
    3a5c:	07 5c       	subi	r16, 0xC7	; 199
    3a5e:	1e 4f       	sbci	r17, 0xFE	; 254
    3a60:	fe 01       	movw	r30, r28
    3a62:	e5 5c       	subi	r30, 0xC5	; 197
    3a64:	fe 4f       	sbci	r31, 0xFE	; 254
    3a66:	60 81       	ld	r22, Z
    3a68:	71 81       	ldd	r23, Z+1	; 0x01
    3a6a:	82 81       	ldd	r24, Z+2	; 0x02
    3a6c:	93 81       	ldd	r25, Z+3	; 0x03
    3a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	f8 01       	movw	r30, r16
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24
    3a7c:	de 01       	movw	r26, r28
    3a7e:	ab 5c       	subi	r26, 0xCB	; 203
    3a80:	be 4f       	sbci	r27, 0xFE	; 254
    3a82:	fe 01       	movw	r30, r28
    3a84:	e7 5c       	subi	r30, 0xC7	; 199
    3a86:	fe 4f       	sbci	r31, 0xFE	; 254
    3a88:	80 81       	ld	r24, Z
    3a8a:	91 81       	ldd	r25, Z+1	; 0x01
    3a8c:	8d 93       	st	X+, r24
    3a8e:	9c 93       	st	X, r25
    3a90:	fe 01       	movw	r30, r28
    3a92:	eb 5c       	subi	r30, 0xCB	; 203
    3a94:	fe 4f       	sbci	r31, 0xFE	; 254
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	f1 f7       	brne	.-4      	; 0x3a9a <main+0x139e>
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	eb 5c       	subi	r30, 0xCB	; 203
    3aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
				_delay_ms(1000);
				DIO_PORTC = (DIO_PORTC & 0xF0) | (motor_steps[0] & 0x0F);  //   0
    3aa8:	a5 e3       	ldi	r26, 0x35	; 53
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	e5 e3       	ldi	r30, 0x35	; 53
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	98 2f       	mov	r25, r24
    3ab4:	90 7f       	andi	r25, 0xF0	; 240
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e4 50       	subi	r30, 0x04	; 4
    3aba:	fe 4f       	sbci	r31, 0xFE	; 254
    3abc:	80 81       	ld	r24, Z
    3abe:	8f 70       	andi	r24, 0x0F	; 15
    3ac0:	89 2b       	or	r24, r25
    3ac2:	8c 93       	st	X, r24

				LCD_VoidSendCommand(LCD_ClearDisplay);
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    3aca:	fe 01       	movw	r30, r28
    3acc:	ef 5c       	subi	r30, 0xCF	; 207
    3ace:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	a0 e0       	ldi	r26, 0x00	; 0
    3ad6:	b0 e4       	ldi	r27, 0x40	; 64
    3ad8:	80 83       	st	Z, r24
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	a2 83       	std	Z+2, r26	; 0x02
    3ade:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae0:	8e 01       	movw	r16, r28
    3ae2:	03 5d       	subi	r16, 0xD3	; 211
    3ae4:	1e 4f       	sbci	r17, 0xFE	; 254
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	ef 5c       	subi	r30, 0xCF	; 207
    3aea:	fe 4f       	sbci	r31, 0xFE	; 254
    3aec:	60 81       	ld	r22, Z
    3aee:	71 81       	ldd	r23, Z+1	; 0x01
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	4a ef       	ldi	r20, 0xFA	; 250
    3afa:	54 e4       	ldi	r21, 0x44	; 68
    3afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	f8 01       	movw	r30, r16
    3b06:	80 83       	st	Z, r24
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	a2 83       	std	Z+2, r26	; 0x02
    3b0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b0e:	fe 01       	movw	r30, r28
    3b10:	e3 5d       	subi	r30, 0xD3	; 211
    3b12:	fe 4f       	sbci	r31, 0xFE	; 254
    3b14:	60 81       	ld	r22, Z
    3b16:	71 81       	ldd	r23, Z+1	; 0x01
    3b18:	82 81       	ldd	r24, Z+2	; 0x02
    3b1a:	93 81       	ldd	r25, Z+3	; 0x03
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	40 e8       	ldi	r20, 0x80	; 128
    3b22:	5f e3       	ldi	r21, 0x3F	; 63
    3b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b28:	88 23       	and	r24, r24
    3b2a:	44 f4       	brge	.+16     	; 0x3b3c <main+0x1440>
		__ticks = 1;
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e5 5d       	subi	r30, 0xD5	; 213
    3b30:	fe 4f       	sbci	r31, 0xFE	; 254
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	91 83       	std	Z+1, r25	; 0x01
    3b38:	80 83       	st	Z, r24
    3b3a:	64 c0       	rjmp	.+200    	; 0x3c04 <main+0x1508>
	else if (__tmp > 65535)
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e3 5d       	subi	r30, 0xD3	; 211
    3b40:	fe 4f       	sbci	r31, 0xFE	; 254
    3b42:	60 81       	ld	r22, Z
    3b44:	71 81       	ldd	r23, Z+1	; 0x01
    3b46:	82 81       	ldd	r24, Z+2	; 0x02
    3b48:	93 81       	ldd	r25, Z+3	; 0x03
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	3f ef       	ldi	r19, 0xFF	; 255
    3b4e:	4f e7       	ldi	r20, 0x7F	; 127
    3b50:	57 e4       	ldi	r21, 0x47	; 71
    3b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b56:	18 16       	cp	r1, r24
    3b58:	0c f0       	brlt	.+2      	; 0x3b5c <main+0x1460>
    3b5a:	43 c0       	rjmp	.+134    	; 0x3be2 <main+0x14e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	ef 5c       	subi	r30, 0xCF	; 207
    3b60:	fe 4f       	sbci	r31, 0xFE	; 254
    3b62:	60 81       	ld	r22, Z
    3b64:	71 81       	ldd	r23, Z+1	; 0x01
    3b66:	82 81       	ldd	r24, Z+2	; 0x02
    3b68:	93 81       	ldd	r25, Z+3	; 0x03
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e2       	ldi	r20, 0x20	; 32
    3b70:	51 e4       	ldi	r21, 0x41	; 65
    3b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	8e 01       	movw	r16, r28
    3b7c:	05 5d       	subi	r16, 0xD5	; 213
    3b7e:	1e 4f       	sbci	r17, 0xFE	; 254
    3b80:	bc 01       	movw	r22, r24
    3b82:	cd 01       	movw	r24, r26
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	f8 01       	movw	r30, r16
    3b8e:	91 83       	std	Z+1, r25	; 0x01
    3b90:	80 83       	st	Z, r24
    3b92:	1f c0       	rjmp	.+62     	; 0x3bd2 <main+0x14d6>
    3b94:	fe 01       	movw	r30, r28
    3b96:	e7 5d       	subi	r30, 0xD7	; 215
    3b98:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9a:	88 ec       	ldi	r24, 0xC8	; 200
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	91 83       	std	Z+1, r25	; 0x01
    3ba0:	80 83       	st	Z, r24
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e7 5d       	subi	r30, 0xD7	; 215
    3ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba8:	80 81       	ld	r24, Z
    3baa:	91 81       	ldd	r25, Z+1	; 0x01
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <main+0x14b0>
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e7 5d       	subi	r30, 0xD7	; 215
    3bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb6:	91 83       	std	Z+1, r25	; 0x01
    3bb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bba:	de 01       	movw	r26, r28
    3bbc:	a5 5d       	subi	r26, 0xD5	; 213
    3bbe:	be 4f       	sbci	r27, 0xFE	; 254
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	e5 5d       	subi	r30, 0xD5	; 213
    3bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc6:	80 81       	ld	r24, Z
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	01 97       	sbiw	r24, 0x01	; 1
    3bcc:	11 96       	adiw	r26, 0x01	; 1
    3bce:	9c 93       	st	X, r25
    3bd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	e5 5d       	subi	r30, 0xD5	; 213
    3bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd8:	80 81       	ld	r24, Z
    3bda:	91 81       	ldd	r25, Z+1	; 0x01
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	d1 f6       	brne	.-76     	; 0x3b94 <main+0x1498>
    3be0:	28 c0       	rjmp	.+80     	; 0x3c32 <main+0x1536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be2:	8e 01       	movw	r16, r28
    3be4:	05 5d       	subi	r16, 0xD5	; 213
    3be6:	1e 4f       	sbci	r17, 0xFE	; 254
    3be8:	fe 01       	movw	r30, r28
    3bea:	e3 5d       	subi	r30, 0xD3	; 211
    3bec:	fe 4f       	sbci	r31, 0xFE	; 254
    3bee:	60 81       	ld	r22, Z
    3bf0:	71 81       	ldd	r23, Z+1	; 0x01
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	93 81       	ldd	r25, Z+3	; 0x03
    3bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	f8 01       	movw	r30, r16
    3c00:	91 83       	std	Z+1, r25	; 0x01
    3c02:	80 83       	st	Z, r24
    3c04:	de 01       	movw	r26, r28
    3c06:	a9 5d       	subi	r26, 0xD9	; 217
    3c08:	be 4f       	sbci	r27, 0xFE	; 254
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	e5 5d       	subi	r30, 0xD5	; 213
    3c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c10:	80 81       	ld	r24, Z
    3c12:	91 81       	ldd	r25, Z+1	; 0x01
    3c14:	11 96       	adiw	r26, 0x01	; 1
    3c16:	9c 93       	st	X, r25
    3c18:	8e 93       	st	-X, r24
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e9 5d       	subi	r30, 0xD9	; 217
    3c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c20:	80 81       	ld	r24, Z
    3c22:	91 81       	ldd	r25, Z+1	; 0x01
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <main+0x1528>
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e9 5d       	subi	r30, 0xD9	; 217
    3c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2e:	91 83       	std	Z+1, r25	; 0x01
    3c30:	80 83       	st	Z, r24
				_delay_ms(2);
				Comp_Pass = 0;
    3c32:	fe 01       	movw	r30, r28
    3c34:	e0 52       	subi	r30, 0x20	; 32
    3c36:	fe 4f       	sbci	r31, 0xFE	; 254
    3c38:	10 82       	st	Z, r1
    3c3a:	11 82       	std	Z+1, r1	; 0x01
    3c3c:	12 82       	std	Z+2, r1	; 0x02
    3c3e:	13 82       	std	Z+3, r1	; 0x03
    3c40:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <main+0x264>
			}
			else if (Reversed_Pass == Comp_Pass)
    3c44:	fe 01       	movw	r30, r28
    3c46:	e4 51       	subi	r30, 0x14	; 20
    3c48:	fe 4f       	sbci	r31, 0xFE	; 254
    3c4a:	de 01       	movw	r26, r28
    3c4c:	a0 52       	subi	r26, 0x20	; 32
    3c4e:	be 4f       	sbci	r27, 0xFE	; 254
    3c50:	20 81       	ld	r18, Z
    3c52:	31 81       	ldd	r19, Z+1	; 0x01
    3c54:	42 81       	ldd	r20, Z+2	; 0x02
    3c56:	53 81       	ldd	r21, Z+3	; 0x03
    3c58:	8d 91       	ld	r24, X+
    3c5a:	9d 91       	ld	r25, X+
    3c5c:	0d 90       	ld	r0, X+
    3c5e:	bc 91       	ld	r27, X
    3c60:	a0 2d       	mov	r26, r0
    3c62:	28 17       	cp	r18, r24
    3c64:	39 07       	cpc	r19, r25
    3c66:	4a 07       	cpc	r20, r26
    3c68:	5b 07       	cpc	r21, r27
    3c6a:	09 f0       	breq	.+2      	; 0x3c6e <main+0x1572>
    3c6c:	79 c1       	rjmp	.+754    	; 0x3f60 <main+0x1864>
			{
				LCD_VoidSendStringFromPos("Calling 911",0,1);
    3c6e:	81 ec       	ldi	r24, 0xC1	; 193
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	ed 5d       	subi	r30, 0xDD	; 221
    3c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	aa e7       	ldi	r26, 0x7A	; 122
    3c86:	b4 e4       	ldi	r27, 0x44	; 68
    3c88:	80 83       	st	Z, r24
    3c8a:	91 83       	std	Z+1, r25	; 0x01
    3c8c:	a2 83       	std	Z+2, r26	; 0x02
    3c8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c90:	8e 01       	movw	r16, r28
    3c92:	01 5e       	subi	r16, 0xE1	; 225
    3c94:	1e 4f       	sbci	r17, 0xFE	; 254
    3c96:	fe 01       	movw	r30, r28
    3c98:	ed 5d       	subi	r30, 0xDD	; 221
    3c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	4a ef       	ldi	r20, 0xFA	; 250
    3caa:	54 e4       	ldi	r21, 0x44	; 68
    3cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	f8 01       	movw	r30, r16
    3cb6:	80 83       	st	Z, r24
    3cb8:	91 83       	std	Z+1, r25	; 0x01
    3cba:	a2 83       	std	Z+2, r26	; 0x02
    3cbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	e1 5e       	subi	r30, 0xE1	; 225
    3cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc4:	60 81       	ld	r22, Z
    3cc6:	71 81       	ldd	r23, Z+1	; 0x01
    3cc8:	82 81       	ldd	r24, Z+2	; 0x02
    3cca:	93 81       	ldd	r25, Z+3	; 0x03
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e8       	ldi	r20, 0x80	; 128
    3cd2:	5f e3       	ldi	r21, 0x3F	; 63
    3cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cd8:	88 23       	and	r24, r24
    3cda:	44 f4       	brge	.+16     	; 0x3cec <main+0x15f0>
		__ticks = 1;
    3cdc:	fe 01       	movw	r30, r28
    3cde:	e3 5e       	subi	r30, 0xE3	; 227
    3ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	91 83       	std	Z+1, r25	; 0x01
    3ce8:	80 83       	st	Z, r24
    3cea:	64 c0       	rjmp	.+200    	; 0x3db4 <main+0x16b8>
	else if (__tmp > 65535)
    3cec:	fe 01       	movw	r30, r28
    3cee:	e1 5e       	subi	r30, 0xE1	; 225
    3cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf2:	60 81       	ld	r22, Z
    3cf4:	71 81       	ldd	r23, Z+1	; 0x01
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	3f ef       	ldi	r19, 0xFF	; 255
    3cfe:	4f e7       	ldi	r20, 0x7F	; 127
    3d00:	57 e4       	ldi	r21, 0x47	; 71
    3d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d06:	18 16       	cp	r1, r24
    3d08:	0c f0       	brlt	.+2      	; 0x3d0c <main+0x1610>
    3d0a:	43 c0       	rjmp	.+134    	; 0x3d92 <main+0x1696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	ed 5d       	subi	r30, 0xDD	; 221
    3d10:	fe 4f       	sbci	r31, 0xFE	; 254
    3d12:	60 81       	ld	r22, Z
    3d14:	71 81       	ldd	r23, Z+1	; 0x01
    3d16:	82 81       	ldd	r24, Z+2	; 0x02
    3d18:	93 81       	ldd	r25, Z+3	; 0x03
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e2       	ldi	r20, 0x20	; 32
    3d20:	51 e4       	ldi	r21, 0x41	; 65
    3d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	8e 01       	movw	r16, r28
    3d2c:	03 5e       	subi	r16, 0xE3	; 227
    3d2e:	1e 4f       	sbci	r17, 0xFE	; 254
    3d30:	bc 01       	movw	r22, r24
    3d32:	cd 01       	movw	r24, r26
    3d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	80 83       	st	Z, r24
    3d42:	1f c0       	rjmp	.+62     	; 0x3d82 <main+0x1686>
    3d44:	fe 01       	movw	r30, r28
    3d46:	e5 5e       	subi	r30, 0xE5	; 229
    3d48:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4a:	88 ec       	ldi	r24, 0xC8	; 200
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
    3d52:	fe 01       	movw	r30, r28
    3d54:	e5 5e       	subi	r30, 0xE5	; 229
    3d56:	fe 4f       	sbci	r31, 0xFE	; 254
    3d58:	80 81       	ld	r24, Z
    3d5a:	91 81       	ldd	r25, Z+1	; 0x01
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <main+0x1660>
    3d60:	fe 01       	movw	r30, r28
    3d62:	e5 5e       	subi	r30, 0xE5	; 229
    3d64:	fe 4f       	sbci	r31, 0xFE	; 254
    3d66:	91 83       	std	Z+1, r25	; 0x01
    3d68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d6a:	de 01       	movw	r26, r28
    3d6c:	a3 5e       	subi	r26, 0xE3	; 227
    3d6e:	be 4f       	sbci	r27, 0xFE	; 254
    3d70:	fe 01       	movw	r30, r28
    3d72:	e3 5e       	subi	r30, 0xE3	; 227
    3d74:	fe 4f       	sbci	r31, 0xFE	; 254
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	11 96       	adiw	r26, 0x01	; 1
    3d7e:	9c 93       	st	X, r25
    3d80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d82:	fe 01       	movw	r30, r28
    3d84:	e3 5e       	subi	r30, 0xE3	; 227
    3d86:	fe 4f       	sbci	r31, 0xFE	; 254
    3d88:	80 81       	ld	r24, Z
    3d8a:	91 81       	ldd	r25, Z+1	; 0x01
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	d1 f6       	brne	.-76     	; 0x3d44 <main+0x1648>
    3d90:	27 c0       	rjmp	.+78     	; 0x3de0 <main+0x16e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d92:	8e 01       	movw	r16, r28
    3d94:	03 5e       	subi	r16, 0xE3	; 227
    3d96:	1e 4f       	sbci	r17, 0xFE	; 254
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e1 5e       	subi	r30, 0xE1	; 225
    3d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9e:	60 81       	ld	r22, Z
    3da0:	71 81       	ldd	r23, Z+1	; 0x01
    3da2:	82 81       	ldd	r24, Z+2	; 0x02
    3da4:	93 81       	ldd	r25, Z+3	; 0x03
    3da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	f8 01       	movw	r30, r16
    3db0:	91 83       	std	Z+1, r25	; 0x01
    3db2:	80 83       	st	Z, r24
    3db4:	de 01       	movw	r26, r28
    3db6:	a7 5e       	subi	r26, 0xE7	; 231
    3db8:	be 4f       	sbci	r27, 0xFE	; 254
    3dba:	fe 01       	movw	r30, r28
    3dbc:	e3 5e       	subi	r30, 0xE3	; 227
    3dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc0:	80 81       	ld	r24, Z
    3dc2:	91 81       	ldd	r25, Z+1	; 0x01
    3dc4:	8d 93       	st	X+, r24
    3dc6:	9c 93       	st	X, r25
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e7 5e       	subi	r30, 0xE7	; 231
    3dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	f1 f7       	brne	.-4      	; 0x3dd2 <main+0x16d6>
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	e7 5e       	subi	r30, 0xE7	; 231
    3dda:	fe 4f       	sbci	r31, 0xFE	; 254
    3ddc:	91 83       	std	Z+1, r25	; 0x01
    3dde:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    3de6:	fe 01       	movw	r30, r28
    3de8:	eb 5e       	subi	r30, 0xEB	; 235
    3dea:	fe 4f       	sbci	r31, 0xFE	; 254
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	a0 e0       	ldi	r26, 0x00	; 0
    3df2:	b0 e4       	ldi	r27, 0x40	; 64
    3df4:	80 83       	st	Z, r24
    3df6:	91 83       	std	Z+1, r25	; 0x01
    3df8:	a2 83       	std	Z+2, r26	; 0x02
    3dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfc:	8e 01       	movw	r16, r28
    3dfe:	0f 5e       	subi	r16, 0xEF	; 239
    3e00:	1e 4f       	sbci	r17, 0xFE	; 254
    3e02:	fe 01       	movw	r30, r28
    3e04:	eb 5e       	subi	r30, 0xEB	; 235
    3e06:	fe 4f       	sbci	r31, 0xFE	; 254
    3e08:	60 81       	ld	r22, Z
    3e0a:	71 81       	ldd	r23, Z+1	; 0x01
    3e0c:	82 81       	ldd	r24, Z+2	; 0x02
    3e0e:	93 81       	ldd	r25, Z+3	; 0x03
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	4a ef       	ldi	r20, 0xFA	; 250
    3e16:	54 e4       	ldi	r21, 0x44	; 68
    3e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	f8 01       	movw	r30, r16
    3e22:	80 83       	st	Z, r24
    3e24:	91 83       	std	Z+1, r25	; 0x01
    3e26:	a2 83       	std	Z+2, r26	; 0x02
    3e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	ef 5e       	subi	r30, 0xEF	; 239
    3e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e30:	60 81       	ld	r22, Z
    3e32:	71 81       	ldd	r23, Z+1	; 0x01
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e8       	ldi	r20, 0x80	; 128
    3e3e:	5f e3       	ldi	r21, 0x3F	; 63
    3e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e44:	88 23       	and	r24, r24
    3e46:	44 f4       	brge	.+16     	; 0x3e58 <main+0x175c>
		__ticks = 1;
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e1 5f       	subi	r30, 0xF1	; 241
    3e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	91 83       	std	Z+1, r25	; 0x01
    3e54:	80 83       	st	Z, r24
    3e56:	64 c0       	rjmp	.+200    	; 0x3f20 <main+0x1824>
	else if (__tmp > 65535)
    3e58:	fe 01       	movw	r30, r28
    3e5a:	ef 5e       	subi	r30, 0xEF	; 239
    3e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e5e:	60 81       	ld	r22, Z
    3e60:	71 81       	ldd	r23, Z+1	; 0x01
    3e62:	82 81       	ldd	r24, Z+2	; 0x02
    3e64:	93 81       	ldd	r25, Z+3	; 0x03
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	3f ef       	ldi	r19, 0xFF	; 255
    3e6a:	4f e7       	ldi	r20, 0x7F	; 127
    3e6c:	57 e4       	ldi	r21, 0x47	; 71
    3e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e72:	18 16       	cp	r1, r24
    3e74:	0c f0       	brlt	.+2      	; 0x3e78 <main+0x177c>
    3e76:	43 c0       	rjmp	.+134    	; 0x3efe <main+0x1802>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e78:	fe 01       	movw	r30, r28
    3e7a:	eb 5e       	subi	r30, 0xEB	; 235
    3e7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e7e:	60 81       	ld	r22, Z
    3e80:	71 81       	ldd	r23, Z+1	; 0x01
    3e82:	82 81       	ldd	r24, Z+2	; 0x02
    3e84:	93 81       	ldd	r25, Z+3	; 0x03
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e2       	ldi	r20, 0x20	; 32
    3e8c:	51 e4       	ldi	r21, 0x41	; 65
    3e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	8e 01       	movw	r16, r28
    3e98:	01 5f       	subi	r16, 0xF1	; 241
    3e9a:	1e 4f       	sbci	r17, 0xFE	; 254
    3e9c:	bc 01       	movw	r22, r24
    3e9e:	cd 01       	movw	r24, r26
    3ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	f8 01       	movw	r30, r16
    3eaa:	91 83       	std	Z+1, r25	; 0x01
    3eac:	80 83       	st	Z, r24
    3eae:	1f c0       	rjmp	.+62     	; 0x3eee <main+0x17f2>
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e3 5f       	subi	r30, 0xF3	; 243
    3eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb6:	88 ec       	ldi	r24, 0xC8	; 200
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	80 83       	st	Z, r24
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e3 5f       	subi	r30, 0xF3	; 243
    3ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec4:	80 81       	ld	r24, Z
    3ec6:	91 81       	ldd	r25, Z+1	; 0x01
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	f1 f7       	brne	.-4      	; 0x3ec8 <main+0x17cc>
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e3 5f       	subi	r30, 0xF3	; 243
    3ed0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed2:	91 83       	std	Z+1, r25	; 0x01
    3ed4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed6:	de 01       	movw	r26, r28
    3ed8:	a1 5f       	subi	r26, 0xF1	; 241
    3eda:	be 4f       	sbci	r27, 0xFE	; 254
    3edc:	fe 01       	movw	r30, r28
    3ede:	e1 5f       	subi	r30, 0xF1	; 241
    3ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee2:	80 81       	ld	r24, Z
    3ee4:	91 81       	ldd	r25, Z+1	; 0x01
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	11 96       	adiw	r26, 0x01	; 1
    3eea:	9c 93       	st	X, r25
    3eec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eee:	fe 01       	movw	r30, r28
    3ef0:	e1 5f       	subi	r30, 0xF1	; 241
    3ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef4:	80 81       	ld	r24, Z
    3ef6:	91 81       	ldd	r25, Z+1	; 0x01
    3ef8:	00 97       	sbiw	r24, 0x00	; 0
    3efa:	d1 f6       	brne	.-76     	; 0x3eb0 <main+0x17b4>
    3efc:	28 c0       	rjmp	.+80     	; 0x3f4e <main+0x1852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3efe:	8e 01       	movw	r16, r28
    3f00:	01 5f       	subi	r16, 0xF1	; 241
    3f02:	1e 4f       	sbci	r17, 0xFE	; 254
    3f04:	fe 01       	movw	r30, r28
    3f06:	ef 5e       	subi	r30, 0xEF	; 239
    3f08:	fe 4f       	sbci	r31, 0xFE	; 254
    3f0a:	60 81       	ld	r22, Z
    3f0c:	71 81       	ldd	r23, Z+1	; 0x01
    3f0e:	82 81       	ldd	r24, Z+2	; 0x02
    3f10:	93 81       	ldd	r25, Z+3	; 0x03
    3f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	f8 01       	movw	r30, r16
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	80 83       	st	Z, r24
    3f20:	de 01       	movw	r26, r28
    3f22:	a5 5f       	subi	r26, 0xF5	; 245
    3f24:	be 4f       	sbci	r27, 0xFE	; 254
    3f26:	fe 01       	movw	r30, r28
    3f28:	e1 5f       	subi	r30, 0xF1	; 241
    3f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f2c:	80 81       	ld	r24, Z
    3f2e:	91 81       	ldd	r25, Z+1	; 0x01
    3f30:	11 96       	adiw	r26, 0x01	; 1
    3f32:	9c 93       	st	X, r25
    3f34:	8e 93       	st	-X, r24
    3f36:	fe 01       	movw	r30, r28
    3f38:	e5 5f       	subi	r30, 0xF5	; 245
    3f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	f1 f7       	brne	.-4      	; 0x3f40 <main+0x1844>
    3f44:	fe 01       	movw	r30, r28
    3f46:	e5 5f       	subi	r30, 0xF5	; 245
    3f48:	fe 4f       	sbci	r31, 0xFE	; 254
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
				_delay_ms(2);
				Comp_Pass = 0;
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e0 52       	subi	r30, 0x20	; 32
    3f52:	fe 4f       	sbci	r31, 0xFE	; 254
    3f54:	10 82       	st	Z, r1
    3f56:	11 82       	std	Z+1, r1	; 0x01
    3f58:	12 82       	std	Z+2, r1	; 0x02
    3f5a:	13 82       	std	Z+3, r1	; 0x03
    3f5c:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <main+0x264>
			}
			else
			{
				LCD_VoidSendStringFromPos("Wrong Password",0,1);
    3f60:	8d ec       	ldi	r24, 0xCD	; 205
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	60 e0       	ldi	r22, 0x00	; 0
    3f66:	41 e0       	ldi	r20, 0x01	; 1
    3f68:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e9 5f       	subi	r30, 0xF9	; 249
    3f70:	fe 4f       	sbci	r31, 0xFE	; 254
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	aa ef       	ldi	r26, 0xFA	; 250
    3f78:	b3 e4       	ldi	r27, 0x43	; 67
    3f7a:	80 83       	st	Z, r24
    3f7c:	91 83       	std	Z+1, r25	; 0x01
    3f7e:	a2 83       	std	Z+2, r26	; 0x02
    3f80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f82:	8e 01       	movw	r16, r28
    3f84:	0d 5f       	subi	r16, 0xFD	; 253
    3f86:	1e 4f       	sbci	r17, 0xFE	; 254
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e9 5f       	subi	r30, 0xF9	; 249
    3f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	4a ef       	ldi	r20, 0xFA	; 250
    3f9c:	54 e4       	ldi	r21, 0x44	; 68
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	f8 01       	movw	r30, r16
    3fa8:	80 83       	st	Z, r24
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	a2 83       	std	Z+2, r26	; 0x02
    3fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	ed 5f       	subi	r30, 0xFD	; 253
    3fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fb6:	60 81       	ld	r22, Z
    3fb8:	71 81       	ldd	r23, Z+1	; 0x01
    3fba:	82 81       	ldd	r24, Z+2	; 0x02
    3fbc:	93 81       	ldd	r25, Z+3	; 0x03
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e8       	ldi	r20, 0x80	; 128
    3fc4:	5f e3       	ldi	r21, 0x3F	; 63
    3fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fca:	88 23       	and	r24, r24
    3fcc:	44 f4       	brge	.+16     	; 0x3fde <main+0x18e2>
		__ticks = 1;
    3fce:	fe 01       	movw	r30, r28
    3fd0:	ef 5f       	subi	r30, 0xFF	; 255
    3fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
    3fdc:	64 c0       	rjmp	.+200    	; 0x40a6 <main+0x19aa>
	else if (__tmp > 65535)
    3fde:	fe 01       	movw	r30, r28
    3fe0:	ed 5f       	subi	r30, 0xFD	; 253
    3fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe4:	60 81       	ld	r22, Z
    3fe6:	71 81       	ldd	r23, Z+1	; 0x01
    3fe8:	82 81       	ldd	r24, Z+2	; 0x02
    3fea:	93 81       	ldd	r25, Z+3	; 0x03
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	3f ef       	ldi	r19, 0xFF	; 255
    3ff0:	4f e7       	ldi	r20, 0x7F	; 127
    3ff2:	57 e4       	ldi	r21, 0x47	; 71
    3ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ff8:	18 16       	cp	r1, r24
    3ffa:	0c f0       	brlt	.+2      	; 0x3ffe <main+0x1902>
    3ffc:	43 c0       	rjmp	.+134    	; 0x4084 <main+0x1988>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ffe:	fe 01       	movw	r30, r28
    4000:	e9 5f       	subi	r30, 0xF9	; 249
    4002:	fe 4f       	sbci	r31, 0xFE	; 254
    4004:	60 81       	ld	r22, Z
    4006:	71 81       	ldd	r23, Z+1	; 0x01
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	93 81       	ldd	r25, Z+3	; 0x03
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	40 e2       	ldi	r20, 0x20	; 32
    4012:	51 e4       	ldi	r21, 0x41	; 65
    4014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	8e 01       	movw	r16, r28
    401e:	0f 5f       	subi	r16, 0xFF	; 255
    4020:	1e 4f       	sbci	r17, 0xFE	; 254
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	f8 01       	movw	r30, r16
    4030:	91 83       	std	Z+1, r25	; 0x01
    4032:	80 83       	st	Z, r24
    4034:	1f c0       	rjmp	.+62     	; 0x4074 <main+0x1978>
    4036:	fe 01       	movw	r30, r28
    4038:	e1 50       	subi	r30, 0x01	; 1
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	88 ec       	ldi	r24, 0xC8	; 200
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	80 83       	st	Z, r24
    4044:	fe 01       	movw	r30, r28
    4046:	e1 50       	subi	r30, 0x01	; 1
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	80 81       	ld	r24, Z
    404c:	91 81       	ldd	r25, Z+1	; 0x01
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	f1 f7       	brne	.-4      	; 0x404e <main+0x1952>
    4052:	fe 01       	movw	r30, r28
    4054:	e1 50       	subi	r30, 0x01	; 1
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    405c:	de 01       	movw	r26, r28
    405e:	af 5f       	subi	r26, 0xFF	; 255
    4060:	be 4f       	sbci	r27, 0xFE	; 254
    4062:	fe 01       	movw	r30, r28
    4064:	ef 5f       	subi	r30, 0xFF	; 255
    4066:	fe 4f       	sbci	r31, 0xFE	; 254
    4068:	80 81       	ld	r24, Z
    406a:	91 81       	ldd	r25, Z+1	; 0x01
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	11 96       	adiw	r26, 0x01	; 1
    4070:	9c 93       	st	X, r25
    4072:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4074:	fe 01       	movw	r30, r28
    4076:	ef 5f       	subi	r30, 0xFF	; 255
    4078:	fe 4f       	sbci	r31, 0xFE	; 254
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	d1 f6       	brne	.-76     	; 0x4036 <main+0x193a>
    4082:	27 c0       	rjmp	.+78     	; 0x40d2 <main+0x19d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4084:	8e 01       	movw	r16, r28
    4086:	0f 5f       	subi	r16, 0xFF	; 255
    4088:	1e 4f       	sbci	r17, 0xFE	; 254
    408a:	fe 01       	movw	r30, r28
    408c:	ed 5f       	subi	r30, 0xFD	; 253
    408e:	fe 4f       	sbci	r31, 0xFE	; 254
    4090:	60 81       	ld	r22, Z
    4092:	71 81       	ldd	r23, Z+1	; 0x01
    4094:	82 81       	ldd	r24, Z+2	; 0x02
    4096:	93 81       	ldd	r25, Z+3	; 0x03
    4098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	f8 01       	movw	r30, r16
    40a2:	91 83       	std	Z+1, r25	; 0x01
    40a4:	80 83       	st	Z, r24
    40a6:	de 01       	movw	r26, r28
    40a8:	a3 50       	subi	r26, 0x03	; 3
    40aa:	bf 4f       	sbci	r27, 0xFF	; 255
    40ac:	fe 01       	movw	r30, r28
    40ae:	ef 5f       	subi	r30, 0xFF	; 255
    40b0:	fe 4f       	sbci	r31, 0xFE	; 254
    40b2:	80 81       	ld	r24, Z
    40b4:	91 81       	ldd	r25, Z+1	; 0x01
    40b6:	8d 93       	st	X+, r24
    40b8:	9c 93       	st	X, r25
    40ba:	fe 01       	movw	r30, r28
    40bc:	e3 50       	subi	r30, 0x03	; 3
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
    40c2:	91 81       	ldd	r25, Z+1	; 0x01
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <main+0x19c8>
    40c8:	fe 01       	movw	r30, r28
    40ca:	e3 50       	subi	r30, 0x03	; 3
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	91 83       	std	Z+1, r25	; 0x01
    40d0:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    40d8:	fe 01       	movw	r30, r28
    40da:	e7 50       	subi	r30, 0x07	; 7
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	a0 e0       	ldi	r26, 0x00	; 0
    40e4:	b0 e4       	ldi	r27, 0x40	; 64
    40e6:	80 83       	st	Z, r24
    40e8:	91 83       	std	Z+1, r25	; 0x01
    40ea:	a2 83       	std	Z+2, r26	; 0x02
    40ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ee:	8e 01       	movw	r16, r28
    40f0:	0b 50       	subi	r16, 0x0B	; 11
    40f2:	1f 4f       	sbci	r17, 0xFF	; 255
    40f4:	fe 01       	movw	r30, r28
    40f6:	e7 50       	subi	r30, 0x07	; 7
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	60 81       	ld	r22, Z
    40fc:	71 81       	ldd	r23, Z+1	; 0x01
    40fe:	82 81       	ldd	r24, Z+2	; 0x02
    4100:	93 81       	ldd	r25, Z+3	; 0x03
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	4a ef       	ldi	r20, 0xFA	; 250
    4108:	54 e4       	ldi	r21, 0x44	; 68
    410a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	f8 01       	movw	r30, r16
    4114:	80 83       	st	Z, r24
    4116:	91 83       	std	Z+1, r25	; 0x01
    4118:	a2 83       	std	Z+2, r26	; 0x02
    411a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    411c:	fe 01       	movw	r30, r28
    411e:	eb 50       	subi	r30, 0x0B	; 11
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	60 81       	ld	r22, Z
    4124:	71 81       	ldd	r23, Z+1	; 0x01
    4126:	82 81       	ldd	r24, Z+2	; 0x02
    4128:	93 81       	ldd	r25, Z+3	; 0x03
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	40 e8       	ldi	r20, 0x80	; 128
    4130:	5f e3       	ldi	r21, 0x3F	; 63
    4132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4136:	88 23       	and	r24, r24
    4138:	44 f4       	brge	.+16     	; 0x414a <main+0x1a4e>
		__ticks = 1;
    413a:	fe 01       	movw	r30, r28
    413c:	ed 50       	subi	r30, 0x0D	; 13
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	91 83       	std	Z+1, r25	; 0x01
    4146:	80 83       	st	Z, r24
    4148:	64 c0       	rjmp	.+200    	; 0x4212 <main+0x1b16>
	else if (__tmp > 65535)
    414a:	fe 01       	movw	r30, r28
    414c:	eb 50       	subi	r30, 0x0B	; 11
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	60 81       	ld	r22, Z
    4152:	71 81       	ldd	r23, Z+1	; 0x01
    4154:	82 81       	ldd	r24, Z+2	; 0x02
    4156:	93 81       	ldd	r25, Z+3	; 0x03
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	3f ef       	ldi	r19, 0xFF	; 255
    415c:	4f e7       	ldi	r20, 0x7F	; 127
    415e:	57 e4       	ldi	r21, 0x47	; 71
    4160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4164:	18 16       	cp	r1, r24
    4166:	0c f0       	brlt	.+2      	; 0x416a <main+0x1a6e>
    4168:	43 c0       	rjmp	.+134    	; 0x41f0 <main+0x1af4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416a:	fe 01       	movw	r30, r28
    416c:	e7 50       	subi	r30, 0x07	; 7
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	60 81       	ld	r22, Z
    4172:	71 81       	ldd	r23, Z+1	; 0x01
    4174:	82 81       	ldd	r24, Z+2	; 0x02
    4176:	93 81       	ldd	r25, Z+3	; 0x03
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	40 e2       	ldi	r20, 0x20	; 32
    417e:	51 e4       	ldi	r21, 0x41	; 65
    4180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	8e 01       	movw	r16, r28
    418a:	0d 50       	subi	r16, 0x0D	; 13
    418c:	1f 4f       	sbci	r17, 0xFF	; 255
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	f8 01       	movw	r30, r16
    419c:	91 83       	std	Z+1, r25	; 0x01
    419e:	80 83       	st	Z, r24
    41a0:	1f c0       	rjmp	.+62     	; 0x41e0 <main+0x1ae4>
    41a2:	fe 01       	movw	r30, r28
    41a4:	ef 50       	subi	r30, 0x0F	; 15
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	88 ec       	ldi	r24, 0xC8	; 200
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	80 83       	st	Z, r24
    41b0:	fe 01       	movw	r30, r28
    41b2:	ef 50       	subi	r30, 0x0F	; 15
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 81       	ld	r24, Z
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	f1 f7       	brne	.-4      	; 0x41ba <main+0x1abe>
    41be:	fe 01       	movw	r30, r28
    41c0:	ef 50       	subi	r30, 0x0F	; 15
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c8:	de 01       	movw	r26, r28
    41ca:	ad 50       	subi	r26, 0x0D	; 13
    41cc:	bf 4f       	sbci	r27, 0xFF	; 255
    41ce:	fe 01       	movw	r30, r28
    41d0:	ed 50       	subi	r30, 0x0D	; 13
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	80 81       	ld	r24, Z
    41d6:	91 81       	ldd	r25, Z+1	; 0x01
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	11 96       	adiw	r26, 0x01	; 1
    41dc:	9c 93       	st	X, r25
    41de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e0:	fe 01       	movw	r30, r28
    41e2:	ed 50       	subi	r30, 0x0D	; 13
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	91 81       	ldd	r25, Z+1	; 0x01
    41ea:	00 97       	sbiw	r24, 0x00	; 0
    41ec:	d1 f6       	brne	.-76     	; 0x41a2 <main+0x1aa6>
    41ee:	28 c0       	rjmp	.+80     	; 0x4240 <main+0x1b44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f0:	8e 01       	movw	r16, r28
    41f2:	0d 50       	subi	r16, 0x0D	; 13
    41f4:	1f 4f       	sbci	r17, 0xFF	; 255
    41f6:	fe 01       	movw	r30, r28
    41f8:	eb 50       	subi	r30, 0x0B	; 11
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	60 81       	ld	r22, Z
    41fe:	71 81       	ldd	r23, Z+1	; 0x01
    4200:	82 81       	ldd	r24, Z+2	; 0x02
    4202:	93 81       	ldd	r25, Z+3	; 0x03
    4204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	f8 01       	movw	r30, r16
    420e:	91 83       	std	Z+1, r25	; 0x01
    4210:	80 83       	st	Z, r24
    4212:	de 01       	movw	r26, r28
    4214:	a1 51       	subi	r26, 0x11	; 17
    4216:	bf 4f       	sbci	r27, 0xFF	; 255
    4218:	fe 01       	movw	r30, r28
    421a:	ed 50       	subi	r30, 0x0D	; 13
    421c:	ff 4f       	sbci	r31, 0xFF	; 255
    421e:	80 81       	ld	r24, Z
    4220:	91 81       	ldd	r25, Z+1	; 0x01
    4222:	11 96       	adiw	r26, 0x01	; 1
    4224:	9c 93       	st	X, r25
    4226:	8e 93       	st	-X, r24
    4228:	fe 01       	movw	r30, r28
    422a:	e1 51       	subi	r30, 0x11	; 17
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 81       	ld	r24, Z
    4230:	91 81       	ldd	r25, Z+1	; 0x01
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	f1 f7       	brne	.-4      	; 0x4232 <main+0x1b36>
    4236:	fe 01       	movw	r30, r28
    4238:	e1 51       	subi	r30, 0x11	; 17
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	91 83       	std	Z+1, r25	; 0x01
    423e:	80 83       	st	Z, r24
				_delay_ms(2);
				Comp_Pass = 0;
    4240:	fe 01       	movw	r30, r28
    4242:	e0 52       	subi	r30, 0x20	; 32
    4244:	fe 4f       	sbci	r31, 0xFE	; 254
    4246:	10 82       	st	Z, r1
    4248:	11 82       	std	Z+1, r1	; 0x01
    424a:	12 82       	std	Z+2, r1	; 0x02
    424c:	13 82       	std	Z+3, r1	; 0x03
    424e:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <main+0x264>
			}
		}

		// Code to Change the Password
		else if (Chosen_Mode == 2)
    4252:	fe 01       	movw	r30, r28
    4254:	ec 50       	subi	r30, 0x0C	; 12
    4256:	fe 4f       	sbci	r31, 0xFE	; 254
    4258:	80 81       	ld	r24, Z
    425a:	82 30       	cpi	r24, 0x02	; 2
    425c:	11 f0       	breq	.+4      	; 0x4262 <main+0x1b66>
    425e:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <main+0x330c>
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    4268:	fe 01       	movw	r30, r28
    426a:	e5 51       	subi	r30, 0x15	; 21
    426c:	ff 4f       	sbci	r31, 0xFF	; 255
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	a0 e0       	ldi	r26, 0x00	; 0
    4274:	b0 e4       	ldi	r27, 0x40	; 64
    4276:	80 83       	st	Z, r24
    4278:	91 83       	std	Z+1, r25	; 0x01
    427a:	a2 83       	std	Z+2, r26	; 0x02
    427c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    427e:	8e 01       	movw	r16, r28
    4280:	09 51       	subi	r16, 0x19	; 25
    4282:	1f 4f       	sbci	r17, 0xFF	; 255
    4284:	fe 01       	movw	r30, r28
    4286:	e5 51       	subi	r30, 0x15	; 21
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	60 81       	ld	r22, Z
    428c:	71 81       	ldd	r23, Z+1	; 0x01
    428e:	82 81       	ldd	r24, Z+2	; 0x02
    4290:	93 81       	ldd	r25, Z+3	; 0x03
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	4a ef       	ldi	r20, 0xFA	; 250
    4298:	54 e4       	ldi	r21, 0x44	; 68
    429a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	f8 01       	movw	r30, r16
    42a4:	80 83       	st	Z, r24
    42a6:	91 83       	std	Z+1, r25	; 0x01
    42a8:	a2 83       	std	Z+2, r26	; 0x02
    42aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ac:	fe 01       	movw	r30, r28
    42ae:	e9 51       	subi	r30, 0x19	; 25
    42b0:	ff 4f       	sbci	r31, 0xFF	; 255
    42b2:	60 81       	ld	r22, Z
    42b4:	71 81       	ldd	r23, Z+1	; 0x01
    42b6:	82 81       	ldd	r24, Z+2	; 0x02
    42b8:	93 81       	ldd	r25, Z+3	; 0x03
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	40 e8       	ldi	r20, 0x80	; 128
    42c0:	5f e3       	ldi	r21, 0x3F	; 63
    42c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42c6:	88 23       	and	r24, r24
    42c8:	44 f4       	brge	.+16     	; 0x42da <main+0x1bde>
		__ticks = 1;
    42ca:	fe 01       	movw	r30, r28
    42cc:	eb 51       	subi	r30, 0x1B	; 27
    42ce:	ff 4f       	sbci	r31, 0xFF	; 255
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	91 83       	std	Z+1, r25	; 0x01
    42d6:	80 83       	st	Z, r24
    42d8:	64 c0       	rjmp	.+200    	; 0x43a2 <main+0x1ca6>
	else if (__tmp > 65535)
    42da:	fe 01       	movw	r30, r28
    42dc:	e9 51       	subi	r30, 0x19	; 25
    42de:	ff 4f       	sbci	r31, 0xFF	; 255
    42e0:	60 81       	ld	r22, Z
    42e2:	71 81       	ldd	r23, Z+1	; 0x01
    42e4:	82 81       	ldd	r24, Z+2	; 0x02
    42e6:	93 81       	ldd	r25, Z+3	; 0x03
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	3f ef       	ldi	r19, 0xFF	; 255
    42ec:	4f e7       	ldi	r20, 0x7F	; 127
    42ee:	57 e4       	ldi	r21, 0x47	; 71
    42f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42f4:	18 16       	cp	r1, r24
    42f6:	0c f0       	brlt	.+2      	; 0x42fa <main+0x1bfe>
    42f8:	43 c0       	rjmp	.+134    	; 0x4380 <main+0x1c84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42fa:	fe 01       	movw	r30, r28
    42fc:	e5 51       	subi	r30, 0x15	; 21
    42fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4300:	60 81       	ld	r22, Z
    4302:	71 81       	ldd	r23, Z+1	; 0x01
    4304:	82 81       	ldd	r24, Z+2	; 0x02
    4306:	93 81       	ldd	r25, Z+3	; 0x03
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	40 e2       	ldi	r20, 0x20	; 32
    430e:	51 e4       	ldi	r21, 0x41	; 65
    4310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	8e 01       	movw	r16, r28
    431a:	0b 51       	subi	r16, 0x1B	; 27
    431c:	1f 4f       	sbci	r17, 0xFF	; 255
    431e:	bc 01       	movw	r22, r24
    4320:	cd 01       	movw	r24, r26
    4322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	f8 01       	movw	r30, r16
    432c:	91 83       	std	Z+1, r25	; 0x01
    432e:	80 83       	st	Z, r24
    4330:	1f c0       	rjmp	.+62     	; 0x4370 <main+0x1c74>
    4332:	fe 01       	movw	r30, r28
    4334:	ed 51       	subi	r30, 0x1D	; 29
    4336:	ff 4f       	sbci	r31, 0xFF	; 255
    4338:	88 ec       	ldi	r24, 0xC8	; 200
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	91 83       	std	Z+1, r25	; 0x01
    433e:	80 83       	st	Z, r24
    4340:	fe 01       	movw	r30, r28
    4342:	ed 51       	subi	r30, 0x1D	; 29
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	80 81       	ld	r24, Z
    4348:	91 81       	ldd	r25, Z+1	; 0x01
    434a:	01 97       	sbiw	r24, 0x01	; 1
    434c:	f1 f7       	brne	.-4      	; 0x434a <main+0x1c4e>
    434e:	fe 01       	movw	r30, r28
    4350:	ed 51       	subi	r30, 0x1D	; 29
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	91 83       	std	Z+1, r25	; 0x01
    4356:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4358:	de 01       	movw	r26, r28
    435a:	ab 51       	subi	r26, 0x1B	; 27
    435c:	bf 4f       	sbci	r27, 0xFF	; 255
    435e:	fe 01       	movw	r30, r28
    4360:	eb 51       	subi	r30, 0x1B	; 27
    4362:	ff 4f       	sbci	r31, 0xFF	; 255
    4364:	80 81       	ld	r24, Z
    4366:	91 81       	ldd	r25, Z+1	; 0x01
    4368:	01 97       	sbiw	r24, 0x01	; 1
    436a:	11 96       	adiw	r26, 0x01	; 1
    436c:	9c 93       	st	X, r25
    436e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4370:	fe 01       	movw	r30, r28
    4372:	eb 51       	subi	r30, 0x1B	; 27
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	80 81       	ld	r24, Z
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	d1 f6       	brne	.-76     	; 0x4332 <main+0x1c36>
    437e:	27 c0       	rjmp	.+78     	; 0x43ce <main+0x1cd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4380:	8e 01       	movw	r16, r28
    4382:	0b 51       	subi	r16, 0x1B	; 27
    4384:	1f 4f       	sbci	r17, 0xFF	; 255
    4386:	fe 01       	movw	r30, r28
    4388:	e9 51       	subi	r30, 0x19	; 25
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	60 81       	ld	r22, Z
    438e:	71 81       	ldd	r23, Z+1	; 0x01
    4390:	82 81       	ldd	r24, Z+2	; 0x02
    4392:	93 81       	ldd	r25, Z+3	; 0x03
    4394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	f8 01       	movw	r30, r16
    439e:	91 83       	std	Z+1, r25	; 0x01
    43a0:	80 83       	st	Z, r24
    43a2:	de 01       	movw	r26, r28
    43a4:	af 51       	subi	r26, 0x1F	; 31
    43a6:	bf 4f       	sbci	r27, 0xFF	; 255
    43a8:	fe 01       	movw	r30, r28
    43aa:	eb 51       	subi	r30, 0x1B	; 27
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	80 81       	ld	r24, Z
    43b0:	91 81       	ldd	r25, Z+1	; 0x01
    43b2:	8d 93       	st	X+, r24
    43b4:	9c 93       	st	X, r25
    43b6:	fe 01       	movw	r30, r28
    43b8:	ef 51       	subi	r30, 0x1F	; 31
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	80 81       	ld	r24, Z
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	01 97       	sbiw	r24, 0x01	; 1
    43c2:	f1 f7       	brne	.-4      	; 0x43c0 <main+0x1cc4>
    43c4:	fe 01       	movw	r30, r28
    43c6:	ef 51       	subi	r30, 0x1F	; 31
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	91 83       	std	Z+1, r25	; 0x01
    43cc:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_VoidSendString("Old Pass : ");
    43ce:	8c ed       	ldi	r24, 0xDC	; 220
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_VoidSendString>
			for (u8 i = 0; i<4 ;i++)
    43d6:	fe 01       	movw	r30, r28
    43d8:	e2 52       	subi	r30, 0x22	; 34
    43da:	fe 4f       	sbci	r31, 0xFE	; 254
    43dc:	10 82       	st	Z, r1
    43de:	40 c3       	rjmp	.+1664   	; 0x4a60 <main+0x2364>
			{
				LCD_VoidSendCommand(LCD_CursorON);
    43e0:	8e e0       	ldi	r24, 0x0E	; 14
    43e2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    43e6:	fe 01       	movw	r30, r28
    43e8:	e3 52       	subi	r30, 0x23	; 35
    43ea:	ff 4f       	sbci	r31, 0xFF	; 255
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	a8 e4       	ldi	r26, 0x48	; 72
    43f2:	b3 e4       	ldi	r27, 0x43	; 67
    43f4:	80 83       	st	Z, r24
    43f6:	91 83       	std	Z+1, r25	; 0x01
    43f8:	a2 83       	std	Z+2, r26	; 0x02
    43fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43fc:	8e 01       	movw	r16, r28
    43fe:	07 52       	subi	r16, 0x27	; 39
    4400:	1f 4f       	sbci	r17, 0xFF	; 255
    4402:	fe 01       	movw	r30, r28
    4404:	e3 52       	subi	r30, 0x23	; 35
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	4a ef       	ldi	r20, 0xFA	; 250
    4416:	54 e4       	ldi	r21, 0x44	; 68
    4418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	f8 01       	movw	r30, r16
    4422:	80 83       	st	Z, r24
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	a2 83       	std	Z+2, r26	; 0x02
    4428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    442a:	fe 01       	movw	r30, r28
    442c:	e7 52       	subi	r30, 0x27	; 39
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	60 81       	ld	r22, Z
    4432:	71 81       	ldd	r23, Z+1	; 0x01
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	40 e8       	ldi	r20, 0x80	; 128
    443e:	5f e3       	ldi	r21, 0x3F	; 63
    4440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4444:	88 23       	and	r24, r24
    4446:	44 f4       	brge	.+16     	; 0x4458 <main+0x1d5c>
		__ticks = 1;
    4448:	fe 01       	movw	r30, r28
    444a:	e9 52       	subi	r30, 0x29	; 41
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	91 83       	std	Z+1, r25	; 0x01
    4454:	80 83       	st	Z, r24
    4456:	64 c0       	rjmp	.+200    	; 0x4520 <main+0x1e24>
	else if (__tmp > 65535)
    4458:	fe 01       	movw	r30, r28
    445a:	e7 52       	subi	r30, 0x27	; 39
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	60 81       	ld	r22, Z
    4460:	71 81       	ldd	r23, Z+1	; 0x01
    4462:	82 81       	ldd	r24, Z+2	; 0x02
    4464:	93 81       	ldd	r25, Z+3	; 0x03
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	3f ef       	ldi	r19, 0xFF	; 255
    446a:	4f e7       	ldi	r20, 0x7F	; 127
    446c:	57 e4       	ldi	r21, 0x47	; 71
    446e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4472:	18 16       	cp	r1, r24
    4474:	0c f0       	brlt	.+2      	; 0x4478 <main+0x1d7c>
    4476:	43 c0       	rjmp	.+134    	; 0x44fe <main+0x1e02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4478:	fe 01       	movw	r30, r28
    447a:	e3 52       	subi	r30, 0x23	; 35
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	60 81       	ld	r22, Z
    4480:	71 81       	ldd	r23, Z+1	; 0x01
    4482:	82 81       	ldd	r24, Z+2	; 0x02
    4484:	93 81       	ldd	r25, Z+3	; 0x03
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	40 e2       	ldi	r20, 0x20	; 32
    448c:	51 e4       	ldi	r21, 0x41	; 65
    448e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	8e 01       	movw	r16, r28
    4498:	09 52       	subi	r16, 0x29	; 41
    449a:	1f 4f       	sbci	r17, 0xFF	; 255
    449c:	bc 01       	movw	r22, r24
    449e:	cd 01       	movw	r24, r26
    44a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a4:	dc 01       	movw	r26, r24
    44a6:	cb 01       	movw	r24, r22
    44a8:	f8 01       	movw	r30, r16
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	80 83       	st	Z, r24
    44ae:	1f c0       	rjmp	.+62     	; 0x44ee <main+0x1df2>
    44b0:	fe 01       	movw	r30, r28
    44b2:	eb 52       	subi	r30, 0x2B	; 43
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	88 ec       	ldi	r24, 0xC8	; 200
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	91 83       	std	Z+1, r25	; 0x01
    44bc:	80 83       	st	Z, r24
    44be:	fe 01       	movw	r30, r28
    44c0:	eb 52       	subi	r30, 0x2B	; 43
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	80 81       	ld	r24, Z
    44c6:	91 81       	ldd	r25, Z+1	; 0x01
    44c8:	01 97       	sbiw	r24, 0x01	; 1
    44ca:	f1 f7       	brne	.-4      	; 0x44c8 <main+0x1dcc>
    44cc:	fe 01       	movw	r30, r28
    44ce:	eb 52       	subi	r30, 0x2B	; 43
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	91 83       	std	Z+1, r25	; 0x01
    44d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d6:	de 01       	movw	r26, r28
    44d8:	a9 52       	subi	r26, 0x29	; 41
    44da:	bf 4f       	sbci	r27, 0xFF	; 255
    44dc:	fe 01       	movw	r30, r28
    44de:	e9 52       	subi	r30, 0x29	; 41
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	80 81       	ld	r24, Z
    44e4:	91 81       	ldd	r25, Z+1	; 0x01
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	11 96       	adiw	r26, 0x01	; 1
    44ea:	9c 93       	st	X, r25
    44ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ee:	fe 01       	movw	r30, r28
    44f0:	e9 52       	subi	r30, 0x29	; 41
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	00 97       	sbiw	r24, 0x00	; 0
    44fa:	d1 f6       	brne	.-76     	; 0x44b0 <main+0x1db4>
    44fc:	27 c0       	rjmp	.+78     	; 0x454c <main+0x1e50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44fe:	8e 01       	movw	r16, r28
    4500:	09 52       	subi	r16, 0x29	; 41
    4502:	1f 4f       	sbci	r17, 0xFF	; 255
    4504:	fe 01       	movw	r30, r28
    4506:	e7 52       	subi	r30, 0x27	; 39
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	60 81       	ld	r22, Z
    450c:	71 81       	ldd	r23, Z+1	; 0x01
    450e:	82 81       	ldd	r24, Z+2	; 0x02
    4510:	93 81       	ldd	r25, Z+3	; 0x03
    4512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4516:	dc 01       	movw	r26, r24
    4518:	cb 01       	movw	r24, r22
    451a:	f8 01       	movw	r30, r16
    451c:	91 83       	std	Z+1, r25	; 0x01
    451e:	80 83       	st	Z, r24
    4520:	de 01       	movw	r26, r28
    4522:	ad 52       	subi	r26, 0x2D	; 45
    4524:	bf 4f       	sbci	r27, 0xFF	; 255
    4526:	fe 01       	movw	r30, r28
    4528:	e9 52       	subi	r30, 0x29	; 41
    452a:	ff 4f       	sbci	r31, 0xFF	; 255
    452c:	80 81       	ld	r24, Z
    452e:	91 81       	ldd	r25, Z+1	; 0x01
    4530:	8d 93       	st	X+, r24
    4532:	9c 93       	st	X, r25
    4534:	fe 01       	movw	r30, r28
    4536:	ed 52       	subi	r30, 0x2D	; 45
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	80 81       	ld	r24, Z
    453c:	91 81       	ldd	r25, Z+1	; 0x01
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	f1 f7       	brne	.-4      	; 0x453e <main+0x1e42>
    4542:	fe 01       	movw	r30, r28
    4544:	ed 52       	subi	r30, 0x2D	; 45
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	91 83       	std	Z+1, r25	; 0x01
    454a:	80 83       	st	Z, r24
				_delay_ms(200);
				LCD_VoidSendCommand(LCD_CURSOROFF);
    454c:	8c e0       	ldi	r24, 0x0C	; 12
    454e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>

				Key_Value = Keypad_GetPressedKey();
    4552:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Keypad_GetPressedKey>
    4556:	fe 01       	movw	r30, r28
    4558:	eb 50       	subi	r30, 0x0B	; 11
    455a:	fe 4f       	sbci	r31, 0xFE	; 254
    455c:	80 83       	st	Z, r24
				if ((Key_Value >= 0) && (Key_Value <= 9))
    455e:	fe 01       	movw	r30, r28
    4560:	eb 50       	subi	r30, 0x0B	; 11
    4562:	fe 4f       	sbci	r31, 0xFE	; 254
    4564:	80 81       	ld	r24, Z
    4566:	8a 30       	cpi	r24, 0x0A	; 10
    4568:	08 f0       	brcs	.+2      	; 0x456c <main+0x1e70>
    456a:	09 c1       	rjmp	.+530    	; 0x477e <main+0x2082>
				{
					LCD_VoidSendNumber(Key_Value);
    456c:	fe 01       	movw	r30, r28
    456e:	eb 50       	subi	r30, 0x0B	; 11
    4570:	fe 4f       	sbci	r31, 0xFE	; 254
    4572:	80 81       	ld	r24, Z
    4574:	88 2f       	mov	r24, r24
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	a0 e0       	ldi	r26, 0x00	; 0
    457a:	b0 e0       	ldi	r27, 0x00	; 0
    457c:	bc 01       	movw	r22, r24
    457e:	cd 01       	movw	r24, r26
    4580:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_VoidSendNumber>
    4584:	fe 01       	movw	r30, r28
    4586:	e1 53       	subi	r30, 0x31	; 49
    4588:	ff 4f       	sbci	r31, 0xFF	; 255
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	a8 e4       	ldi	r26, 0x48	; 72
    4590:	b3 e4       	ldi	r27, 0x43	; 67
    4592:	80 83       	st	Z, r24
    4594:	91 83       	std	Z+1, r25	; 0x01
    4596:	a2 83       	std	Z+2, r26	; 0x02
    4598:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    459a:	8e 01       	movw	r16, r28
    459c:	05 53       	subi	r16, 0x35	; 53
    459e:	1f 4f       	sbci	r17, 0xFF	; 255
    45a0:	fe 01       	movw	r30, r28
    45a2:	e1 53       	subi	r30, 0x31	; 49
    45a4:	ff 4f       	sbci	r31, 0xFF	; 255
    45a6:	60 81       	ld	r22, Z
    45a8:	71 81       	ldd	r23, Z+1	; 0x01
    45aa:	82 81       	ldd	r24, Z+2	; 0x02
    45ac:	93 81       	ldd	r25, Z+3	; 0x03
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	4a ef       	ldi	r20, 0xFA	; 250
    45b4:	54 e4       	ldi	r21, 0x44	; 68
    45b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ba:	dc 01       	movw	r26, r24
    45bc:	cb 01       	movw	r24, r22
    45be:	f8 01       	movw	r30, r16
    45c0:	80 83       	st	Z, r24
    45c2:	91 83       	std	Z+1, r25	; 0x01
    45c4:	a2 83       	std	Z+2, r26	; 0x02
    45c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45c8:	fe 01       	movw	r30, r28
    45ca:	e5 53       	subi	r30, 0x35	; 53
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	60 81       	ld	r22, Z
    45d0:	71 81       	ldd	r23, Z+1	; 0x01
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	93 81       	ldd	r25, Z+3	; 0x03
    45d6:	20 e0       	ldi	r18, 0x00	; 0
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	40 e8       	ldi	r20, 0x80	; 128
    45dc:	5f e3       	ldi	r21, 0x3F	; 63
    45de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45e2:	88 23       	and	r24, r24
    45e4:	44 f4       	brge	.+16     	; 0x45f6 <main+0x1efa>
		__ticks = 1;
    45e6:	fe 01       	movw	r30, r28
    45e8:	e7 53       	subi	r30, 0x37	; 55
    45ea:	ff 4f       	sbci	r31, 0xFF	; 255
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	91 83       	std	Z+1, r25	; 0x01
    45f2:	80 83       	st	Z, r24
    45f4:	64 c0       	rjmp	.+200    	; 0x46be <main+0x1fc2>
	else if (__tmp > 65535)
    45f6:	fe 01       	movw	r30, r28
    45f8:	e5 53       	subi	r30, 0x35	; 53
    45fa:	ff 4f       	sbci	r31, 0xFF	; 255
    45fc:	60 81       	ld	r22, Z
    45fe:	71 81       	ldd	r23, Z+1	; 0x01
    4600:	82 81       	ldd	r24, Z+2	; 0x02
    4602:	93 81       	ldd	r25, Z+3	; 0x03
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	3f ef       	ldi	r19, 0xFF	; 255
    4608:	4f e7       	ldi	r20, 0x7F	; 127
    460a:	57 e4       	ldi	r21, 0x47	; 71
    460c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4610:	18 16       	cp	r1, r24
    4612:	0c f0       	brlt	.+2      	; 0x4616 <main+0x1f1a>
    4614:	43 c0       	rjmp	.+134    	; 0x469c <main+0x1fa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4616:	fe 01       	movw	r30, r28
    4618:	e1 53       	subi	r30, 0x31	; 49
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e2       	ldi	r20, 0x20	; 32
    462a:	51 e4       	ldi	r21, 0x41	; 65
    462c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	8e 01       	movw	r16, r28
    4636:	07 53       	subi	r16, 0x37	; 55
    4638:	1f 4f       	sbci	r17, 0xFF	; 255
    463a:	bc 01       	movw	r22, r24
    463c:	cd 01       	movw	r24, r26
    463e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	f8 01       	movw	r30, r16
    4648:	91 83       	std	Z+1, r25	; 0x01
    464a:	80 83       	st	Z, r24
    464c:	1f c0       	rjmp	.+62     	; 0x468c <main+0x1f90>
    464e:	fe 01       	movw	r30, r28
    4650:	e9 53       	subi	r30, 0x39	; 57
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	88 ec       	ldi	r24, 0xC8	; 200
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	91 83       	std	Z+1, r25	; 0x01
    465a:	80 83       	st	Z, r24
    465c:	fe 01       	movw	r30, r28
    465e:	e9 53       	subi	r30, 0x39	; 57
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	80 81       	ld	r24, Z
    4664:	91 81       	ldd	r25, Z+1	; 0x01
    4666:	01 97       	sbiw	r24, 0x01	; 1
    4668:	f1 f7       	brne	.-4      	; 0x4666 <main+0x1f6a>
    466a:	fe 01       	movw	r30, r28
    466c:	e9 53       	subi	r30, 0x39	; 57
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	91 83       	std	Z+1, r25	; 0x01
    4672:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4674:	de 01       	movw	r26, r28
    4676:	a7 53       	subi	r26, 0x37	; 55
    4678:	bf 4f       	sbci	r27, 0xFF	; 255
    467a:	fe 01       	movw	r30, r28
    467c:	e7 53       	subi	r30, 0x37	; 55
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	80 81       	ld	r24, Z
    4682:	91 81       	ldd	r25, Z+1	; 0x01
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	11 96       	adiw	r26, 0x01	; 1
    4688:	9c 93       	st	X, r25
    468a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    468c:	fe 01       	movw	r30, r28
    468e:	e7 53       	subi	r30, 0x37	; 55
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	80 81       	ld	r24, Z
    4694:	91 81       	ldd	r25, Z+1	; 0x01
    4696:	00 97       	sbiw	r24, 0x00	; 0
    4698:	d1 f6       	brne	.-76     	; 0x464e <main+0x1f52>
    469a:	27 c0       	rjmp	.+78     	; 0x46ea <main+0x1fee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    469c:	8e 01       	movw	r16, r28
    469e:	07 53       	subi	r16, 0x37	; 55
    46a0:	1f 4f       	sbci	r17, 0xFF	; 255
    46a2:	fe 01       	movw	r30, r28
    46a4:	e5 53       	subi	r30, 0x35	; 53
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	60 81       	ld	r22, Z
    46aa:	71 81       	ldd	r23, Z+1	; 0x01
    46ac:	82 81       	ldd	r24, Z+2	; 0x02
    46ae:	93 81       	ldd	r25, Z+3	; 0x03
    46b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b4:	dc 01       	movw	r26, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	f8 01       	movw	r30, r16
    46ba:	91 83       	std	Z+1, r25	; 0x01
    46bc:	80 83       	st	Z, r24
    46be:	de 01       	movw	r26, r28
    46c0:	ab 53       	subi	r26, 0x3B	; 59
    46c2:	bf 4f       	sbci	r27, 0xFF	; 255
    46c4:	fe 01       	movw	r30, r28
    46c6:	e7 53       	subi	r30, 0x37	; 55
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	80 81       	ld	r24, Z
    46cc:	91 81       	ldd	r25, Z+1	; 0x01
    46ce:	8d 93       	st	X+, r24
    46d0:	9c 93       	st	X, r25
    46d2:	fe 01       	movw	r30, r28
    46d4:	eb 53       	subi	r30, 0x3B	; 59
    46d6:	ff 4f       	sbci	r31, 0xFF	; 255
    46d8:	80 81       	ld	r24, Z
    46da:	91 81       	ldd	r25, Z+1	; 0x01
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <main+0x1fe0>
    46e0:	fe 01       	movw	r30, r28
    46e2:	eb 53       	subi	r30, 0x3B	; 59
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	91 83       	std	Z+1, r25	; 0x01
    46e8:	80 83       	st	Z, r24
					_delay_ms(200);
					LCD_VoidSendStringFromPos("*",0,11+i);
    46ea:	fe 01       	movw	r30, r28
    46ec:	e2 52       	subi	r30, 0x22	; 34
    46ee:	fe 4f       	sbci	r31, 0xFE	; 254
    46f0:	80 81       	ld	r24, Z
    46f2:	28 2f       	mov	r18, r24
    46f4:	25 5f       	subi	r18, 0xF5	; 245
    46f6:	84 ea       	ldi	r24, 0xA4	; 164
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	60 e0       	ldi	r22, 0x00	; 0
    46fc:	42 2f       	mov	r20, r18
    46fe:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
					LCD_VoidSendStringFromPos("Invalid Input",0,1);
					_delay_ms(500);
					break;
				}
				/*10+2 120+3 1230+4 12340*/
				Comp_Pass += Key_Value;
    4702:	fe 01       	movw	r30, r28
    4704:	eb 50       	subi	r30, 0x0B	; 11
    4706:	fe 4f       	sbci	r31, 0xFE	; 254
    4708:	80 81       	ld	r24, Z
    470a:	28 2f       	mov	r18, r24
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	40 e0       	ldi	r20, 0x00	; 0
    4710:	50 e0       	ldi	r21, 0x00	; 0
    4712:	be 01       	movw	r22, r28
    4714:	60 52       	subi	r22, 0x20	; 32
    4716:	7e 4f       	sbci	r23, 0xFE	; 254
    4718:	fe 01       	movw	r30, r28
    471a:	e0 52       	subi	r30, 0x20	; 32
    471c:	fe 4f       	sbci	r31, 0xFE	; 254
    471e:	80 81       	ld	r24, Z
    4720:	91 81       	ldd	r25, Z+1	; 0x01
    4722:	a2 81       	ldd	r26, Z+2	; 0x02
    4724:	b3 81       	ldd	r27, Z+3	; 0x03
    4726:	82 0f       	add	r24, r18
    4728:	93 1f       	adc	r25, r19
    472a:	a4 1f       	adc	r26, r20
    472c:	b5 1f       	adc	r27, r21
    472e:	fb 01       	movw	r30, r22
    4730:	80 83       	st	Z, r24
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	a2 83       	std	Z+2, r26	; 0x02
    4736:	b3 83       	std	Z+3, r27	; 0x03
				Comp_Pass = Comp_Pass * 10;
    4738:	8e 01       	movw	r16, r28
    473a:	00 52       	subi	r16, 0x20	; 32
    473c:	1e 4f       	sbci	r17, 0xFE	; 254
    473e:	fe 01       	movw	r30, r28
    4740:	e0 52       	subi	r30, 0x20	; 32
    4742:	fe 4f       	sbci	r31, 0xFE	; 254
    4744:	80 81       	ld	r24, Z
    4746:	91 81       	ldd	r25, Z+1	; 0x01
    4748:	a2 81       	ldd	r26, Z+2	; 0x02
    474a:	b3 81       	ldd	r27, Z+3	; 0x03
    474c:	2a e0       	ldi	r18, 0x0A	; 10
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	40 e0       	ldi	r20, 0x00	; 0
    4752:	50 e0       	ldi	r21, 0x00	; 0
    4754:	bc 01       	movw	r22, r24
    4756:	cd 01       	movw	r24, r26
    4758:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsi3>
    475c:	dc 01       	movw	r26, r24
    475e:	cb 01       	movw	r24, r22
    4760:	f8 01       	movw	r30, r16
    4762:	80 83       	st	Z, r24
    4764:	91 83       	std	Z+1, r25	; 0x01
    4766:	a2 83       	std	Z+2, r26	; 0x02
    4768:	b3 83       	std	Z+3, r27	; 0x03
		else if (Chosen_Mode == 2)
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
			_delay_ms(2);
			LCD_VoidSendString("Old Pass : ");
			for (u8 i = 0; i<4 ;i++)
    476a:	de 01       	movw	r26, r28
    476c:	a2 52       	subi	r26, 0x22	; 34
    476e:	be 4f       	sbci	r27, 0xFE	; 254
    4770:	fe 01       	movw	r30, r28
    4772:	e2 52       	subi	r30, 0x22	; 34
    4774:	fe 4f       	sbci	r31, 0xFE	; 254
    4776:	80 81       	ld	r24, Z
    4778:	8f 5f       	subi	r24, 0xFF	; 255
    477a:	8c 93       	st	X, r24
    477c:	71 c1       	rjmp	.+738    	; 0x4a60 <main+0x2364>
					_delay_ms(200);
					LCD_VoidSendStringFromPos("*",0,11+i);
				}
				else
				{
					LCD_VoidSendCommand(LCD_ClearDisplay);
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    4784:	fe 01       	movw	r30, r28
    4786:	ef 53       	subi	r30, 0x3F	; 63
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	a0 e0       	ldi	r26, 0x00	; 0
    4790:	b0 e4       	ldi	r27, 0x40	; 64
    4792:	80 83       	st	Z, r24
    4794:	91 83       	std	Z+1, r25	; 0x01
    4796:	a2 83       	std	Z+2, r26	; 0x02
    4798:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479a:	8e 01       	movw	r16, r28
    479c:	03 54       	subi	r16, 0x43	; 67
    479e:	1f 4f       	sbci	r17, 0xFF	; 255
    47a0:	fe 01       	movw	r30, r28
    47a2:	ef 53       	subi	r30, 0x3F	; 63
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	60 81       	ld	r22, Z
    47a8:	71 81       	ldd	r23, Z+1	; 0x01
    47aa:	82 81       	ldd	r24, Z+2	; 0x02
    47ac:	93 81       	ldd	r25, Z+3	; 0x03
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	4a ef       	ldi	r20, 0xFA	; 250
    47b4:	54 e4       	ldi	r21, 0x44	; 68
    47b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	f8 01       	movw	r30, r16
    47c0:	80 83       	st	Z, r24
    47c2:	91 83       	std	Z+1, r25	; 0x01
    47c4:	a2 83       	std	Z+2, r26	; 0x02
    47c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47c8:	fe 01       	movw	r30, r28
    47ca:	e3 54       	subi	r30, 0x43	; 67
    47cc:	ff 4f       	sbci	r31, 0xFF	; 255
    47ce:	60 81       	ld	r22, Z
    47d0:	71 81       	ldd	r23, Z+1	; 0x01
    47d2:	82 81       	ldd	r24, Z+2	; 0x02
    47d4:	93 81       	ldd	r25, Z+3	; 0x03
    47d6:	20 e0       	ldi	r18, 0x00	; 0
    47d8:	30 e0       	ldi	r19, 0x00	; 0
    47da:	40 e8       	ldi	r20, 0x80	; 128
    47dc:	5f e3       	ldi	r21, 0x3F	; 63
    47de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47e2:	88 23       	and	r24, r24
    47e4:	44 f4       	brge	.+16     	; 0x47f6 <main+0x20fa>
		__ticks = 1;
    47e6:	fe 01       	movw	r30, r28
    47e8:	e5 54       	subi	r30, 0x45	; 69
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	91 83       	std	Z+1, r25	; 0x01
    47f2:	80 83       	st	Z, r24
    47f4:	64 c0       	rjmp	.+200    	; 0x48be <main+0x21c2>
	else if (__tmp > 65535)
    47f6:	fe 01       	movw	r30, r28
    47f8:	e3 54       	subi	r30, 0x43	; 67
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	60 81       	ld	r22, Z
    47fe:	71 81       	ldd	r23, Z+1	; 0x01
    4800:	82 81       	ldd	r24, Z+2	; 0x02
    4802:	93 81       	ldd	r25, Z+3	; 0x03
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	3f ef       	ldi	r19, 0xFF	; 255
    4808:	4f e7       	ldi	r20, 0x7F	; 127
    480a:	57 e4       	ldi	r21, 0x47	; 71
    480c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4810:	18 16       	cp	r1, r24
    4812:	0c f0       	brlt	.+2      	; 0x4816 <main+0x211a>
    4814:	43 c0       	rjmp	.+134    	; 0x489c <main+0x21a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4816:	fe 01       	movw	r30, r28
    4818:	ef 53       	subi	r30, 0x3F	; 63
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	60 81       	ld	r22, Z
    481e:	71 81       	ldd	r23, Z+1	; 0x01
    4820:	82 81       	ldd	r24, Z+2	; 0x02
    4822:	93 81       	ldd	r25, Z+3	; 0x03
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	40 e2       	ldi	r20, 0x20	; 32
    482a:	51 e4       	ldi	r21, 0x41	; 65
    482c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	8e 01       	movw	r16, r28
    4836:	05 54       	subi	r16, 0x45	; 69
    4838:	1f 4f       	sbci	r17, 0xFF	; 255
    483a:	bc 01       	movw	r22, r24
    483c:	cd 01       	movw	r24, r26
    483e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	f8 01       	movw	r30, r16
    4848:	91 83       	std	Z+1, r25	; 0x01
    484a:	80 83       	st	Z, r24
    484c:	1f c0       	rjmp	.+62     	; 0x488c <main+0x2190>
    484e:	fe 01       	movw	r30, r28
    4850:	e7 54       	subi	r30, 0x47	; 71
    4852:	ff 4f       	sbci	r31, 0xFF	; 255
    4854:	88 ec       	ldi	r24, 0xC8	; 200
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	91 83       	std	Z+1, r25	; 0x01
    485a:	80 83       	st	Z, r24
    485c:	fe 01       	movw	r30, r28
    485e:	e7 54       	subi	r30, 0x47	; 71
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	80 81       	ld	r24, Z
    4864:	91 81       	ldd	r25, Z+1	; 0x01
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	f1 f7       	brne	.-4      	; 0x4866 <main+0x216a>
    486a:	fe 01       	movw	r30, r28
    486c:	e7 54       	subi	r30, 0x47	; 71
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	91 83       	std	Z+1, r25	; 0x01
    4872:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4874:	de 01       	movw	r26, r28
    4876:	a5 54       	subi	r26, 0x45	; 69
    4878:	bf 4f       	sbci	r27, 0xFF	; 255
    487a:	fe 01       	movw	r30, r28
    487c:	e5 54       	subi	r30, 0x45	; 69
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	80 81       	ld	r24, Z
    4882:	91 81       	ldd	r25, Z+1	; 0x01
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	11 96       	adiw	r26, 0x01	; 1
    4888:	9c 93       	st	X, r25
    488a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    488c:	fe 01       	movw	r30, r28
    488e:	e5 54       	subi	r30, 0x45	; 69
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	80 81       	ld	r24, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	00 97       	sbiw	r24, 0x00	; 0
    4898:	d1 f6       	brne	.-76     	; 0x484e <main+0x2152>
    489a:	27 c0       	rjmp	.+78     	; 0x48ea <main+0x21ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    489c:	8e 01       	movw	r16, r28
    489e:	05 54       	subi	r16, 0x45	; 69
    48a0:	1f 4f       	sbci	r17, 0xFF	; 255
    48a2:	fe 01       	movw	r30, r28
    48a4:	e3 54       	subi	r30, 0x43	; 67
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	60 81       	ld	r22, Z
    48aa:	71 81       	ldd	r23, Z+1	; 0x01
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	93 81       	ldd	r25, Z+3	; 0x03
    48b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	f8 01       	movw	r30, r16
    48ba:	91 83       	std	Z+1, r25	; 0x01
    48bc:	80 83       	st	Z, r24
    48be:	de 01       	movw	r26, r28
    48c0:	a9 54       	subi	r26, 0x49	; 73
    48c2:	bf 4f       	sbci	r27, 0xFF	; 255
    48c4:	fe 01       	movw	r30, r28
    48c6:	e5 54       	subi	r30, 0x45	; 69
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	80 81       	ld	r24, Z
    48cc:	91 81       	ldd	r25, Z+1	; 0x01
    48ce:	8d 93       	st	X+, r24
    48d0:	9c 93       	st	X, r25
    48d2:	fe 01       	movw	r30, r28
    48d4:	e9 54       	subi	r30, 0x49	; 73
    48d6:	ff 4f       	sbci	r31, 0xFF	; 255
    48d8:	80 81       	ld	r24, Z
    48da:	91 81       	ldd	r25, Z+1	; 0x01
    48dc:	01 97       	sbiw	r24, 0x01	; 1
    48de:	f1 f7       	brne	.-4      	; 0x48dc <main+0x21e0>
    48e0:	fe 01       	movw	r30, r28
    48e2:	e9 54       	subi	r30, 0x49	; 73
    48e4:	ff 4f       	sbci	r31, 0xFF	; 255
    48e6:	91 83       	std	Z+1, r25	; 0x01
    48e8:	80 83       	st	Z, r24
					_delay_ms(2);
					LCD_VoidSendStringFromPos("Invalid Input",0,1);
    48ea:	86 ea       	ldi	r24, 0xA6	; 166
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	60 e0       	ldi	r22, 0x00	; 0
    48f0:	41 e0       	ldi	r20, 0x01	; 1
    48f2:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
    48f6:	fe 01       	movw	r30, r28
    48f8:	ed 54       	subi	r30, 0x4D	; 77
    48fa:	ff 4f       	sbci	r31, 0xFF	; 255
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	aa ef       	ldi	r26, 0xFA	; 250
    4902:	b3 e4       	ldi	r27, 0x43	; 67
    4904:	80 83       	st	Z, r24
    4906:	91 83       	std	Z+1, r25	; 0x01
    4908:	a2 83       	std	Z+2, r26	; 0x02
    490a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    490c:	8e 01       	movw	r16, r28
    490e:	01 55       	subi	r16, 0x51	; 81
    4910:	1f 4f       	sbci	r17, 0xFF	; 255
    4912:	fe 01       	movw	r30, r28
    4914:	ed 54       	subi	r30, 0x4D	; 77
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	60 81       	ld	r22, Z
    491a:	71 81       	ldd	r23, Z+1	; 0x01
    491c:	82 81       	ldd	r24, Z+2	; 0x02
    491e:	93 81       	ldd	r25, Z+3	; 0x03
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	4a ef       	ldi	r20, 0xFA	; 250
    4926:	54 e4       	ldi	r21, 0x44	; 68
    4928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492c:	dc 01       	movw	r26, r24
    492e:	cb 01       	movw	r24, r22
    4930:	f8 01       	movw	r30, r16
    4932:	80 83       	st	Z, r24
    4934:	91 83       	std	Z+1, r25	; 0x01
    4936:	a2 83       	std	Z+2, r26	; 0x02
    4938:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    493a:	fe 01       	movw	r30, r28
    493c:	e1 55       	subi	r30, 0x51	; 81
    493e:	ff 4f       	sbci	r31, 0xFF	; 255
    4940:	60 81       	ld	r22, Z
    4942:	71 81       	ldd	r23, Z+1	; 0x01
    4944:	82 81       	ldd	r24, Z+2	; 0x02
    4946:	93 81       	ldd	r25, Z+3	; 0x03
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	40 e8       	ldi	r20, 0x80	; 128
    494e:	5f e3       	ldi	r21, 0x3F	; 63
    4950:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4954:	88 23       	and	r24, r24
    4956:	44 f4       	brge	.+16     	; 0x4968 <main+0x226c>
		__ticks = 1;
    4958:	fe 01       	movw	r30, r28
    495a:	e3 55       	subi	r30, 0x53	; 83
    495c:	ff 4f       	sbci	r31, 0xFF	; 255
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	91 83       	std	Z+1, r25	; 0x01
    4964:	80 83       	st	Z, r24
    4966:	64 c0       	rjmp	.+200    	; 0x4a30 <main+0x2334>
	else if (__tmp > 65535)
    4968:	fe 01       	movw	r30, r28
    496a:	e1 55       	subi	r30, 0x51	; 81
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	60 81       	ld	r22, Z
    4970:	71 81       	ldd	r23, Z+1	; 0x01
    4972:	82 81       	ldd	r24, Z+2	; 0x02
    4974:	93 81       	ldd	r25, Z+3	; 0x03
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	3f ef       	ldi	r19, 0xFF	; 255
    497a:	4f e7       	ldi	r20, 0x7F	; 127
    497c:	57 e4       	ldi	r21, 0x47	; 71
    497e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4982:	18 16       	cp	r1, r24
    4984:	0c f0       	brlt	.+2      	; 0x4988 <main+0x228c>
    4986:	43 c0       	rjmp	.+134    	; 0x4a0e <main+0x2312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4988:	fe 01       	movw	r30, r28
    498a:	ed 54       	subi	r30, 0x4D	; 77
    498c:	ff 4f       	sbci	r31, 0xFF	; 255
    498e:	60 81       	ld	r22, Z
    4990:	71 81       	ldd	r23, Z+1	; 0x01
    4992:	82 81       	ldd	r24, Z+2	; 0x02
    4994:	93 81       	ldd	r25, Z+3	; 0x03
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	40 e2       	ldi	r20, 0x20	; 32
    499c:	51 e4       	ldi	r21, 0x41	; 65
    499e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	8e 01       	movw	r16, r28
    49a8:	03 55       	subi	r16, 0x53	; 83
    49aa:	1f 4f       	sbci	r17, 0xFF	; 255
    49ac:	bc 01       	movw	r22, r24
    49ae:	cd 01       	movw	r24, r26
    49b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b4:	dc 01       	movw	r26, r24
    49b6:	cb 01       	movw	r24, r22
    49b8:	f8 01       	movw	r30, r16
    49ba:	91 83       	std	Z+1, r25	; 0x01
    49bc:	80 83       	st	Z, r24
    49be:	1f c0       	rjmp	.+62     	; 0x49fe <main+0x2302>
    49c0:	fe 01       	movw	r30, r28
    49c2:	e5 55       	subi	r30, 0x55	; 85
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	88 ec       	ldi	r24, 0xC8	; 200
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	91 83       	std	Z+1, r25	; 0x01
    49cc:	80 83       	st	Z, r24
    49ce:	fe 01       	movw	r30, r28
    49d0:	e5 55       	subi	r30, 0x55	; 85
    49d2:	ff 4f       	sbci	r31, 0xFF	; 255
    49d4:	80 81       	ld	r24, Z
    49d6:	91 81       	ldd	r25, Z+1	; 0x01
    49d8:	01 97       	sbiw	r24, 0x01	; 1
    49da:	f1 f7       	brne	.-4      	; 0x49d8 <main+0x22dc>
    49dc:	fe 01       	movw	r30, r28
    49de:	e5 55       	subi	r30, 0x55	; 85
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	91 83       	std	Z+1, r25	; 0x01
    49e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49e6:	de 01       	movw	r26, r28
    49e8:	a3 55       	subi	r26, 0x53	; 83
    49ea:	bf 4f       	sbci	r27, 0xFF	; 255
    49ec:	fe 01       	movw	r30, r28
    49ee:	e3 55       	subi	r30, 0x53	; 83
    49f0:	ff 4f       	sbci	r31, 0xFF	; 255
    49f2:	80 81       	ld	r24, Z
    49f4:	91 81       	ldd	r25, Z+1	; 0x01
    49f6:	01 97       	sbiw	r24, 0x01	; 1
    49f8:	11 96       	adiw	r26, 0x01	; 1
    49fa:	9c 93       	st	X, r25
    49fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49fe:	fe 01       	movw	r30, r28
    4a00:	e3 55       	subi	r30, 0x53	; 83
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	80 81       	ld	r24, Z
    4a06:	91 81       	ldd	r25, Z+1	; 0x01
    4a08:	00 97       	sbiw	r24, 0x00	; 0
    4a0a:	d1 f6       	brne	.-76     	; 0x49c0 <main+0x22c4>
    4a0c:	30 c0       	rjmp	.+96     	; 0x4a6e <main+0x2372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a0e:	8e 01       	movw	r16, r28
    4a10:	03 55       	subi	r16, 0x53	; 83
    4a12:	1f 4f       	sbci	r17, 0xFF	; 255
    4a14:	fe 01       	movw	r30, r28
    4a16:	e1 55       	subi	r30, 0x51	; 81
    4a18:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1a:	60 81       	ld	r22, Z
    4a1c:	71 81       	ldd	r23, Z+1	; 0x01
    4a1e:	82 81       	ldd	r24, Z+2	; 0x02
    4a20:	93 81       	ldd	r25, Z+3	; 0x03
    4a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a26:	dc 01       	movw	r26, r24
    4a28:	cb 01       	movw	r24, r22
    4a2a:	f8 01       	movw	r30, r16
    4a2c:	91 83       	std	Z+1, r25	; 0x01
    4a2e:	80 83       	st	Z, r24
    4a30:	de 01       	movw	r26, r28
    4a32:	a7 55       	subi	r26, 0x57	; 87
    4a34:	bf 4f       	sbci	r27, 0xFF	; 255
    4a36:	fe 01       	movw	r30, r28
    4a38:	e3 55       	subi	r30, 0x53	; 83
    4a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3c:	80 81       	ld	r24, Z
    4a3e:	91 81       	ldd	r25, Z+1	; 0x01
    4a40:	11 96       	adiw	r26, 0x01	; 1
    4a42:	9c 93       	st	X, r25
    4a44:	8e 93       	st	-X, r24
    4a46:	fe 01       	movw	r30, r28
    4a48:	e7 55       	subi	r30, 0x57	; 87
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	80 81       	ld	r24, Z
    4a4e:	91 81       	ldd	r25, Z+1	; 0x01
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	f1 f7       	brne	.-4      	; 0x4a50 <main+0x2354>
    4a54:	fe 01       	movw	r30, r28
    4a56:	e7 55       	subi	r30, 0x57	; 87
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	91 83       	std	Z+1, r25	; 0x01
    4a5c:	80 83       	st	Z, r24
    4a5e:	07 c0       	rjmp	.+14     	; 0x4a6e <main+0x2372>
		else if (Chosen_Mode == 2)
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
			_delay_ms(2);
			LCD_VoidSendString("Old Pass : ");
			for (u8 i = 0; i<4 ;i++)
    4a60:	fe 01       	movw	r30, r28
    4a62:	e2 52       	subi	r30, 0x22	; 34
    4a64:	fe 4f       	sbci	r31, 0xFE	; 254
    4a66:	80 81       	ld	r24, Z
    4a68:	84 30       	cpi	r24, 0x04	; 4
    4a6a:	08 f4       	brcc	.+2      	; 0x4a6e <main+0x2372>
    4a6c:	b9 cc       	rjmp	.-1678   	; 0x43e0 <main+0x1ce4>
				/*10+2 120+3 1230+4 12340*/
				Comp_Pass += Key_Value;
				Comp_Pass = Comp_Pass * 10;
			}
			/*12340->1234*/
			Comp_Pass = Comp_Pass / 10;
    4a6e:	8e 01       	movw	r16, r28
    4a70:	00 52       	subi	r16, 0x20	; 32
    4a72:	1e 4f       	sbci	r17, 0xFE	; 254
    4a74:	fe 01       	movw	r30, r28
    4a76:	e0 52       	subi	r30, 0x20	; 32
    4a78:	fe 4f       	sbci	r31, 0xFE	; 254
    4a7a:	80 81       	ld	r24, Z
    4a7c:	91 81       	ldd	r25, Z+1	; 0x01
    4a7e:	a2 81       	ldd	r26, Z+2	; 0x02
    4a80:	b3 81       	ldd	r27, Z+3	; 0x03
    4a82:	2a e0       	ldi	r18, 0x0A	; 10
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	40 e0       	ldi	r20, 0x00	; 0
    4a88:	50 e0       	ldi	r21, 0x00	; 0
    4a8a:	bc 01       	movw	r22, r24
    4a8c:	cd 01       	movw	r24, r26
    4a8e:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    4a92:	da 01       	movw	r26, r20
    4a94:	c9 01       	movw	r24, r18
    4a96:	f8 01       	movw	r30, r16
    4a98:	80 83       	st	Z, r24
    4a9a:	91 83       	std	Z+1, r25	; 0x01
    4a9c:	a2 83       	std	Z+2, r26	; 0x02
    4a9e:	b3 83       	std	Z+3, r27	; 0x03
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	eb 55       	subi	r30, 0x5B	; 91
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	80 e0       	ldi	r24, 0x00	; 0
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	aa ef       	ldi	r26, 0xFA	; 250
    4aac:	b3 e4       	ldi	r27, 0x43	; 67
    4aae:	80 83       	st	Z, r24
    4ab0:	91 83       	std	Z+1, r25	; 0x01
    4ab2:	a2 83       	std	Z+2, r26	; 0x02
    4ab4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ab6:	8e 01       	movw	r16, r28
    4ab8:	0f 55       	subi	r16, 0x5F	; 95
    4aba:	1f 4f       	sbci	r17, 0xFF	; 255
    4abc:	fe 01       	movw	r30, r28
    4abe:	eb 55       	subi	r30, 0x5B	; 91
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	60 81       	ld	r22, Z
    4ac4:	71 81       	ldd	r23, Z+1	; 0x01
    4ac6:	82 81       	ldd	r24, Z+2	; 0x02
    4ac8:	93 81       	ldd	r25, Z+3	; 0x03
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	4a ef       	ldi	r20, 0xFA	; 250
    4ad0:	54 e4       	ldi	r21, 0x44	; 68
    4ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	cb 01       	movw	r24, r22
    4ada:	f8 01       	movw	r30, r16
    4adc:	80 83       	st	Z, r24
    4ade:	91 83       	std	Z+1, r25	; 0x01
    4ae0:	a2 83       	std	Z+2, r26	; 0x02
    4ae2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	ef 55       	subi	r30, 0x5F	; 95
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	60 81       	ld	r22, Z
    4aec:	71 81       	ldd	r23, Z+1	; 0x01
    4aee:	82 81       	ldd	r24, Z+2	; 0x02
    4af0:	93 81       	ldd	r25, Z+3	; 0x03
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	40 e8       	ldi	r20, 0x80	; 128
    4af8:	5f e3       	ldi	r21, 0x3F	; 63
    4afa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4afe:	88 23       	and	r24, r24
    4b00:	44 f4       	brge	.+16     	; 0x4b12 <main+0x2416>
		__ticks = 1;
    4b02:	fe 01       	movw	r30, r28
    4b04:	e1 56       	subi	r30, 0x61	; 97
    4b06:	ff 4f       	sbci	r31, 0xFF	; 255
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	91 83       	std	Z+1, r25	; 0x01
    4b0e:	80 83       	st	Z, r24
    4b10:	64 c0       	rjmp	.+200    	; 0x4bda <main+0x24de>
	else if (__tmp > 65535)
    4b12:	fe 01       	movw	r30, r28
    4b14:	ef 55       	subi	r30, 0x5F	; 95
    4b16:	ff 4f       	sbci	r31, 0xFF	; 255
    4b18:	60 81       	ld	r22, Z
    4b1a:	71 81       	ldd	r23, Z+1	; 0x01
    4b1c:	82 81       	ldd	r24, Z+2	; 0x02
    4b1e:	93 81       	ldd	r25, Z+3	; 0x03
    4b20:	20 e0       	ldi	r18, 0x00	; 0
    4b22:	3f ef       	ldi	r19, 0xFF	; 255
    4b24:	4f e7       	ldi	r20, 0x7F	; 127
    4b26:	57 e4       	ldi	r21, 0x47	; 71
    4b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b2c:	18 16       	cp	r1, r24
    4b2e:	0c f0       	brlt	.+2      	; 0x4b32 <main+0x2436>
    4b30:	43 c0       	rjmp	.+134    	; 0x4bb8 <main+0x24bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b32:	fe 01       	movw	r30, r28
    4b34:	eb 55       	subi	r30, 0x5B	; 91
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	60 81       	ld	r22, Z
    4b3a:	71 81       	ldd	r23, Z+1	; 0x01
    4b3c:	82 81       	ldd	r24, Z+2	; 0x02
    4b3e:	93 81       	ldd	r25, Z+3	; 0x03
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	40 e2       	ldi	r20, 0x20	; 32
    4b46:	51 e4       	ldi	r21, 0x41	; 65
    4b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	cb 01       	movw	r24, r22
    4b50:	8e 01       	movw	r16, r28
    4b52:	01 56       	subi	r16, 0x61	; 97
    4b54:	1f 4f       	sbci	r17, 0xFF	; 255
    4b56:	bc 01       	movw	r22, r24
    4b58:	cd 01       	movw	r24, r26
    4b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
    4b62:	f8 01       	movw	r30, r16
    4b64:	91 83       	std	Z+1, r25	; 0x01
    4b66:	80 83       	st	Z, r24
    4b68:	1f c0       	rjmp	.+62     	; 0x4ba8 <main+0x24ac>
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	e3 56       	subi	r30, 0x63	; 99
    4b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b70:	88 ec       	ldi	r24, 0xC8	; 200
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	91 83       	std	Z+1, r25	; 0x01
    4b76:	80 83       	st	Z, r24
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e3 56       	subi	r30, 0x63	; 99
    4b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7e:	80 81       	ld	r24, Z
    4b80:	91 81       	ldd	r25, Z+1	; 0x01
    4b82:	01 97       	sbiw	r24, 0x01	; 1
    4b84:	f1 f7       	brne	.-4      	; 0x4b82 <main+0x2486>
    4b86:	fe 01       	movw	r30, r28
    4b88:	e3 56       	subi	r30, 0x63	; 99
    4b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8c:	91 83       	std	Z+1, r25	; 0x01
    4b8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b90:	de 01       	movw	r26, r28
    4b92:	a1 56       	subi	r26, 0x61	; 97
    4b94:	bf 4f       	sbci	r27, 0xFF	; 255
    4b96:	fe 01       	movw	r30, r28
    4b98:	e1 56       	subi	r30, 0x61	; 97
    4b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9c:	80 81       	ld	r24, Z
    4b9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ba0:	01 97       	sbiw	r24, 0x01	; 1
    4ba2:	11 96       	adiw	r26, 0x01	; 1
    4ba4:	9c 93       	st	X, r25
    4ba6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba8:	fe 01       	movw	r30, r28
    4baa:	e1 56       	subi	r30, 0x61	; 97
    4bac:	ff 4f       	sbci	r31, 0xFF	; 255
    4bae:	80 81       	ld	r24, Z
    4bb0:	91 81       	ldd	r25, Z+1	; 0x01
    4bb2:	00 97       	sbiw	r24, 0x00	; 0
    4bb4:	d1 f6       	brne	.-76     	; 0x4b6a <main+0x246e>
    4bb6:	27 c0       	rjmp	.+78     	; 0x4c06 <main+0x250a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bb8:	8e 01       	movw	r16, r28
    4bba:	01 56       	subi	r16, 0x61	; 97
    4bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	ef 55       	subi	r30, 0x5F	; 95
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	60 81       	ld	r22, Z
    4bc6:	71 81       	ldd	r23, Z+1	; 0x01
    4bc8:	82 81       	ldd	r24, Z+2	; 0x02
    4bca:	93 81       	ldd	r25, Z+3	; 0x03
    4bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd0:	dc 01       	movw	r26, r24
    4bd2:	cb 01       	movw	r24, r22
    4bd4:	f8 01       	movw	r30, r16
    4bd6:	91 83       	std	Z+1, r25	; 0x01
    4bd8:	80 83       	st	Z, r24
    4bda:	de 01       	movw	r26, r28
    4bdc:	a5 56       	subi	r26, 0x65	; 101
    4bde:	bf 4f       	sbci	r27, 0xFF	; 255
    4be0:	fe 01       	movw	r30, r28
    4be2:	e1 56       	subi	r30, 0x61	; 97
    4be4:	ff 4f       	sbci	r31, 0xFF	; 255
    4be6:	80 81       	ld	r24, Z
    4be8:	91 81       	ldd	r25, Z+1	; 0x01
    4bea:	8d 93       	st	X+, r24
    4bec:	9c 93       	st	X, r25
    4bee:	fe 01       	movw	r30, r28
    4bf0:	e5 56       	subi	r30, 0x65	; 101
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	80 81       	ld	r24, Z
    4bf6:	91 81       	ldd	r25, Z+1	; 0x01
    4bf8:	01 97       	sbiw	r24, 0x01	; 1
    4bfa:	f1 f7       	brne	.-4      	; 0x4bf8 <main+0x24fc>
    4bfc:	fe 01       	movw	r30, r28
    4bfe:	e5 56       	subi	r30, 0x65	; 101
    4c00:	ff 4f       	sbci	r31, 0xFF	; 255
    4c02:	91 83       	std	Z+1, r25	; 0x01
    4c04:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_VoidSendCommand(LCD_ClearDisplay);
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	e9 56       	subi	r30, 0x69	; 105
    4c10:	ff 4f       	sbci	r31, 0xFF	; 255
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	a0 e0       	ldi	r26, 0x00	; 0
    4c18:	b0 e4       	ldi	r27, 0x40	; 64
    4c1a:	80 83       	st	Z, r24
    4c1c:	91 83       	std	Z+1, r25	; 0x01
    4c1e:	a2 83       	std	Z+2, r26	; 0x02
    4c20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c22:	8e 01       	movw	r16, r28
    4c24:	0d 56       	subi	r16, 0x6D	; 109
    4c26:	1f 4f       	sbci	r17, 0xFF	; 255
    4c28:	fe 01       	movw	r30, r28
    4c2a:	e9 56       	subi	r30, 0x69	; 105
    4c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2e:	60 81       	ld	r22, Z
    4c30:	71 81       	ldd	r23, Z+1	; 0x01
    4c32:	82 81       	ldd	r24, Z+2	; 0x02
    4c34:	93 81       	ldd	r25, Z+3	; 0x03
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	4a ef       	ldi	r20, 0xFA	; 250
    4c3c:	54 e4       	ldi	r21, 0x44	; 68
    4c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c42:	dc 01       	movw	r26, r24
    4c44:	cb 01       	movw	r24, r22
    4c46:	f8 01       	movw	r30, r16
    4c48:	80 83       	st	Z, r24
    4c4a:	91 83       	std	Z+1, r25	; 0x01
    4c4c:	a2 83       	std	Z+2, r26	; 0x02
    4c4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c50:	fe 01       	movw	r30, r28
    4c52:	ed 56       	subi	r30, 0x6D	; 109
    4c54:	ff 4f       	sbci	r31, 0xFF	; 255
    4c56:	60 81       	ld	r22, Z
    4c58:	71 81       	ldd	r23, Z+1	; 0x01
    4c5a:	82 81       	ldd	r24, Z+2	; 0x02
    4c5c:	93 81       	ldd	r25, Z+3	; 0x03
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	40 e8       	ldi	r20, 0x80	; 128
    4c64:	5f e3       	ldi	r21, 0x3F	; 63
    4c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c6a:	88 23       	and	r24, r24
    4c6c:	44 f4       	brge	.+16     	; 0x4c7e <main+0x2582>
		__ticks = 1;
    4c6e:	fe 01       	movw	r30, r28
    4c70:	ef 56       	subi	r30, 0x6F	; 111
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	91 83       	std	Z+1, r25	; 0x01
    4c7a:	80 83       	st	Z, r24
    4c7c:	64 c0       	rjmp	.+200    	; 0x4d46 <main+0x264a>
	else if (__tmp > 65535)
    4c7e:	fe 01       	movw	r30, r28
    4c80:	ed 56       	subi	r30, 0x6D	; 109
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	60 81       	ld	r22, Z
    4c86:	71 81       	ldd	r23, Z+1	; 0x01
    4c88:	82 81       	ldd	r24, Z+2	; 0x02
    4c8a:	93 81       	ldd	r25, Z+3	; 0x03
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	3f ef       	ldi	r19, 0xFF	; 255
    4c90:	4f e7       	ldi	r20, 0x7F	; 127
    4c92:	57 e4       	ldi	r21, 0x47	; 71
    4c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c98:	18 16       	cp	r1, r24
    4c9a:	0c f0       	brlt	.+2      	; 0x4c9e <main+0x25a2>
    4c9c:	43 c0       	rjmp	.+134    	; 0x4d24 <main+0x2628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c9e:	fe 01       	movw	r30, r28
    4ca0:	e9 56       	subi	r30, 0x69	; 105
    4ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca4:	60 81       	ld	r22, Z
    4ca6:	71 81       	ldd	r23, Z+1	; 0x01
    4ca8:	82 81       	ldd	r24, Z+2	; 0x02
    4caa:	93 81       	ldd	r25, Z+3	; 0x03
    4cac:	20 e0       	ldi	r18, 0x00	; 0
    4cae:	30 e0       	ldi	r19, 0x00	; 0
    4cb0:	40 e2       	ldi	r20, 0x20	; 32
    4cb2:	51 e4       	ldi	r21, 0x41	; 65
    4cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb8:	dc 01       	movw	r26, r24
    4cba:	cb 01       	movw	r24, r22
    4cbc:	8e 01       	movw	r16, r28
    4cbe:	0f 56       	subi	r16, 0x6F	; 111
    4cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    4cc2:	bc 01       	movw	r22, r24
    4cc4:	cd 01       	movw	r24, r26
    4cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cca:	dc 01       	movw	r26, r24
    4ccc:	cb 01       	movw	r24, r22
    4cce:	f8 01       	movw	r30, r16
    4cd0:	91 83       	std	Z+1, r25	; 0x01
    4cd2:	80 83       	st	Z, r24
    4cd4:	1f c0       	rjmp	.+62     	; 0x4d14 <main+0x2618>
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	e1 57       	subi	r30, 0x71	; 113
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	88 ec       	ldi	r24, 0xC8	; 200
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	91 83       	std	Z+1, r25	; 0x01
    4ce2:	80 83       	st	Z, r24
    4ce4:	fe 01       	movw	r30, r28
    4ce6:	e1 57       	subi	r30, 0x71	; 113
    4ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cea:	80 81       	ld	r24, Z
    4cec:	91 81       	ldd	r25, Z+1	; 0x01
    4cee:	01 97       	sbiw	r24, 0x01	; 1
    4cf0:	f1 f7       	brne	.-4      	; 0x4cee <main+0x25f2>
    4cf2:	fe 01       	movw	r30, r28
    4cf4:	e1 57       	subi	r30, 0x71	; 113
    4cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf8:	91 83       	std	Z+1, r25	; 0x01
    4cfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cfc:	de 01       	movw	r26, r28
    4cfe:	af 56       	subi	r26, 0x6F	; 111
    4d00:	bf 4f       	sbci	r27, 0xFF	; 255
    4d02:	fe 01       	movw	r30, r28
    4d04:	ef 56       	subi	r30, 0x6F	; 111
    4d06:	ff 4f       	sbci	r31, 0xFF	; 255
    4d08:	80 81       	ld	r24, Z
    4d0a:	91 81       	ldd	r25, Z+1	; 0x01
    4d0c:	01 97       	sbiw	r24, 0x01	; 1
    4d0e:	11 96       	adiw	r26, 0x01	; 1
    4d10:	9c 93       	st	X, r25
    4d12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d14:	fe 01       	movw	r30, r28
    4d16:	ef 56       	subi	r30, 0x6F	; 111
    4d18:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1a:	80 81       	ld	r24, Z
    4d1c:	91 81       	ldd	r25, Z+1	; 0x01
    4d1e:	00 97       	sbiw	r24, 0x00	; 0
    4d20:	d1 f6       	brne	.-76     	; 0x4cd6 <main+0x25da>
    4d22:	27 c0       	rjmp	.+78     	; 0x4d72 <main+0x2676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d24:	8e 01       	movw	r16, r28
    4d26:	0f 56       	subi	r16, 0x6F	; 111
    4d28:	1f 4f       	sbci	r17, 0xFF	; 255
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	ed 56       	subi	r30, 0x6D	; 109
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	60 81       	ld	r22, Z
    4d32:	71 81       	ldd	r23, Z+1	; 0x01
    4d34:	82 81       	ldd	r24, Z+2	; 0x02
    4d36:	93 81       	ldd	r25, Z+3	; 0x03
    4d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	cb 01       	movw	r24, r22
    4d40:	f8 01       	movw	r30, r16
    4d42:	91 83       	std	Z+1, r25	; 0x01
    4d44:	80 83       	st	Z, r24
    4d46:	de 01       	movw	r26, r28
    4d48:	a3 57       	subi	r26, 0x73	; 115
    4d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	ef 56       	subi	r30, 0x6F	; 111
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	80 81       	ld	r24, Z
    4d54:	91 81       	ldd	r25, Z+1	; 0x01
    4d56:	8d 93       	st	X+, r24
    4d58:	9c 93       	st	X, r25
    4d5a:	fe 01       	movw	r30, r28
    4d5c:	e3 57       	subi	r30, 0x73	; 115
    4d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d60:	80 81       	ld	r24, Z
    4d62:	91 81       	ldd	r25, Z+1	; 0x01
    4d64:	01 97       	sbiw	r24, 0x01	; 1
    4d66:	f1 f7       	brne	.-4      	; 0x4d64 <main+0x2668>
    4d68:	fe 01       	movw	r30, r28
    4d6a:	e3 57       	subi	r30, 0x73	; 115
    4d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6e:	91 83       	std	Z+1, r25	; 0x01
    4d70:	80 83       	st	Z, r24
			_delay_ms(2);
			if (Saved_Pass == Comp_Pass)
    4d72:	fe 01       	movw	r30, r28
    4d74:	e0 51       	subi	r30, 0x10	; 16
    4d76:	fe 4f       	sbci	r31, 0xFE	; 254
    4d78:	de 01       	movw	r26, r28
    4d7a:	a0 52       	subi	r26, 0x20	; 32
    4d7c:	be 4f       	sbci	r27, 0xFE	; 254
    4d7e:	20 81       	ld	r18, Z
    4d80:	31 81       	ldd	r19, Z+1	; 0x01
    4d82:	42 81       	ldd	r20, Z+2	; 0x02
    4d84:	53 81       	ldd	r21, Z+3	; 0x03
    4d86:	8d 91       	ld	r24, X+
    4d88:	9d 91       	ld	r25, X+
    4d8a:	0d 90       	ld	r0, X+
    4d8c:	bc 91       	ld	r27, X
    4d8e:	a0 2d       	mov	r26, r0
    4d90:	28 17       	cp	r18, r24
    4d92:	39 07       	cpc	r19, r25
    4d94:	4a 07       	cpc	r20, r26
    4d96:	5b 07       	cpc	r21, r27
    4d98:	09 f0       	breq	.+2      	; 0x4d9c <main+0x26a0>
    4d9a:	40 c5       	rjmp	.+2688   	; 0x581c <main+0x3120>
			{
				Comp_Pass = 0;
    4d9c:	fe 01       	movw	r30, r28
    4d9e:	e0 52       	subi	r30, 0x20	; 32
    4da0:	fe 4f       	sbci	r31, 0xFE	; 254
    4da2:	10 82       	st	Z, r1
    4da4:	11 82       	std	Z+1, r1	; 0x01
    4da6:	12 82       	std	Z+2, r1	; 0x02
    4da8:	13 82       	std	Z+3, r1	; 0x03
				Saved_Pass = 0;
    4daa:	fe 01       	movw	r30, r28
    4dac:	e0 51       	subi	r30, 0x10	; 16
    4dae:	fe 4f       	sbci	r31, 0xFE	; 254
    4db0:	10 82       	st	Z, r1
    4db2:	11 82       	std	Z+1, r1	; 0x01
    4db4:	12 82       	std	Z+2, r1	; 0x02
    4db6:	13 82       	std	Z+3, r1	; 0x03
				Reversed_Pass = 0;
    4db8:	fe 01       	movw	r30, r28
    4dba:	e4 51       	subi	r30, 0x14	; 20
    4dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    4dbe:	10 82       	st	Z, r1
    4dc0:	11 82       	std	Z+1, r1	; 0x01
    4dc2:	12 82       	std	Z+2, r1	; 0x02
    4dc4:	13 82       	std	Z+3, r1	; 0x03
				Get_Reversed_Pass = 0;
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	e8 51       	subi	r30, 0x18	; 24
    4dca:	fe 4f       	sbci	r31, 0xFE	; 254
    4dcc:	10 82       	st	Z, r1
    4dce:	11 82       	std	Z+1, r1	; 0x01
    4dd0:	12 82       	std	Z+2, r1	; 0x02
    4dd2:	13 82       	std	Z+3, r1	; 0x03
				LCD_VoidSendString("New Pass : ");
    4dd4:	88 ee       	ldi	r24, 0xE8	; 232
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_VoidSendString>
				LCD_VoidSendStringFromPos("Just Numbers",1,0);
    4ddc:	84 ef       	ldi	r24, 0xF4	; 244
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	61 e0       	ldi	r22, 0x01	; 1
    4de2:	40 e0       	ldi	r20, 0x00	; 0
    4de4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
				for (u8 i = 0; i<4 ;i++)
    4de8:	fe 01       	movw	r30, r28
    4dea:	e3 52       	subi	r30, 0x23	; 35
    4dec:	fe 4f       	sbci	r31, 0xFE	; 254
    4dee:	10 82       	st	Z, r1
    4df0:	d8 c1       	rjmp	.+944    	; 0x51a2 <main+0x2aa6>
				{
					LCD_VoidSendCommand(LCD_CursorON);
    4df2:	8e e0       	ldi	r24, 0x0E	; 14
    4df4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    4df8:	fe 01       	movw	r30, r28
    4dfa:	e7 57       	subi	r30, 0x77	; 119
    4dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	a8 e4       	ldi	r26, 0x48	; 72
    4e04:	b3 e4       	ldi	r27, 0x43	; 67
    4e06:	80 83       	st	Z, r24
    4e08:	91 83       	std	Z+1, r25	; 0x01
    4e0a:	a2 83       	std	Z+2, r26	; 0x02
    4e0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e0e:	8e 01       	movw	r16, r28
    4e10:	0b 57       	subi	r16, 0x7B	; 123
    4e12:	1f 4f       	sbci	r17, 0xFF	; 255
    4e14:	fe 01       	movw	r30, r28
    4e16:	e7 57       	subi	r30, 0x77	; 119
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	60 81       	ld	r22, Z
    4e1c:	71 81       	ldd	r23, Z+1	; 0x01
    4e1e:	82 81       	ldd	r24, Z+2	; 0x02
    4e20:	93 81       	ldd	r25, Z+3	; 0x03
    4e22:	20 e0       	ldi	r18, 0x00	; 0
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    4e26:	4a ef       	ldi	r20, 0xFA	; 250
    4e28:	54 e4       	ldi	r21, 0x44	; 68
    4e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e2e:	dc 01       	movw	r26, r24
    4e30:	cb 01       	movw	r24, r22
    4e32:	f8 01       	movw	r30, r16
    4e34:	80 83       	st	Z, r24
    4e36:	91 83       	std	Z+1, r25	; 0x01
    4e38:	a2 83       	std	Z+2, r26	; 0x02
    4e3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e3c:	fe 01       	movw	r30, r28
    4e3e:	eb 57       	subi	r30, 0x7B	; 123
    4e40:	ff 4f       	sbci	r31, 0xFF	; 255
    4e42:	60 81       	ld	r22, Z
    4e44:	71 81       	ldd	r23, Z+1	; 0x01
    4e46:	82 81       	ldd	r24, Z+2	; 0x02
    4e48:	93 81       	ldd	r25, Z+3	; 0x03
    4e4a:	20 e0       	ldi	r18, 0x00	; 0
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	40 e8       	ldi	r20, 0x80	; 128
    4e50:	5f e3       	ldi	r21, 0x3F	; 63
    4e52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e56:	88 23       	and	r24, r24
    4e58:	44 f4       	brge	.+16     	; 0x4e6a <main+0x276e>
		__ticks = 1;
    4e5a:	fe 01       	movw	r30, r28
    4e5c:	ed 57       	subi	r30, 0x7D	; 125
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	91 83       	std	Z+1, r25	; 0x01
    4e66:	80 83       	st	Z, r24
    4e68:	64 c0       	rjmp	.+200    	; 0x4f32 <main+0x2836>
	else if (__tmp > 65535)
    4e6a:	fe 01       	movw	r30, r28
    4e6c:	eb 57       	subi	r30, 0x7B	; 123
    4e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e70:	60 81       	ld	r22, Z
    4e72:	71 81       	ldd	r23, Z+1	; 0x01
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	93 81       	ldd	r25, Z+3	; 0x03
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	3f ef       	ldi	r19, 0xFF	; 255
    4e7c:	4f e7       	ldi	r20, 0x7F	; 127
    4e7e:	57 e4       	ldi	r21, 0x47	; 71
    4e80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e84:	18 16       	cp	r1, r24
    4e86:	0c f0       	brlt	.+2      	; 0x4e8a <main+0x278e>
    4e88:	43 c0       	rjmp	.+134    	; 0x4f10 <main+0x2814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e8a:	fe 01       	movw	r30, r28
    4e8c:	e7 57       	subi	r30, 0x77	; 119
    4e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e90:	60 81       	ld	r22, Z
    4e92:	71 81       	ldd	r23, Z+1	; 0x01
    4e94:	82 81       	ldd	r24, Z+2	; 0x02
    4e96:	93 81       	ldd	r25, Z+3	; 0x03
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	40 e2       	ldi	r20, 0x20	; 32
    4e9e:	51 e4       	ldi	r21, 0x41	; 65
    4ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	8e 01       	movw	r16, r28
    4eaa:	0d 57       	subi	r16, 0x7D	; 125
    4eac:	1f 4f       	sbci	r17, 0xFF	; 255
    4eae:	bc 01       	movw	r22, r24
    4eb0:	cd 01       	movw	r24, r26
    4eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	f8 01       	movw	r30, r16
    4ebc:	91 83       	std	Z+1, r25	; 0x01
    4ebe:	80 83       	st	Z, r24
    4ec0:	1f c0       	rjmp	.+62     	; 0x4f00 <main+0x2804>
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	ef 57       	subi	r30, 0x7F	; 127
    4ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec8:	88 ec       	ldi	r24, 0xC8	; 200
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	91 83       	std	Z+1, r25	; 0x01
    4ece:	80 83       	st	Z, r24
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	ef 57       	subi	r30, 0x7F	; 127
    4ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed6:	80 81       	ld	r24, Z
    4ed8:	91 81       	ldd	r25, Z+1	; 0x01
    4eda:	01 97       	sbiw	r24, 0x01	; 1
    4edc:	f1 f7       	brne	.-4      	; 0x4eda <main+0x27de>
    4ede:	fe 01       	movw	r30, r28
    4ee0:	ef 57       	subi	r30, 0x7F	; 127
    4ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee4:	91 83       	std	Z+1, r25	; 0x01
    4ee6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ee8:	de 01       	movw	r26, r28
    4eea:	ad 57       	subi	r26, 0x7D	; 125
    4eec:	bf 4f       	sbci	r27, 0xFF	; 255
    4eee:	fe 01       	movw	r30, r28
    4ef0:	ed 57       	subi	r30, 0x7D	; 125
    4ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef4:	80 81       	ld	r24, Z
    4ef6:	91 81       	ldd	r25, Z+1	; 0x01
    4ef8:	01 97       	sbiw	r24, 0x01	; 1
    4efa:	11 96       	adiw	r26, 0x01	; 1
    4efc:	9c 93       	st	X, r25
    4efe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f00:	fe 01       	movw	r30, r28
    4f02:	ed 57       	subi	r30, 0x7D	; 125
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	80 81       	ld	r24, Z
    4f08:	91 81       	ldd	r25, Z+1	; 0x01
    4f0a:	00 97       	sbiw	r24, 0x00	; 0
    4f0c:	d1 f6       	brne	.-76     	; 0x4ec2 <main+0x27c6>
    4f0e:	27 c0       	rjmp	.+78     	; 0x4f5e <main+0x2862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f10:	8e 01       	movw	r16, r28
    4f12:	0d 57       	subi	r16, 0x7D	; 125
    4f14:	1f 4f       	sbci	r17, 0xFF	; 255
    4f16:	fe 01       	movw	r30, r28
    4f18:	eb 57       	subi	r30, 0x7B	; 123
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	60 81       	ld	r22, Z
    4f1e:	71 81       	ldd	r23, Z+1	; 0x01
    4f20:	82 81       	ldd	r24, Z+2	; 0x02
    4f22:	93 81       	ldd	r25, Z+3	; 0x03
    4f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f28:	dc 01       	movw	r26, r24
    4f2a:	cb 01       	movw	r24, r22
    4f2c:	f8 01       	movw	r30, r16
    4f2e:	91 83       	std	Z+1, r25	; 0x01
    4f30:	80 83       	st	Z, r24
    4f32:	de 01       	movw	r26, r28
    4f34:	a1 58       	subi	r26, 0x81	; 129
    4f36:	bf 4f       	sbci	r27, 0xFF	; 255
    4f38:	fe 01       	movw	r30, r28
    4f3a:	ed 57       	subi	r30, 0x7D	; 125
    4f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3e:	80 81       	ld	r24, Z
    4f40:	91 81       	ldd	r25, Z+1	; 0x01
    4f42:	8d 93       	st	X+, r24
    4f44:	9c 93       	st	X, r25
    4f46:	fe 01       	movw	r30, r28
    4f48:	e1 58       	subi	r30, 0x81	; 129
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	80 81       	ld	r24, Z
    4f4e:	91 81       	ldd	r25, Z+1	; 0x01
    4f50:	01 97       	sbiw	r24, 0x01	; 1
    4f52:	f1 f7       	brne	.-4      	; 0x4f50 <main+0x2854>
    4f54:	fe 01       	movw	r30, r28
    4f56:	e1 58       	subi	r30, 0x81	; 129
    4f58:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5a:	91 83       	std	Z+1, r25	; 0x01
    4f5c:	80 83       	st	Z, r24
					_delay_ms(200);
					LCD_VoidSendCommand(LCD_CURSOROFF);
    4f5e:	8c e0       	ldi	r24, 0x0C	; 12
    4f60:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>

					Key_Value = Keypad_GetPressedKey();
    4f64:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Keypad_GetPressedKey>
    4f68:	fe 01       	movw	r30, r28
    4f6a:	eb 50       	subi	r30, 0x0B	; 11
    4f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f6e:	80 83       	st	Z, r24
					if ((Key_Value >= 0) && (Key_Value <= 9))
    4f70:	fe 01       	movw	r30, r28
    4f72:	eb 50       	subi	r30, 0x0B	; 11
    4f74:	fe 4f       	sbci	r31, 0xFE	; 254
    4f76:	80 81       	ld	r24, Z
    4f78:	8a 30       	cpi	r24, 0x0A	; 10
    4f7a:	08 f0       	brcs	.+2      	; 0x4f7e <main+0x2882>
    4f7c:	d5 c0       	rjmp	.+426    	; 0x5128 <main+0x2a2c>
					{
						LCD_VoidStartFrom(0,11+i);
    4f7e:	fe 01       	movw	r30, r28
    4f80:	e3 52       	subi	r30, 0x23	; 35
    4f82:	fe 4f       	sbci	r31, 0xFE	; 254
    4f84:	80 81       	ld	r24, Z
    4f86:	98 2f       	mov	r25, r24
    4f88:	95 5f       	subi	r25, 0xF5	; 245
    4f8a:	80 e0       	ldi	r24, 0x00	; 0
    4f8c:	69 2f       	mov	r22, r25
    4f8e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_VoidStartFrom>
						LCD_VoidSendNumber(Key_Value);
    4f92:	fe 01       	movw	r30, r28
    4f94:	eb 50       	subi	r30, 0x0B	; 11
    4f96:	fe 4f       	sbci	r31, 0xFE	; 254
    4f98:	80 81       	ld	r24, Z
    4f9a:	88 2f       	mov	r24, r24
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	a0 e0       	ldi	r26, 0x00	; 0
    4fa0:	b0 e0       	ldi	r27, 0x00	; 0
    4fa2:	bc 01       	movw	r22, r24
    4fa4:	cd 01       	movw	r24, r26
    4fa6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_VoidSendNumber>
    4faa:	fe 01       	movw	r30, r28
    4fac:	e5 58       	subi	r30, 0x85	; 133
    4fae:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	a8 e4       	ldi	r26, 0x48	; 72
    4fb6:	b3 e4       	ldi	r27, 0x43	; 67
    4fb8:	80 83       	st	Z, r24
    4fba:	91 83       	std	Z+1, r25	; 0x01
    4fbc:	a2 83       	std	Z+2, r26	; 0x02
    4fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fc0:	8e 01       	movw	r16, r28
    4fc2:	09 58       	subi	r16, 0x89	; 137
    4fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc6:	fe 01       	movw	r30, r28
    4fc8:	e5 58       	subi	r30, 0x85	; 133
    4fca:	ff 4f       	sbci	r31, 0xFF	; 255
    4fcc:	60 81       	ld	r22, Z
    4fce:	71 81       	ldd	r23, Z+1	; 0x01
    4fd0:	82 81       	ldd	r24, Z+2	; 0x02
    4fd2:	93 81       	ldd	r25, Z+3	; 0x03
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	4a ef       	ldi	r20, 0xFA	; 250
    4fda:	54 e4       	ldi	r21, 0x44	; 68
    4fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	cb 01       	movw	r24, r22
    4fe4:	f8 01       	movw	r30, r16
    4fe6:	80 83       	st	Z, r24
    4fe8:	91 83       	std	Z+1, r25	; 0x01
    4fea:	a2 83       	std	Z+2, r26	; 0x02
    4fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fee:	fe 01       	movw	r30, r28
    4ff0:	e9 58       	subi	r30, 0x89	; 137
    4ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff4:	60 81       	ld	r22, Z
    4ff6:	71 81       	ldd	r23, Z+1	; 0x01
    4ff8:	82 81       	ldd	r24, Z+2	; 0x02
    4ffa:	93 81       	ldd	r25, Z+3	; 0x03
    4ffc:	20 e0       	ldi	r18, 0x00	; 0
    4ffe:	30 e0       	ldi	r19, 0x00	; 0
    5000:	40 e8       	ldi	r20, 0x80	; 128
    5002:	5f e3       	ldi	r21, 0x3F	; 63
    5004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5008:	88 23       	and	r24, r24
    500a:	44 f4       	brge	.+16     	; 0x501c <main+0x2920>
		__ticks = 1;
    500c:	fe 01       	movw	r30, r28
    500e:	eb 58       	subi	r30, 0x8B	; 139
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	81 e0       	ldi	r24, 0x01	; 1
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	91 83       	std	Z+1, r25	; 0x01
    5018:	80 83       	st	Z, r24
    501a:	64 c0       	rjmp	.+200    	; 0x50e4 <main+0x29e8>
	else if (__tmp > 65535)
    501c:	fe 01       	movw	r30, r28
    501e:	e9 58       	subi	r30, 0x89	; 137
    5020:	ff 4f       	sbci	r31, 0xFF	; 255
    5022:	60 81       	ld	r22, Z
    5024:	71 81       	ldd	r23, Z+1	; 0x01
    5026:	82 81       	ldd	r24, Z+2	; 0x02
    5028:	93 81       	ldd	r25, Z+3	; 0x03
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	3f ef       	ldi	r19, 0xFF	; 255
    502e:	4f e7       	ldi	r20, 0x7F	; 127
    5030:	57 e4       	ldi	r21, 0x47	; 71
    5032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5036:	18 16       	cp	r1, r24
    5038:	0c f0       	brlt	.+2      	; 0x503c <main+0x2940>
    503a:	43 c0       	rjmp	.+134    	; 0x50c2 <main+0x29c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    503c:	fe 01       	movw	r30, r28
    503e:	e5 58       	subi	r30, 0x85	; 133
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	60 81       	ld	r22, Z
    5044:	71 81       	ldd	r23, Z+1	; 0x01
    5046:	82 81       	ldd	r24, Z+2	; 0x02
    5048:	93 81       	ldd	r25, Z+3	; 0x03
    504a:	20 e0       	ldi	r18, 0x00	; 0
    504c:	30 e0       	ldi	r19, 0x00	; 0
    504e:	40 e2       	ldi	r20, 0x20	; 32
    5050:	51 e4       	ldi	r21, 0x41	; 65
    5052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5056:	dc 01       	movw	r26, r24
    5058:	cb 01       	movw	r24, r22
    505a:	8e 01       	movw	r16, r28
    505c:	0b 58       	subi	r16, 0x8B	; 139
    505e:	1f 4f       	sbci	r17, 0xFF	; 255
    5060:	bc 01       	movw	r22, r24
    5062:	cd 01       	movw	r24, r26
    5064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5068:	dc 01       	movw	r26, r24
    506a:	cb 01       	movw	r24, r22
    506c:	f8 01       	movw	r30, r16
    506e:	91 83       	std	Z+1, r25	; 0x01
    5070:	80 83       	st	Z, r24
    5072:	1f c0       	rjmp	.+62     	; 0x50b2 <main+0x29b6>
    5074:	fe 01       	movw	r30, r28
    5076:	ed 58       	subi	r30, 0x8D	; 141
    5078:	ff 4f       	sbci	r31, 0xFF	; 255
    507a:	88 ec       	ldi	r24, 0xC8	; 200
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	91 83       	std	Z+1, r25	; 0x01
    5080:	80 83       	st	Z, r24
    5082:	fe 01       	movw	r30, r28
    5084:	ed 58       	subi	r30, 0x8D	; 141
    5086:	ff 4f       	sbci	r31, 0xFF	; 255
    5088:	80 81       	ld	r24, Z
    508a:	91 81       	ldd	r25, Z+1	; 0x01
    508c:	01 97       	sbiw	r24, 0x01	; 1
    508e:	f1 f7       	brne	.-4      	; 0x508c <main+0x2990>
    5090:	fe 01       	movw	r30, r28
    5092:	ed 58       	subi	r30, 0x8D	; 141
    5094:	ff 4f       	sbci	r31, 0xFF	; 255
    5096:	91 83       	std	Z+1, r25	; 0x01
    5098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    509a:	de 01       	movw	r26, r28
    509c:	ab 58       	subi	r26, 0x8B	; 139
    509e:	bf 4f       	sbci	r27, 0xFF	; 255
    50a0:	fe 01       	movw	r30, r28
    50a2:	eb 58       	subi	r30, 0x8B	; 139
    50a4:	ff 4f       	sbci	r31, 0xFF	; 255
    50a6:	80 81       	ld	r24, Z
    50a8:	91 81       	ldd	r25, Z+1	; 0x01
    50aa:	01 97       	sbiw	r24, 0x01	; 1
    50ac:	11 96       	adiw	r26, 0x01	; 1
    50ae:	9c 93       	st	X, r25
    50b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b2:	fe 01       	movw	r30, r28
    50b4:	eb 58       	subi	r30, 0x8B	; 139
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	80 81       	ld	r24, Z
    50ba:	91 81       	ldd	r25, Z+1	; 0x01
    50bc:	00 97       	sbiw	r24, 0x00	; 0
    50be:	d1 f6       	brne	.-76     	; 0x5074 <main+0x2978>
    50c0:	27 c0       	rjmp	.+78     	; 0x5110 <main+0x2a14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c2:	8e 01       	movw	r16, r28
    50c4:	0b 58       	subi	r16, 0x8B	; 139
    50c6:	1f 4f       	sbci	r17, 0xFF	; 255
    50c8:	fe 01       	movw	r30, r28
    50ca:	e9 58       	subi	r30, 0x89	; 137
    50cc:	ff 4f       	sbci	r31, 0xFF	; 255
    50ce:	60 81       	ld	r22, Z
    50d0:	71 81       	ldd	r23, Z+1	; 0x01
    50d2:	82 81       	ldd	r24, Z+2	; 0x02
    50d4:	93 81       	ldd	r25, Z+3	; 0x03
    50d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22
    50de:	f8 01       	movw	r30, r16
    50e0:	91 83       	std	Z+1, r25	; 0x01
    50e2:	80 83       	st	Z, r24
    50e4:	de 01       	movw	r26, r28
    50e6:	af 58       	subi	r26, 0x8F	; 143
    50e8:	bf 4f       	sbci	r27, 0xFF	; 255
    50ea:	fe 01       	movw	r30, r28
    50ec:	eb 58       	subi	r30, 0x8B	; 139
    50ee:	ff 4f       	sbci	r31, 0xFF	; 255
    50f0:	80 81       	ld	r24, Z
    50f2:	91 81       	ldd	r25, Z+1	; 0x01
    50f4:	8d 93       	st	X+, r24
    50f6:	9c 93       	st	X, r25
    50f8:	fe 01       	movw	r30, r28
    50fa:	ef 58       	subi	r30, 0x8F	; 143
    50fc:	ff 4f       	sbci	r31, 0xFF	; 255
    50fe:	80 81       	ld	r24, Z
    5100:	91 81       	ldd	r25, Z+1	; 0x01
    5102:	01 97       	sbiw	r24, 0x01	; 1
    5104:	f1 f7       	brne	.-4      	; 0x5102 <main+0x2a06>
    5106:	fe 01       	movw	r30, r28
    5108:	ef 58       	subi	r30, 0x8F	; 143
    510a:	ff 4f       	sbci	r31, 0xFF	; 255
    510c:	91 83       	std	Z+1, r25	; 0x01
    510e:	80 83       	st	Z, r24
						/*Integer_TO_String (key);*/
						_delay_ms(200);
						LCD_VoidSendStringFromPos("*",0,11+i);
    5110:	fe 01       	movw	r30, r28
    5112:	e3 52       	subi	r30, 0x23	; 35
    5114:	fe 4f       	sbci	r31, 0xFE	; 254
    5116:	80 81       	ld	r24, Z
    5118:	28 2f       	mov	r18, r24
    511a:	25 5f       	subi	r18, 0xF5	; 245
    511c:	84 ea       	ldi	r24, 0xA4	; 164
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	60 e0       	ldi	r22, 0x00	; 0
    5122:	42 2f       	mov	r20, r18
    5124:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
					}

					Saved_Pass += Key_Value;
    5128:	fe 01       	movw	r30, r28
    512a:	eb 50       	subi	r30, 0x0B	; 11
    512c:	fe 4f       	sbci	r31, 0xFE	; 254
    512e:	80 81       	ld	r24, Z
    5130:	28 2f       	mov	r18, r24
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	40 e0       	ldi	r20, 0x00	; 0
    5136:	50 e0       	ldi	r21, 0x00	; 0
    5138:	be 01       	movw	r22, r28
    513a:	60 51       	subi	r22, 0x10	; 16
    513c:	7e 4f       	sbci	r23, 0xFE	; 254
    513e:	fe 01       	movw	r30, r28
    5140:	e0 51       	subi	r30, 0x10	; 16
    5142:	fe 4f       	sbci	r31, 0xFE	; 254
    5144:	80 81       	ld	r24, Z
    5146:	91 81       	ldd	r25, Z+1	; 0x01
    5148:	a2 81       	ldd	r26, Z+2	; 0x02
    514a:	b3 81       	ldd	r27, Z+3	; 0x03
    514c:	82 0f       	add	r24, r18
    514e:	93 1f       	adc	r25, r19
    5150:	a4 1f       	adc	r26, r20
    5152:	b5 1f       	adc	r27, r21
    5154:	fb 01       	movw	r30, r22
    5156:	80 83       	st	Z, r24
    5158:	91 83       	std	Z+1, r25	; 0x01
    515a:	a2 83       	std	Z+2, r26	; 0x02
    515c:	b3 83       	std	Z+3, r27	; 0x03
					Saved_Pass = Saved_Pass * 10;
    515e:	8e 01       	movw	r16, r28
    5160:	00 51       	subi	r16, 0x10	; 16
    5162:	1e 4f       	sbci	r17, 0xFE	; 254
    5164:	fe 01       	movw	r30, r28
    5166:	e0 51       	subi	r30, 0x10	; 16
    5168:	fe 4f       	sbci	r31, 0xFE	; 254
    516a:	80 81       	ld	r24, Z
    516c:	91 81       	ldd	r25, Z+1	; 0x01
    516e:	a2 81       	ldd	r26, Z+2	; 0x02
    5170:	b3 81       	ldd	r27, Z+3	; 0x03
    5172:	2a e0       	ldi	r18, 0x0A	; 10
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	40 e0       	ldi	r20, 0x00	; 0
    5178:	50 e0       	ldi	r21, 0x00	; 0
    517a:	bc 01       	movw	r22, r24
    517c:	cd 01       	movw	r24, r26
    517e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsi3>
    5182:	dc 01       	movw	r26, r24
    5184:	cb 01       	movw	r24, r22
    5186:	f8 01       	movw	r30, r16
    5188:	80 83       	st	Z, r24
    518a:	91 83       	std	Z+1, r25	; 0x01
    518c:	a2 83       	std	Z+2, r26	; 0x02
    518e:	b3 83       	std	Z+3, r27	; 0x03
				Saved_Pass = 0;
				Reversed_Pass = 0;
				Get_Reversed_Pass = 0;
				LCD_VoidSendString("New Pass : ");
				LCD_VoidSendStringFromPos("Just Numbers",1,0);
				for (u8 i = 0; i<4 ;i++)
    5190:	de 01       	movw	r26, r28
    5192:	a3 52       	subi	r26, 0x23	; 35
    5194:	be 4f       	sbci	r27, 0xFE	; 254
    5196:	fe 01       	movw	r30, r28
    5198:	e3 52       	subi	r30, 0x23	; 35
    519a:	fe 4f       	sbci	r31, 0xFE	; 254
    519c:	80 81       	ld	r24, Z
    519e:	8f 5f       	subi	r24, 0xFF	; 255
    51a0:	8c 93       	st	X, r24
    51a2:	fe 01       	movw	r30, r28
    51a4:	e3 52       	subi	r30, 0x23	; 35
    51a6:	fe 4f       	sbci	r31, 0xFE	; 254
    51a8:	80 81       	ld	r24, Z
    51aa:	84 30       	cpi	r24, 0x04	; 4
    51ac:	08 f4       	brcc	.+2      	; 0x51b0 <main+0x2ab4>
    51ae:	21 ce       	rjmp	.-958    	; 0x4df2 <main+0x26f6>
					}

					Saved_Pass += Key_Value;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
    51b0:	8e 01       	movw	r16, r28
    51b2:	00 51       	subi	r16, 0x10	; 16
    51b4:	1e 4f       	sbci	r17, 0xFE	; 254
    51b6:	fe 01       	movw	r30, r28
    51b8:	e0 51       	subi	r30, 0x10	; 16
    51ba:	fe 4f       	sbci	r31, 0xFE	; 254
    51bc:	80 81       	ld	r24, Z
    51be:	91 81       	ldd	r25, Z+1	; 0x01
    51c0:	a2 81       	ldd	r26, Z+2	; 0x02
    51c2:	b3 81       	ldd	r27, Z+3	; 0x03
    51c4:	2a e0       	ldi	r18, 0x0A	; 10
    51c6:	30 e0       	ldi	r19, 0x00	; 0
    51c8:	40 e0       	ldi	r20, 0x00	; 0
    51ca:	50 e0       	ldi	r21, 0x00	; 0
    51cc:	bc 01       	movw	r22, r24
    51ce:	cd 01       	movw	r24, r26
    51d0:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    51d4:	da 01       	movw	r26, r20
    51d6:	c9 01       	movw	r24, r18
    51d8:	f8 01       	movw	r30, r16
    51da:	80 83       	st	Z, r24
    51dc:	91 83       	std	Z+1, r25	; 0x01
    51de:	a2 83       	std	Z+2, r26	; 0x02
    51e0:	b3 83       	std	Z+3, r27	; 0x03
				Temp_Pass = Saved_Pass;
    51e2:	9e 01       	movw	r18, r28
    51e4:	2c 51       	subi	r18, 0x1C	; 28
    51e6:	3e 4f       	sbci	r19, 0xFE	; 254
    51e8:	fe 01       	movw	r30, r28
    51ea:	e0 51       	subi	r30, 0x10	; 16
    51ec:	fe 4f       	sbci	r31, 0xFE	; 254
    51ee:	80 81       	ld	r24, Z
    51f0:	91 81       	ldd	r25, Z+1	; 0x01
    51f2:	a2 81       	ldd	r26, Z+2	; 0x02
    51f4:	b3 81       	ldd	r27, Z+3	; 0x03
    51f6:	f9 01       	movw	r30, r18
    51f8:	80 83       	st	Z, r24
    51fa:	91 83       	std	Z+1, r25	; 0x01
    51fc:	a2 83       	std	Z+2, r26	; 0x02
    51fe:	b3 83       	std	Z+3, r27	; 0x03
    5200:	56 c0       	rjmp	.+172    	; 0x52ae <main+0x2bb2>
				while (Temp_Pass > 0)
				{
					Get_Reversed_Pass = Temp_Pass % 10;
    5202:	8e 01       	movw	r16, r28
    5204:	08 51       	subi	r16, 0x18	; 24
    5206:	1e 4f       	sbci	r17, 0xFE	; 254
    5208:	fe 01       	movw	r30, r28
    520a:	ec 51       	subi	r30, 0x1C	; 28
    520c:	fe 4f       	sbci	r31, 0xFE	; 254
    520e:	80 81       	ld	r24, Z
    5210:	91 81       	ldd	r25, Z+1	; 0x01
    5212:	a2 81       	ldd	r26, Z+2	; 0x02
    5214:	b3 81       	ldd	r27, Z+3	; 0x03
    5216:	2a e0       	ldi	r18, 0x0A	; 10
    5218:	30 e0       	ldi	r19, 0x00	; 0
    521a:	40 e0       	ldi	r20, 0x00	; 0
    521c:	50 e0       	ldi	r21, 0x00	; 0
    521e:	bc 01       	movw	r22, r24
    5220:	cd 01       	movw	r24, r26
    5222:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	f8 01       	movw	r30, r16
    522c:	80 83       	st	Z, r24
    522e:	91 83       	std	Z+1, r25	; 0x01
    5230:	a2 83       	std	Z+2, r26	; 0x02
    5232:	b3 83       	std	Z+3, r27	; 0x03
					Reversed_Pass = (Reversed_Pass * 10) + Get_Reversed_Pass;
    5234:	fe 01       	movw	r30, r28
    5236:	e4 51       	subi	r30, 0x14	; 20
    5238:	fe 4f       	sbci	r31, 0xFE	; 254
    523a:	80 81       	ld	r24, Z
    523c:	91 81       	ldd	r25, Z+1	; 0x01
    523e:	a2 81       	ldd	r26, Z+2	; 0x02
    5240:	b3 81       	ldd	r27, Z+3	; 0x03
    5242:	2a e0       	ldi	r18, 0x0A	; 10
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	40 e0       	ldi	r20, 0x00	; 0
    5248:	50 e0       	ldi	r21, 0x00	; 0
    524a:	bc 01       	movw	r22, r24
    524c:	cd 01       	movw	r24, r26
    524e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsi3>
    5252:	9b 01       	movw	r18, r22
    5254:	ac 01       	movw	r20, r24
    5256:	be 01       	movw	r22, r28
    5258:	64 51       	subi	r22, 0x14	; 20
    525a:	7e 4f       	sbci	r23, 0xFE	; 254
    525c:	fe 01       	movw	r30, r28
    525e:	e8 51       	subi	r30, 0x18	; 24
    5260:	fe 4f       	sbci	r31, 0xFE	; 254
    5262:	80 81       	ld	r24, Z
    5264:	91 81       	ldd	r25, Z+1	; 0x01
    5266:	a2 81       	ldd	r26, Z+2	; 0x02
    5268:	b3 81       	ldd	r27, Z+3	; 0x03
    526a:	82 0f       	add	r24, r18
    526c:	93 1f       	adc	r25, r19
    526e:	a4 1f       	adc	r26, r20
    5270:	b5 1f       	adc	r27, r21
    5272:	fb 01       	movw	r30, r22
    5274:	80 83       	st	Z, r24
    5276:	91 83       	std	Z+1, r25	; 0x01
    5278:	a2 83       	std	Z+2, r26	; 0x02
    527a:	b3 83       	std	Z+3, r27	; 0x03
					Temp_Pass = Temp_Pass / 10;
    527c:	8e 01       	movw	r16, r28
    527e:	0c 51       	subi	r16, 0x1C	; 28
    5280:	1e 4f       	sbci	r17, 0xFE	; 254
    5282:	fe 01       	movw	r30, r28
    5284:	ec 51       	subi	r30, 0x1C	; 28
    5286:	fe 4f       	sbci	r31, 0xFE	; 254
    5288:	80 81       	ld	r24, Z
    528a:	91 81       	ldd	r25, Z+1	; 0x01
    528c:	a2 81       	ldd	r26, Z+2	; 0x02
    528e:	b3 81       	ldd	r27, Z+3	; 0x03
    5290:	2a e0       	ldi	r18, 0x0A	; 10
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	50 e0       	ldi	r21, 0x00	; 0
    5298:	bc 01       	movw	r22, r24
    529a:	cd 01       	movw	r24, r26
    529c:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__udivmodsi4>
    52a0:	da 01       	movw	r26, r20
    52a2:	c9 01       	movw	r24, r18
    52a4:	f8 01       	movw	r30, r16
    52a6:	80 83       	st	Z, r24
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	a2 83       	std	Z+2, r26	; 0x02
    52ac:	b3 83       	std	Z+3, r27	; 0x03
					Saved_Pass += Key_Value;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
				Temp_Pass = Saved_Pass;
				while (Temp_Pass > 0)
    52ae:	fe 01       	movw	r30, r28
    52b0:	ec 51       	subi	r30, 0x1C	; 28
    52b2:	fe 4f       	sbci	r31, 0xFE	; 254
    52b4:	80 81       	ld	r24, Z
    52b6:	91 81       	ldd	r25, Z+1	; 0x01
    52b8:	a2 81       	ldd	r26, Z+2	; 0x02
    52ba:	b3 81       	ldd	r27, Z+3	; 0x03
    52bc:	00 97       	sbiw	r24, 0x00	; 0
    52be:	a1 05       	cpc	r26, r1
    52c0:	b1 05       	cpc	r27, r1
    52c2:	09 f0       	breq	.+2      	; 0x52c6 <main+0x2bca>
    52c4:	9e cf       	rjmp	.-196    	; 0x5202 <main+0x2b06>
    52c6:	fe 01       	movw	r30, r28
    52c8:	e3 59       	subi	r30, 0x93	; 147
    52ca:	ff 4f       	sbci	r31, 0xFF	; 255
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	aa ef       	ldi	r26, 0xFA	; 250
    52d2:	b3 e4       	ldi	r27, 0x43	; 67
    52d4:	80 83       	st	Z, r24
    52d6:	91 83       	std	Z+1, r25	; 0x01
    52d8:	a2 83       	std	Z+2, r26	; 0x02
    52da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52dc:	8e 01       	movw	r16, r28
    52de:	07 59       	subi	r16, 0x97	; 151
    52e0:	1f 4f       	sbci	r17, 0xFF	; 255
    52e2:	fe 01       	movw	r30, r28
    52e4:	e3 59       	subi	r30, 0x93	; 147
    52e6:	ff 4f       	sbci	r31, 0xFF	; 255
    52e8:	60 81       	ld	r22, Z
    52ea:	71 81       	ldd	r23, Z+1	; 0x01
    52ec:	82 81       	ldd	r24, Z+2	; 0x02
    52ee:	93 81       	ldd	r25, Z+3	; 0x03
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	4a ef       	ldi	r20, 0xFA	; 250
    52f6:	54 e4       	ldi	r21, 0x44	; 68
    52f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	f8 01       	movw	r30, r16
    5302:	80 83       	st	Z, r24
    5304:	91 83       	std	Z+1, r25	; 0x01
    5306:	a2 83       	std	Z+2, r26	; 0x02
    5308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    530a:	fe 01       	movw	r30, r28
    530c:	e7 59       	subi	r30, 0x97	; 151
    530e:	ff 4f       	sbci	r31, 0xFF	; 255
    5310:	60 81       	ld	r22, Z
    5312:	71 81       	ldd	r23, Z+1	; 0x01
    5314:	82 81       	ldd	r24, Z+2	; 0x02
    5316:	93 81       	ldd	r25, Z+3	; 0x03
    5318:	20 e0       	ldi	r18, 0x00	; 0
    531a:	30 e0       	ldi	r19, 0x00	; 0
    531c:	40 e8       	ldi	r20, 0x80	; 128
    531e:	5f e3       	ldi	r21, 0x3F	; 63
    5320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5324:	88 23       	and	r24, r24
    5326:	44 f4       	brge	.+16     	; 0x5338 <main+0x2c3c>
		__ticks = 1;
    5328:	fe 01       	movw	r30, r28
    532a:	e9 59       	subi	r30, 0x99	; 153
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	81 e0       	ldi	r24, 0x01	; 1
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	91 83       	std	Z+1, r25	; 0x01
    5334:	80 83       	st	Z, r24
    5336:	64 c0       	rjmp	.+200    	; 0x5400 <main+0x2d04>
	else if (__tmp > 65535)
    5338:	fe 01       	movw	r30, r28
    533a:	e7 59       	subi	r30, 0x97	; 151
    533c:	ff 4f       	sbci	r31, 0xFF	; 255
    533e:	60 81       	ld	r22, Z
    5340:	71 81       	ldd	r23, Z+1	; 0x01
    5342:	82 81       	ldd	r24, Z+2	; 0x02
    5344:	93 81       	ldd	r25, Z+3	; 0x03
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	3f ef       	ldi	r19, 0xFF	; 255
    534a:	4f e7       	ldi	r20, 0x7F	; 127
    534c:	57 e4       	ldi	r21, 0x47	; 71
    534e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5352:	18 16       	cp	r1, r24
    5354:	0c f0       	brlt	.+2      	; 0x5358 <main+0x2c5c>
    5356:	43 c0       	rjmp	.+134    	; 0x53de <main+0x2ce2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5358:	fe 01       	movw	r30, r28
    535a:	e3 59       	subi	r30, 0x93	; 147
    535c:	ff 4f       	sbci	r31, 0xFF	; 255
    535e:	60 81       	ld	r22, Z
    5360:	71 81       	ldd	r23, Z+1	; 0x01
    5362:	82 81       	ldd	r24, Z+2	; 0x02
    5364:	93 81       	ldd	r25, Z+3	; 0x03
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	40 e2       	ldi	r20, 0x20	; 32
    536c:	51 e4       	ldi	r21, 0x41	; 65
    536e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5372:	dc 01       	movw	r26, r24
    5374:	cb 01       	movw	r24, r22
    5376:	8e 01       	movw	r16, r28
    5378:	09 59       	subi	r16, 0x99	; 153
    537a:	1f 4f       	sbci	r17, 0xFF	; 255
    537c:	bc 01       	movw	r22, r24
    537e:	cd 01       	movw	r24, r26
    5380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5384:	dc 01       	movw	r26, r24
    5386:	cb 01       	movw	r24, r22
    5388:	f8 01       	movw	r30, r16
    538a:	91 83       	std	Z+1, r25	; 0x01
    538c:	80 83       	st	Z, r24
    538e:	1f c0       	rjmp	.+62     	; 0x53ce <main+0x2cd2>
    5390:	fe 01       	movw	r30, r28
    5392:	eb 59       	subi	r30, 0x9B	; 155
    5394:	ff 4f       	sbci	r31, 0xFF	; 255
    5396:	88 ec       	ldi	r24, 0xC8	; 200
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	91 83       	std	Z+1, r25	; 0x01
    539c:	80 83       	st	Z, r24
    539e:	fe 01       	movw	r30, r28
    53a0:	eb 59       	subi	r30, 0x9B	; 155
    53a2:	ff 4f       	sbci	r31, 0xFF	; 255
    53a4:	80 81       	ld	r24, Z
    53a6:	91 81       	ldd	r25, Z+1	; 0x01
    53a8:	01 97       	sbiw	r24, 0x01	; 1
    53aa:	f1 f7       	brne	.-4      	; 0x53a8 <main+0x2cac>
    53ac:	fe 01       	movw	r30, r28
    53ae:	eb 59       	subi	r30, 0x9B	; 155
    53b0:	ff 4f       	sbci	r31, 0xFF	; 255
    53b2:	91 83       	std	Z+1, r25	; 0x01
    53b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53b6:	de 01       	movw	r26, r28
    53b8:	a9 59       	subi	r26, 0x99	; 153
    53ba:	bf 4f       	sbci	r27, 0xFF	; 255
    53bc:	fe 01       	movw	r30, r28
    53be:	e9 59       	subi	r30, 0x99	; 153
    53c0:	ff 4f       	sbci	r31, 0xFF	; 255
    53c2:	80 81       	ld	r24, Z
    53c4:	91 81       	ldd	r25, Z+1	; 0x01
    53c6:	01 97       	sbiw	r24, 0x01	; 1
    53c8:	11 96       	adiw	r26, 0x01	; 1
    53ca:	9c 93       	st	X, r25
    53cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ce:	fe 01       	movw	r30, r28
    53d0:	e9 59       	subi	r30, 0x99	; 153
    53d2:	ff 4f       	sbci	r31, 0xFF	; 255
    53d4:	80 81       	ld	r24, Z
    53d6:	91 81       	ldd	r25, Z+1	; 0x01
    53d8:	00 97       	sbiw	r24, 0x00	; 0
    53da:	d1 f6       	brne	.-76     	; 0x5390 <main+0x2c94>
    53dc:	27 c0       	rjmp	.+78     	; 0x542c <main+0x2d30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53de:	8e 01       	movw	r16, r28
    53e0:	09 59       	subi	r16, 0x99	; 153
    53e2:	1f 4f       	sbci	r17, 0xFF	; 255
    53e4:	fe 01       	movw	r30, r28
    53e6:	e7 59       	subi	r30, 0x97	; 151
    53e8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ea:	60 81       	ld	r22, Z
    53ec:	71 81       	ldd	r23, Z+1	; 0x01
    53ee:	82 81       	ldd	r24, Z+2	; 0x02
    53f0:	93 81       	ldd	r25, Z+3	; 0x03
    53f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	f8 01       	movw	r30, r16
    53fc:	91 83       	std	Z+1, r25	; 0x01
    53fe:	80 83       	st	Z, r24
    5400:	de 01       	movw	r26, r28
    5402:	ad 59       	subi	r26, 0x9D	; 157
    5404:	bf 4f       	sbci	r27, 0xFF	; 255
    5406:	fe 01       	movw	r30, r28
    5408:	e9 59       	subi	r30, 0x99	; 153
    540a:	ff 4f       	sbci	r31, 0xFF	; 255
    540c:	80 81       	ld	r24, Z
    540e:	91 81       	ldd	r25, Z+1	; 0x01
    5410:	8d 93       	st	X+, r24
    5412:	9c 93       	st	X, r25
    5414:	fe 01       	movw	r30, r28
    5416:	ed 59       	subi	r30, 0x9D	; 157
    5418:	ff 4f       	sbci	r31, 0xFF	; 255
    541a:	80 81       	ld	r24, Z
    541c:	91 81       	ldd	r25, Z+1	; 0x01
    541e:	01 97       	sbiw	r24, 0x01	; 1
    5420:	f1 f7       	brne	.-4      	; 0x541e <main+0x2d22>
    5422:	fe 01       	movw	r30, r28
    5424:	ed 59       	subi	r30, 0x9D	; 157
    5426:	ff 4f       	sbci	r31, 0xFF	; 255
    5428:	91 83       	std	Z+1, r25	; 0x01
    542a:	80 83       	st	Z, r24
					Get_Reversed_Pass = Temp_Pass % 10;
					Reversed_Pass = (Reversed_Pass * 10) + Get_Reversed_Pass;
					Temp_Pass = Temp_Pass / 10;
				}
				_delay_ms(500);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    5432:	fe 01       	movw	r30, r28
    5434:	e1 5a       	subi	r30, 0xA1	; 161
    5436:	ff 4f       	sbci	r31, 0xFF	; 255
    5438:	80 e0       	ldi	r24, 0x00	; 0
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	a0 e0       	ldi	r26, 0x00	; 0
    543e:	b0 e4       	ldi	r27, 0x40	; 64
    5440:	80 83       	st	Z, r24
    5442:	91 83       	std	Z+1, r25	; 0x01
    5444:	a2 83       	std	Z+2, r26	; 0x02
    5446:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5448:	8e 01       	movw	r16, r28
    544a:	05 5a       	subi	r16, 0xA5	; 165
    544c:	1f 4f       	sbci	r17, 0xFF	; 255
    544e:	fe 01       	movw	r30, r28
    5450:	e1 5a       	subi	r30, 0xA1	; 161
    5452:	ff 4f       	sbci	r31, 0xFF	; 255
    5454:	60 81       	ld	r22, Z
    5456:	71 81       	ldd	r23, Z+1	; 0x01
    5458:	82 81       	ldd	r24, Z+2	; 0x02
    545a:	93 81       	ldd	r25, Z+3	; 0x03
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	4a ef       	ldi	r20, 0xFA	; 250
    5462:	54 e4       	ldi	r21, 0x44	; 68
    5464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	f8 01       	movw	r30, r16
    546e:	80 83       	st	Z, r24
    5470:	91 83       	std	Z+1, r25	; 0x01
    5472:	a2 83       	std	Z+2, r26	; 0x02
    5474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5476:	fe 01       	movw	r30, r28
    5478:	e5 5a       	subi	r30, 0xA5	; 165
    547a:	ff 4f       	sbci	r31, 0xFF	; 255
    547c:	60 81       	ld	r22, Z
    547e:	71 81       	ldd	r23, Z+1	; 0x01
    5480:	82 81       	ldd	r24, Z+2	; 0x02
    5482:	93 81       	ldd	r25, Z+3	; 0x03
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	40 e8       	ldi	r20, 0x80	; 128
    548a:	5f e3       	ldi	r21, 0x3F	; 63
    548c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5490:	88 23       	and	r24, r24
    5492:	44 f4       	brge	.+16     	; 0x54a4 <main+0x2da8>
		__ticks = 1;
    5494:	fe 01       	movw	r30, r28
    5496:	e7 5a       	subi	r30, 0xA7	; 167
    5498:	ff 4f       	sbci	r31, 0xFF	; 255
    549a:	81 e0       	ldi	r24, 0x01	; 1
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	91 83       	std	Z+1, r25	; 0x01
    54a0:	80 83       	st	Z, r24
    54a2:	64 c0       	rjmp	.+200    	; 0x556c <main+0x2e70>
	else if (__tmp > 65535)
    54a4:	fe 01       	movw	r30, r28
    54a6:	e5 5a       	subi	r30, 0xA5	; 165
    54a8:	ff 4f       	sbci	r31, 0xFF	; 255
    54aa:	60 81       	ld	r22, Z
    54ac:	71 81       	ldd	r23, Z+1	; 0x01
    54ae:	82 81       	ldd	r24, Z+2	; 0x02
    54b0:	93 81       	ldd	r25, Z+3	; 0x03
    54b2:	20 e0       	ldi	r18, 0x00	; 0
    54b4:	3f ef       	ldi	r19, 0xFF	; 255
    54b6:	4f e7       	ldi	r20, 0x7F	; 127
    54b8:	57 e4       	ldi	r21, 0x47	; 71
    54ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54be:	18 16       	cp	r1, r24
    54c0:	0c f0       	brlt	.+2      	; 0x54c4 <main+0x2dc8>
    54c2:	43 c0       	rjmp	.+134    	; 0x554a <main+0x2e4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c4:	fe 01       	movw	r30, r28
    54c6:	e1 5a       	subi	r30, 0xA1	; 161
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	60 81       	ld	r22, Z
    54cc:	71 81       	ldd	r23, Z+1	; 0x01
    54ce:	82 81       	ldd	r24, Z+2	; 0x02
    54d0:	93 81       	ldd	r25, Z+3	; 0x03
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	40 e2       	ldi	r20, 0x20	; 32
    54d8:	51 e4       	ldi	r21, 0x41	; 65
    54da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	8e 01       	movw	r16, r28
    54e4:	07 5a       	subi	r16, 0xA7	; 167
    54e6:	1f 4f       	sbci	r17, 0xFF	; 255
    54e8:	bc 01       	movw	r22, r24
    54ea:	cd 01       	movw	r24, r26
    54ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54f0:	dc 01       	movw	r26, r24
    54f2:	cb 01       	movw	r24, r22
    54f4:	f8 01       	movw	r30, r16
    54f6:	91 83       	std	Z+1, r25	; 0x01
    54f8:	80 83       	st	Z, r24
    54fa:	1f c0       	rjmp	.+62     	; 0x553a <main+0x2e3e>
    54fc:	fe 01       	movw	r30, r28
    54fe:	e9 5a       	subi	r30, 0xA9	; 169
    5500:	ff 4f       	sbci	r31, 0xFF	; 255
    5502:	88 ec       	ldi	r24, 0xC8	; 200
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	91 83       	std	Z+1, r25	; 0x01
    5508:	80 83       	st	Z, r24
    550a:	fe 01       	movw	r30, r28
    550c:	e9 5a       	subi	r30, 0xA9	; 169
    550e:	ff 4f       	sbci	r31, 0xFF	; 255
    5510:	80 81       	ld	r24, Z
    5512:	91 81       	ldd	r25, Z+1	; 0x01
    5514:	01 97       	sbiw	r24, 0x01	; 1
    5516:	f1 f7       	brne	.-4      	; 0x5514 <main+0x2e18>
    5518:	fe 01       	movw	r30, r28
    551a:	e9 5a       	subi	r30, 0xA9	; 169
    551c:	ff 4f       	sbci	r31, 0xFF	; 255
    551e:	91 83       	std	Z+1, r25	; 0x01
    5520:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5522:	de 01       	movw	r26, r28
    5524:	a7 5a       	subi	r26, 0xA7	; 167
    5526:	bf 4f       	sbci	r27, 0xFF	; 255
    5528:	fe 01       	movw	r30, r28
    552a:	e7 5a       	subi	r30, 0xA7	; 167
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	80 81       	ld	r24, Z
    5530:	91 81       	ldd	r25, Z+1	; 0x01
    5532:	01 97       	sbiw	r24, 0x01	; 1
    5534:	11 96       	adiw	r26, 0x01	; 1
    5536:	9c 93       	st	X, r25
    5538:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    553a:	fe 01       	movw	r30, r28
    553c:	e7 5a       	subi	r30, 0xA7	; 167
    553e:	ff 4f       	sbci	r31, 0xFF	; 255
    5540:	80 81       	ld	r24, Z
    5542:	91 81       	ldd	r25, Z+1	; 0x01
    5544:	00 97       	sbiw	r24, 0x00	; 0
    5546:	d1 f6       	brne	.-76     	; 0x54fc <main+0x2e00>
    5548:	27 c0       	rjmp	.+78     	; 0x5598 <main+0x2e9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    554a:	8e 01       	movw	r16, r28
    554c:	07 5a       	subi	r16, 0xA7	; 167
    554e:	1f 4f       	sbci	r17, 0xFF	; 255
    5550:	fe 01       	movw	r30, r28
    5552:	e5 5a       	subi	r30, 0xA5	; 165
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	60 81       	ld	r22, Z
    5558:	71 81       	ldd	r23, Z+1	; 0x01
    555a:	82 81       	ldd	r24, Z+2	; 0x02
    555c:	93 81       	ldd	r25, Z+3	; 0x03
    555e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5562:	dc 01       	movw	r26, r24
    5564:	cb 01       	movw	r24, r22
    5566:	f8 01       	movw	r30, r16
    5568:	91 83       	std	Z+1, r25	; 0x01
    556a:	80 83       	st	Z, r24
    556c:	de 01       	movw	r26, r28
    556e:	ab 5a       	subi	r26, 0xAB	; 171
    5570:	bf 4f       	sbci	r27, 0xFF	; 255
    5572:	fe 01       	movw	r30, r28
    5574:	e7 5a       	subi	r30, 0xA7	; 167
    5576:	ff 4f       	sbci	r31, 0xFF	; 255
    5578:	80 81       	ld	r24, Z
    557a:	91 81       	ldd	r25, Z+1	; 0x01
    557c:	8d 93       	st	X+, r24
    557e:	9c 93       	st	X, r25
    5580:	fe 01       	movw	r30, r28
    5582:	eb 5a       	subi	r30, 0xAB	; 171
    5584:	ff 4f       	sbci	r31, 0xFF	; 255
    5586:	80 81       	ld	r24, Z
    5588:	91 81       	ldd	r25, Z+1	; 0x01
    558a:	01 97       	sbiw	r24, 0x01	; 1
    558c:	f1 f7       	brne	.-4      	; 0x558a <main+0x2e8e>
    558e:	fe 01       	movw	r30, r28
    5590:	eb 5a       	subi	r30, 0xAB	; 171
    5592:	ff 4f       	sbci	r31, 0xFF	; 255
    5594:	91 83       	std	Z+1, r25	; 0x01
    5596:	80 83       	st	Z, r24
				_delay_ms(2);
				LCD_VoidSendString("Password changed");
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	91 e0       	ldi	r25, 0x01	; 1
    559c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_VoidSendString>
    55a0:	fe 01       	movw	r30, r28
    55a2:	ef 5a       	subi	r30, 0xAF	; 175
    55a4:	ff 4f       	sbci	r31, 0xFF	; 255
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	aa ef       	ldi	r26, 0xFA	; 250
    55ac:	b3 e4       	ldi	r27, 0x43	; 67
    55ae:	80 83       	st	Z, r24
    55b0:	91 83       	std	Z+1, r25	; 0x01
    55b2:	a2 83       	std	Z+2, r26	; 0x02
    55b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55b6:	8e 01       	movw	r16, r28
    55b8:	03 5b       	subi	r16, 0xB3	; 179
    55ba:	1f 4f       	sbci	r17, 0xFF	; 255
    55bc:	fe 01       	movw	r30, r28
    55be:	ef 5a       	subi	r30, 0xAF	; 175
    55c0:	ff 4f       	sbci	r31, 0xFF	; 255
    55c2:	60 81       	ld	r22, Z
    55c4:	71 81       	ldd	r23, Z+1	; 0x01
    55c6:	82 81       	ldd	r24, Z+2	; 0x02
    55c8:	93 81       	ldd	r25, Z+3	; 0x03
    55ca:	20 e0       	ldi	r18, 0x00	; 0
    55cc:	30 e0       	ldi	r19, 0x00	; 0
    55ce:	4a ef       	ldi	r20, 0xFA	; 250
    55d0:	54 e4       	ldi	r21, 0x44	; 68
    55d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55d6:	dc 01       	movw	r26, r24
    55d8:	cb 01       	movw	r24, r22
    55da:	f8 01       	movw	r30, r16
    55dc:	80 83       	st	Z, r24
    55de:	91 83       	std	Z+1, r25	; 0x01
    55e0:	a2 83       	std	Z+2, r26	; 0x02
    55e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55e4:	fe 01       	movw	r30, r28
    55e6:	e3 5b       	subi	r30, 0xB3	; 179
    55e8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ea:	60 81       	ld	r22, Z
    55ec:	71 81       	ldd	r23, Z+1	; 0x01
    55ee:	82 81       	ldd	r24, Z+2	; 0x02
    55f0:	93 81       	ldd	r25, Z+3	; 0x03
    55f2:	20 e0       	ldi	r18, 0x00	; 0
    55f4:	30 e0       	ldi	r19, 0x00	; 0
    55f6:	40 e8       	ldi	r20, 0x80	; 128
    55f8:	5f e3       	ldi	r21, 0x3F	; 63
    55fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55fe:	88 23       	and	r24, r24
    5600:	44 f4       	brge	.+16     	; 0x5612 <main+0x2f16>
		__ticks = 1;
    5602:	fe 01       	movw	r30, r28
    5604:	e5 5b       	subi	r30, 0xB5	; 181
    5606:	ff 4f       	sbci	r31, 0xFF	; 255
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	91 83       	std	Z+1, r25	; 0x01
    560e:	80 83       	st	Z, r24
    5610:	64 c0       	rjmp	.+200    	; 0x56da <main+0x2fde>
	else if (__tmp > 65535)
    5612:	fe 01       	movw	r30, r28
    5614:	e3 5b       	subi	r30, 0xB3	; 179
    5616:	ff 4f       	sbci	r31, 0xFF	; 255
    5618:	60 81       	ld	r22, Z
    561a:	71 81       	ldd	r23, Z+1	; 0x01
    561c:	82 81       	ldd	r24, Z+2	; 0x02
    561e:	93 81       	ldd	r25, Z+3	; 0x03
    5620:	20 e0       	ldi	r18, 0x00	; 0
    5622:	3f ef       	ldi	r19, 0xFF	; 255
    5624:	4f e7       	ldi	r20, 0x7F	; 127
    5626:	57 e4       	ldi	r21, 0x47	; 71
    5628:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    562c:	18 16       	cp	r1, r24
    562e:	0c f0       	brlt	.+2      	; 0x5632 <main+0x2f36>
    5630:	43 c0       	rjmp	.+134    	; 0x56b8 <main+0x2fbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5632:	fe 01       	movw	r30, r28
    5634:	ef 5a       	subi	r30, 0xAF	; 175
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	60 81       	ld	r22, Z
    563a:	71 81       	ldd	r23, Z+1	; 0x01
    563c:	82 81       	ldd	r24, Z+2	; 0x02
    563e:	93 81       	ldd	r25, Z+3	; 0x03
    5640:	20 e0       	ldi	r18, 0x00	; 0
    5642:	30 e0       	ldi	r19, 0x00	; 0
    5644:	40 e2       	ldi	r20, 0x20	; 32
    5646:	51 e4       	ldi	r21, 0x41	; 65
    5648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    564c:	dc 01       	movw	r26, r24
    564e:	cb 01       	movw	r24, r22
    5650:	8e 01       	movw	r16, r28
    5652:	05 5b       	subi	r16, 0xB5	; 181
    5654:	1f 4f       	sbci	r17, 0xFF	; 255
    5656:	bc 01       	movw	r22, r24
    5658:	cd 01       	movw	r24, r26
    565a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    565e:	dc 01       	movw	r26, r24
    5660:	cb 01       	movw	r24, r22
    5662:	f8 01       	movw	r30, r16
    5664:	91 83       	std	Z+1, r25	; 0x01
    5666:	80 83       	st	Z, r24
    5668:	1f c0       	rjmp	.+62     	; 0x56a8 <main+0x2fac>
    566a:	fe 01       	movw	r30, r28
    566c:	e7 5b       	subi	r30, 0xB7	; 183
    566e:	ff 4f       	sbci	r31, 0xFF	; 255
    5670:	88 ec       	ldi	r24, 0xC8	; 200
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	91 83       	std	Z+1, r25	; 0x01
    5676:	80 83       	st	Z, r24
    5678:	fe 01       	movw	r30, r28
    567a:	e7 5b       	subi	r30, 0xB7	; 183
    567c:	ff 4f       	sbci	r31, 0xFF	; 255
    567e:	80 81       	ld	r24, Z
    5680:	91 81       	ldd	r25, Z+1	; 0x01
    5682:	01 97       	sbiw	r24, 0x01	; 1
    5684:	f1 f7       	brne	.-4      	; 0x5682 <main+0x2f86>
    5686:	fe 01       	movw	r30, r28
    5688:	e7 5b       	subi	r30, 0xB7	; 183
    568a:	ff 4f       	sbci	r31, 0xFF	; 255
    568c:	91 83       	std	Z+1, r25	; 0x01
    568e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5690:	de 01       	movw	r26, r28
    5692:	a5 5b       	subi	r26, 0xB5	; 181
    5694:	bf 4f       	sbci	r27, 0xFF	; 255
    5696:	fe 01       	movw	r30, r28
    5698:	e5 5b       	subi	r30, 0xB5	; 181
    569a:	ff 4f       	sbci	r31, 0xFF	; 255
    569c:	80 81       	ld	r24, Z
    569e:	91 81       	ldd	r25, Z+1	; 0x01
    56a0:	01 97       	sbiw	r24, 0x01	; 1
    56a2:	11 96       	adiw	r26, 0x01	; 1
    56a4:	9c 93       	st	X, r25
    56a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56a8:	fe 01       	movw	r30, r28
    56aa:	e5 5b       	subi	r30, 0xB5	; 181
    56ac:	ff 4f       	sbci	r31, 0xFF	; 255
    56ae:	80 81       	ld	r24, Z
    56b0:	91 81       	ldd	r25, Z+1	; 0x01
    56b2:	00 97       	sbiw	r24, 0x00	; 0
    56b4:	d1 f6       	brne	.-76     	; 0x566a <main+0x2f6e>
    56b6:	27 c0       	rjmp	.+78     	; 0x5706 <main+0x300a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56b8:	8e 01       	movw	r16, r28
    56ba:	05 5b       	subi	r16, 0xB5	; 181
    56bc:	1f 4f       	sbci	r17, 0xFF	; 255
    56be:	fe 01       	movw	r30, r28
    56c0:	e3 5b       	subi	r30, 0xB3	; 179
    56c2:	ff 4f       	sbci	r31, 0xFF	; 255
    56c4:	60 81       	ld	r22, Z
    56c6:	71 81       	ldd	r23, Z+1	; 0x01
    56c8:	82 81       	ldd	r24, Z+2	; 0x02
    56ca:	93 81       	ldd	r25, Z+3	; 0x03
    56cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d0:	dc 01       	movw	r26, r24
    56d2:	cb 01       	movw	r24, r22
    56d4:	f8 01       	movw	r30, r16
    56d6:	91 83       	std	Z+1, r25	; 0x01
    56d8:	80 83       	st	Z, r24
    56da:	de 01       	movw	r26, r28
    56dc:	a9 5b       	subi	r26, 0xB9	; 185
    56de:	bf 4f       	sbci	r27, 0xFF	; 255
    56e0:	fe 01       	movw	r30, r28
    56e2:	e5 5b       	subi	r30, 0xB5	; 181
    56e4:	ff 4f       	sbci	r31, 0xFF	; 255
    56e6:	80 81       	ld	r24, Z
    56e8:	91 81       	ldd	r25, Z+1	; 0x01
    56ea:	8d 93       	st	X+, r24
    56ec:	9c 93       	st	X, r25
    56ee:	fe 01       	movw	r30, r28
    56f0:	e9 5b       	subi	r30, 0xB9	; 185
    56f2:	ff 4f       	sbci	r31, 0xFF	; 255
    56f4:	80 81       	ld	r24, Z
    56f6:	91 81       	ldd	r25, Z+1	; 0x01
    56f8:	01 97       	sbiw	r24, 0x01	; 1
    56fa:	f1 f7       	brne	.-4      	; 0x56f8 <main+0x2ffc>
    56fc:	fe 01       	movw	r30, r28
    56fe:	e9 5b       	subi	r30, 0xB9	; 185
    5700:	ff 4f       	sbci	r31, 0xFF	; 255
    5702:	91 83       	std	Z+1, r25	; 0x01
    5704:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    5706:	81 e0       	ldi	r24, 0x01	; 1
    5708:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    570c:	fe 01       	movw	r30, r28
    570e:	ed 5b       	subi	r30, 0xBD	; 189
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	80 e0       	ldi	r24, 0x00	; 0
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	a0 e0       	ldi	r26, 0x00	; 0
    5718:	b0 e4       	ldi	r27, 0x40	; 64
    571a:	80 83       	st	Z, r24
    571c:	91 83       	std	Z+1, r25	; 0x01
    571e:	a2 83       	std	Z+2, r26	; 0x02
    5720:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5722:	8e 01       	movw	r16, r28
    5724:	01 5c       	subi	r16, 0xC1	; 193
    5726:	1f 4f       	sbci	r17, 0xFF	; 255
    5728:	fe 01       	movw	r30, r28
    572a:	ed 5b       	subi	r30, 0xBD	; 189
    572c:	ff 4f       	sbci	r31, 0xFF	; 255
    572e:	60 81       	ld	r22, Z
    5730:	71 81       	ldd	r23, Z+1	; 0x01
    5732:	82 81       	ldd	r24, Z+2	; 0x02
    5734:	93 81       	ldd	r25, Z+3	; 0x03
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	4a ef       	ldi	r20, 0xFA	; 250
    573c:	54 e4       	ldi	r21, 0x44	; 68
    573e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5742:	dc 01       	movw	r26, r24
    5744:	cb 01       	movw	r24, r22
    5746:	f8 01       	movw	r30, r16
    5748:	80 83       	st	Z, r24
    574a:	91 83       	std	Z+1, r25	; 0x01
    574c:	a2 83       	std	Z+2, r26	; 0x02
    574e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5750:	fe 01       	movw	r30, r28
    5752:	ff 96       	adiw	r30, 0x3f	; 63
    5754:	60 81       	ld	r22, Z
    5756:	71 81       	ldd	r23, Z+1	; 0x01
    5758:	82 81       	ldd	r24, Z+2	; 0x02
    575a:	93 81       	ldd	r25, Z+3	; 0x03
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	40 e8       	ldi	r20, 0x80	; 128
    5762:	5f e3       	ldi	r21, 0x3F	; 63
    5764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5768:	88 23       	and	r24, r24
    576a:	2c f4       	brge	.+10     	; 0x5776 <main+0x307a>
		__ticks = 1;
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	9e af       	std	Y+62, r25	; 0x3e
    5772:	8d af       	std	Y+61, r24	; 0x3d
    5774:	47 c0       	rjmp	.+142    	; 0x5804 <main+0x3108>
	else if (__tmp > 65535)
    5776:	fe 01       	movw	r30, r28
    5778:	ff 96       	adiw	r30, 0x3f	; 63
    577a:	60 81       	ld	r22, Z
    577c:	71 81       	ldd	r23, Z+1	; 0x01
    577e:	82 81       	ldd	r24, Z+2	; 0x02
    5780:	93 81       	ldd	r25, Z+3	; 0x03
    5782:	20 e0       	ldi	r18, 0x00	; 0
    5784:	3f ef       	ldi	r19, 0xFF	; 255
    5786:	4f e7       	ldi	r20, 0x7F	; 127
    5788:	57 e4       	ldi	r21, 0x47	; 71
    578a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    578e:	18 16       	cp	r1, r24
    5790:	6c f5       	brge	.+90     	; 0x57ec <main+0x30f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5792:	fe 01       	movw	r30, r28
    5794:	ed 5b       	subi	r30, 0xBD	; 189
    5796:	ff 4f       	sbci	r31, 0xFF	; 255
    5798:	60 81       	ld	r22, Z
    579a:	71 81       	ldd	r23, Z+1	; 0x01
    579c:	82 81       	ldd	r24, Z+2	; 0x02
    579e:	93 81       	ldd	r25, Z+3	; 0x03
    57a0:	20 e0       	ldi	r18, 0x00	; 0
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	40 e2       	ldi	r20, 0x20	; 32
    57a6:	51 e4       	ldi	r21, 0x41	; 65
    57a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ac:	dc 01       	movw	r26, r24
    57ae:	cb 01       	movw	r24, r22
    57b0:	bc 01       	movw	r22, r24
    57b2:	cd 01       	movw	r24, r26
    57b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b8:	dc 01       	movw	r26, r24
    57ba:	cb 01       	movw	r24, r22
    57bc:	9e af       	std	Y+62, r25	; 0x3e
    57be:	8d af       	std	Y+61, r24	; 0x3d
    57c0:	0f c0       	rjmp	.+30     	; 0x57e0 <main+0x30e4>
    57c2:	88 ec       	ldi	r24, 0xC8	; 200
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	9c af       	std	Y+60, r25	; 0x3c
    57c8:	8b af       	std	Y+59, r24	; 0x3b
    57ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    57cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    57ce:	01 97       	sbiw	r24, 0x01	; 1
    57d0:	f1 f7       	brne	.-4      	; 0x57ce <main+0x30d2>
    57d2:	9c af       	std	Y+60, r25	; 0x3c
    57d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    57d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    57da:	01 97       	sbiw	r24, 0x01	; 1
    57dc:	9e af       	std	Y+62, r25	; 0x3e
    57de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    57e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    57e4:	00 97       	sbiw	r24, 0x00	; 0
    57e6:	69 f7       	brne	.-38     	; 0x57c2 <main+0x30c6>
    57e8:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <main+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ec:	fe 01       	movw	r30, r28
    57ee:	ff 96       	adiw	r30, 0x3f	; 63
    57f0:	60 81       	ld	r22, Z
    57f2:	71 81       	ldd	r23, Z+1	; 0x01
    57f4:	82 81       	ldd	r24, Z+2	; 0x02
    57f6:	93 81       	ldd	r25, Z+3	; 0x03
    57f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57fc:	dc 01       	movw	r26, r24
    57fe:	cb 01       	movw	r24, r22
    5800:	9e af       	std	Y+62, r25	; 0x3e
    5802:	8d af       	std	Y+61, r24	; 0x3d
    5804:	8d ad       	ldd	r24, Y+61	; 0x3d
    5806:	9e ad       	ldd	r25, Y+62	; 0x3e
    5808:	9a af       	std	Y+58, r25	; 0x3a
    580a:	89 af       	std	Y+57, r24	; 0x39
    580c:	89 ad       	ldd	r24, Y+57	; 0x39
    580e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5810:	01 97       	sbiw	r24, 0x01	; 1
    5812:	f1 f7       	brne	.-4      	; 0x5810 <main+0x3114>
    5814:	9a af       	std	Y+58, r25	; 0x3a
    5816:	89 af       	std	Y+57, r24	; 0x39
    5818:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <main+0x264>
				_delay_ms(2);
			}
			else
			{
				LCD_VoidSendStringFromPos("Wrong Password",0,1);
    581c:	8d ec       	ldi	r24, 0xCD	; 205
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	60 e0       	ldi	r22, 0x00	; 0
    5822:	41 e0       	ldi	r20, 0x01	; 1
    5824:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
    5828:	80 e0       	ldi	r24, 0x00	; 0
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	aa ef       	ldi	r26, 0xFA	; 250
    582e:	b3 e4       	ldi	r27, 0x43	; 67
    5830:	8d ab       	std	Y+53, r24	; 0x35
    5832:	9e ab       	std	Y+54, r25	; 0x36
    5834:	af ab       	std	Y+55, r26	; 0x37
    5836:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5838:	6d a9       	ldd	r22, Y+53	; 0x35
    583a:	7e a9       	ldd	r23, Y+54	; 0x36
    583c:	8f a9       	ldd	r24, Y+55	; 0x37
    583e:	98 ad       	ldd	r25, Y+56	; 0x38
    5840:	20 e0       	ldi	r18, 0x00	; 0
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	4a ef       	ldi	r20, 0xFA	; 250
    5846:	54 e4       	ldi	r21, 0x44	; 68
    5848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    584c:	dc 01       	movw	r26, r24
    584e:	cb 01       	movw	r24, r22
    5850:	89 ab       	std	Y+49, r24	; 0x31
    5852:	9a ab       	std	Y+50, r25	; 0x32
    5854:	ab ab       	std	Y+51, r26	; 0x33
    5856:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5858:	69 a9       	ldd	r22, Y+49	; 0x31
    585a:	7a a9       	ldd	r23, Y+50	; 0x32
    585c:	8b a9       	ldd	r24, Y+51	; 0x33
    585e:	9c a9       	ldd	r25, Y+52	; 0x34
    5860:	20 e0       	ldi	r18, 0x00	; 0
    5862:	30 e0       	ldi	r19, 0x00	; 0
    5864:	40 e8       	ldi	r20, 0x80	; 128
    5866:	5f e3       	ldi	r21, 0x3F	; 63
    5868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    586c:	88 23       	and	r24, r24
    586e:	2c f4       	brge	.+10     	; 0x587a <main+0x317e>
		__ticks = 1;
    5870:	81 e0       	ldi	r24, 0x01	; 1
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	98 ab       	std	Y+48, r25	; 0x30
    5876:	8f a7       	std	Y+47, r24	; 0x2f
    5878:	3f c0       	rjmp	.+126    	; 0x58f8 <main+0x31fc>
	else if (__tmp > 65535)
    587a:	69 a9       	ldd	r22, Y+49	; 0x31
    587c:	7a a9       	ldd	r23, Y+50	; 0x32
    587e:	8b a9       	ldd	r24, Y+51	; 0x33
    5880:	9c a9       	ldd	r25, Y+52	; 0x34
    5882:	20 e0       	ldi	r18, 0x00	; 0
    5884:	3f ef       	ldi	r19, 0xFF	; 255
    5886:	4f e7       	ldi	r20, 0x7F	; 127
    5888:	57 e4       	ldi	r21, 0x47	; 71
    588a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    588e:	18 16       	cp	r1, r24
    5890:	4c f5       	brge	.+82     	; 0x58e4 <main+0x31e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5892:	6d a9       	ldd	r22, Y+53	; 0x35
    5894:	7e a9       	ldd	r23, Y+54	; 0x36
    5896:	8f a9       	ldd	r24, Y+55	; 0x37
    5898:	98 ad       	ldd	r25, Y+56	; 0x38
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	40 e2       	ldi	r20, 0x20	; 32
    58a0:	51 e4       	ldi	r21, 0x41	; 65
    58a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58a6:	dc 01       	movw	r26, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	bc 01       	movw	r22, r24
    58ac:	cd 01       	movw	r24, r26
    58ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	98 ab       	std	Y+48, r25	; 0x30
    58b8:	8f a7       	std	Y+47, r24	; 0x2f
    58ba:	0f c0       	rjmp	.+30     	; 0x58da <main+0x31de>
    58bc:	88 ec       	ldi	r24, 0xC8	; 200
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	9e a7       	std	Y+46, r25	; 0x2e
    58c2:	8d a7       	std	Y+45, r24	; 0x2d
    58c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    58c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    58c8:	01 97       	sbiw	r24, 0x01	; 1
    58ca:	f1 f7       	brne	.-4      	; 0x58c8 <main+0x31cc>
    58cc:	9e a7       	std	Y+46, r25	; 0x2e
    58ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    58d2:	98 a9       	ldd	r25, Y+48	; 0x30
    58d4:	01 97       	sbiw	r24, 0x01	; 1
    58d6:	98 ab       	std	Y+48, r25	; 0x30
    58d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58da:	8f a5       	ldd	r24, Y+47	; 0x2f
    58dc:	98 a9       	ldd	r25, Y+48	; 0x30
    58de:	00 97       	sbiw	r24, 0x00	; 0
    58e0:	69 f7       	brne	.-38     	; 0x58bc <main+0x31c0>
    58e2:	14 c0       	rjmp	.+40     	; 0x590c <main+0x3210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58e4:	69 a9       	ldd	r22, Y+49	; 0x31
    58e6:	7a a9       	ldd	r23, Y+50	; 0x32
    58e8:	8b a9       	ldd	r24, Y+51	; 0x33
    58ea:	9c a9       	ldd	r25, Y+52	; 0x34
    58ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f0:	dc 01       	movw	r26, r24
    58f2:	cb 01       	movw	r24, r22
    58f4:	98 ab       	std	Y+48, r25	; 0x30
    58f6:	8f a7       	std	Y+47, r24	; 0x2f
    58f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    58fa:	98 a9       	ldd	r25, Y+48	; 0x30
    58fc:	9c a7       	std	Y+44, r25	; 0x2c
    58fe:	8b a7       	std	Y+43, r24	; 0x2b
    5900:	8b a5       	ldd	r24, Y+43	; 0x2b
    5902:	9c a5       	ldd	r25, Y+44	; 0x2c
    5904:	01 97       	sbiw	r24, 0x01	; 1
    5906:	f1 f7       	brne	.-4      	; 0x5904 <main+0x3208>
    5908:	9c a7       	std	Y+44, r25	; 0x2c
    590a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    590c:	81 e0       	ldi	r24, 0x01	; 1
    590e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    5912:	80 e0       	ldi	r24, 0x00	; 0
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	a0 e0       	ldi	r26, 0x00	; 0
    5918:	b0 e4       	ldi	r27, 0x40	; 64
    591a:	8f a3       	std	Y+39, r24	; 0x27
    591c:	98 a7       	std	Y+40, r25	; 0x28
    591e:	a9 a7       	std	Y+41, r26	; 0x29
    5920:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5922:	6f a1       	ldd	r22, Y+39	; 0x27
    5924:	78 a5       	ldd	r23, Y+40	; 0x28
    5926:	89 a5       	ldd	r24, Y+41	; 0x29
    5928:	9a a5       	ldd	r25, Y+42	; 0x2a
    592a:	20 e0       	ldi	r18, 0x00	; 0
    592c:	30 e0       	ldi	r19, 0x00	; 0
    592e:	4a ef       	ldi	r20, 0xFA	; 250
    5930:	54 e4       	ldi	r21, 0x44	; 68
    5932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5936:	dc 01       	movw	r26, r24
    5938:	cb 01       	movw	r24, r22
    593a:	8b a3       	std	Y+35, r24	; 0x23
    593c:	9c a3       	std	Y+36, r25	; 0x24
    593e:	ad a3       	std	Y+37, r26	; 0x25
    5940:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5942:	6b a1       	ldd	r22, Y+35	; 0x23
    5944:	7c a1       	ldd	r23, Y+36	; 0x24
    5946:	8d a1       	ldd	r24, Y+37	; 0x25
    5948:	9e a1       	ldd	r25, Y+38	; 0x26
    594a:	20 e0       	ldi	r18, 0x00	; 0
    594c:	30 e0       	ldi	r19, 0x00	; 0
    594e:	40 e8       	ldi	r20, 0x80	; 128
    5950:	5f e3       	ldi	r21, 0x3F	; 63
    5952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5956:	88 23       	and	r24, r24
    5958:	2c f4       	brge	.+10     	; 0x5964 <main+0x3268>
		__ticks = 1;
    595a:	81 e0       	ldi	r24, 0x01	; 1
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	9a a3       	std	Y+34, r25	; 0x22
    5960:	89 a3       	std	Y+33, r24	; 0x21
    5962:	3f c0       	rjmp	.+126    	; 0x59e2 <main+0x32e6>
	else if (__tmp > 65535)
    5964:	6b a1       	ldd	r22, Y+35	; 0x23
    5966:	7c a1       	ldd	r23, Y+36	; 0x24
    5968:	8d a1       	ldd	r24, Y+37	; 0x25
    596a:	9e a1       	ldd	r25, Y+38	; 0x26
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	3f ef       	ldi	r19, 0xFF	; 255
    5970:	4f e7       	ldi	r20, 0x7F	; 127
    5972:	57 e4       	ldi	r21, 0x47	; 71
    5974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5978:	18 16       	cp	r1, r24
    597a:	4c f5       	brge	.+82     	; 0x59ce <main+0x32d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    597c:	6f a1       	ldd	r22, Y+39	; 0x27
    597e:	78 a5       	ldd	r23, Y+40	; 0x28
    5980:	89 a5       	ldd	r24, Y+41	; 0x29
    5982:	9a a5       	ldd	r25, Y+42	; 0x2a
    5984:	20 e0       	ldi	r18, 0x00	; 0
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	40 e2       	ldi	r20, 0x20	; 32
    598a:	51 e4       	ldi	r21, 0x41	; 65
    598c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5990:	dc 01       	movw	r26, r24
    5992:	cb 01       	movw	r24, r22
    5994:	bc 01       	movw	r22, r24
    5996:	cd 01       	movw	r24, r26
    5998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    599c:	dc 01       	movw	r26, r24
    599e:	cb 01       	movw	r24, r22
    59a0:	9a a3       	std	Y+34, r25	; 0x22
    59a2:	89 a3       	std	Y+33, r24	; 0x21
    59a4:	0f c0       	rjmp	.+30     	; 0x59c4 <main+0x32c8>
    59a6:	88 ec       	ldi	r24, 0xC8	; 200
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	98 a3       	std	Y+32, r25	; 0x20
    59ac:	8f 8f       	std	Y+31, r24	; 0x1f
    59ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59b0:	98 a1       	ldd	r25, Y+32	; 0x20
    59b2:	01 97       	sbiw	r24, 0x01	; 1
    59b4:	f1 f7       	brne	.-4      	; 0x59b2 <main+0x32b6>
    59b6:	98 a3       	std	Y+32, r25	; 0x20
    59b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59ba:	89 a1       	ldd	r24, Y+33	; 0x21
    59bc:	9a a1       	ldd	r25, Y+34	; 0x22
    59be:	01 97       	sbiw	r24, 0x01	; 1
    59c0:	9a a3       	std	Y+34, r25	; 0x22
    59c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59c4:	89 a1       	ldd	r24, Y+33	; 0x21
    59c6:	9a a1       	ldd	r25, Y+34	; 0x22
    59c8:	00 97       	sbiw	r24, 0x00	; 0
    59ca:	69 f7       	brne	.-38     	; 0x59a6 <main+0x32aa>
    59cc:	14 c0       	rjmp	.+40     	; 0x59f6 <main+0x32fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59ce:	6b a1       	ldd	r22, Y+35	; 0x23
    59d0:	7c a1       	ldd	r23, Y+36	; 0x24
    59d2:	8d a1       	ldd	r24, Y+37	; 0x25
    59d4:	9e a1       	ldd	r25, Y+38	; 0x26
    59d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22
    59de:	9a a3       	std	Y+34, r25	; 0x22
    59e0:	89 a3       	std	Y+33, r24	; 0x21
    59e2:	89 a1       	ldd	r24, Y+33	; 0x21
    59e4:	9a a1       	ldd	r25, Y+34	; 0x22
    59e6:	9e 8f       	std	Y+30, r25	; 0x1e
    59e8:	8d 8f       	std	Y+29, r24	; 0x1d
    59ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59ee:	01 97       	sbiw	r24, 0x01	; 1
    59f0:	f1 f7       	brne	.-4      	; 0x59ee <main+0x32f2>
    59f2:	9e 8f       	std	Y+30, r25	; 0x1e
    59f4:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2);
				Comp_Pass = 0;
    59f6:	fe 01       	movw	r30, r28
    59f8:	e0 52       	subi	r30, 0x20	; 32
    59fa:	fe 4f       	sbci	r31, 0xFE	; 254
    59fc:	10 82       	st	Z, r1
    59fe:	11 82       	std	Z+1, r1	; 0x01
    5a00:	12 82       	std	Z+2, r1	; 0x02
    5a02:	13 82       	std	Z+3, r1	; 0x03
    5a04:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <main+0x264>
			}
		}
		else
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
    5a08:	81 e0       	ldi	r24, 0x01	; 1
    5a0a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	a0 e0       	ldi	r26, 0x00	; 0
    5a14:	b0 e4       	ldi	r27, 0x40	; 64
    5a16:	89 8f       	std	Y+25, r24	; 0x19
    5a18:	9a 8f       	std	Y+26, r25	; 0x1a
    5a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    5a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    5a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a26:	20 e0       	ldi	r18, 0x00	; 0
    5a28:	30 e0       	ldi	r19, 0x00	; 0
    5a2a:	4a ef       	ldi	r20, 0xFA	; 250
    5a2c:	54 e4       	ldi	r21, 0x44	; 68
    5a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a32:	dc 01       	movw	r26, r24
    5a34:	cb 01       	movw	r24, r22
    5a36:	8d 8b       	std	Y+21, r24	; 0x15
    5a38:	9e 8b       	std	Y+22, r25	; 0x16
    5a3a:	af 8b       	std	Y+23, r26	; 0x17
    5a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    5a40:	7e 89       	ldd	r23, Y+22	; 0x16
    5a42:	8f 89       	ldd	r24, Y+23	; 0x17
    5a44:	98 8d       	ldd	r25, Y+24	; 0x18
    5a46:	20 e0       	ldi	r18, 0x00	; 0
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	40 e8       	ldi	r20, 0x80	; 128
    5a4c:	5f e3       	ldi	r21, 0x3F	; 63
    5a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a52:	88 23       	and	r24, r24
    5a54:	2c f4       	brge	.+10     	; 0x5a60 <main+0x3364>
		__ticks = 1;
    5a56:	81 e0       	ldi	r24, 0x01	; 1
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	9c 8b       	std	Y+20, r25	; 0x14
    5a5c:	8b 8b       	std	Y+19, r24	; 0x13
    5a5e:	3f c0       	rjmp	.+126    	; 0x5ade <main+0x33e2>
	else if (__tmp > 65535)
    5a60:	6d 89       	ldd	r22, Y+21	; 0x15
    5a62:	7e 89       	ldd	r23, Y+22	; 0x16
    5a64:	8f 89       	ldd	r24, Y+23	; 0x17
    5a66:	98 8d       	ldd	r25, Y+24	; 0x18
    5a68:	20 e0       	ldi	r18, 0x00	; 0
    5a6a:	3f ef       	ldi	r19, 0xFF	; 255
    5a6c:	4f e7       	ldi	r20, 0x7F	; 127
    5a6e:	57 e4       	ldi	r21, 0x47	; 71
    5a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a74:	18 16       	cp	r1, r24
    5a76:	4c f5       	brge	.+82     	; 0x5aca <main+0x33ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a78:	69 8d       	ldd	r22, Y+25	; 0x19
    5a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a80:	20 e0       	ldi	r18, 0x00	; 0
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	40 e2       	ldi	r20, 0x20	; 32
    5a86:	51 e4       	ldi	r21, 0x41	; 65
    5a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a8c:	dc 01       	movw	r26, r24
    5a8e:	cb 01       	movw	r24, r22
    5a90:	bc 01       	movw	r22, r24
    5a92:	cd 01       	movw	r24, r26
    5a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a98:	dc 01       	movw	r26, r24
    5a9a:	cb 01       	movw	r24, r22
    5a9c:	9c 8b       	std	Y+20, r25	; 0x14
    5a9e:	8b 8b       	std	Y+19, r24	; 0x13
    5aa0:	0f c0       	rjmp	.+30     	; 0x5ac0 <main+0x33c4>
    5aa2:	88 ec       	ldi	r24, 0xC8	; 200
    5aa4:	90 e0       	ldi	r25, 0x00	; 0
    5aa6:	9a 8b       	std	Y+18, r25	; 0x12
    5aa8:	89 8b       	std	Y+17, r24	; 0x11
    5aaa:	89 89       	ldd	r24, Y+17	; 0x11
    5aac:	9a 89       	ldd	r25, Y+18	; 0x12
    5aae:	01 97       	sbiw	r24, 0x01	; 1
    5ab0:	f1 f7       	brne	.-4      	; 0x5aae <main+0x33b2>
    5ab2:	9a 8b       	std	Y+18, r25	; 0x12
    5ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    5ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    5aba:	01 97       	sbiw	r24, 0x01	; 1
    5abc:	9c 8b       	std	Y+20, r25	; 0x14
    5abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    5ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ac4:	00 97       	sbiw	r24, 0x00	; 0
    5ac6:	69 f7       	brne	.-38     	; 0x5aa2 <main+0x33a6>
    5ac8:	14 c0       	rjmp	.+40     	; 0x5af2 <main+0x33f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aca:	6d 89       	ldd	r22, Y+21	; 0x15
    5acc:	7e 89       	ldd	r23, Y+22	; 0x16
    5ace:	8f 89       	ldd	r24, Y+23	; 0x17
    5ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ad6:	dc 01       	movw	r26, r24
    5ad8:	cb 01       	movw	r24, r22
    5ada:	9c 8b       	std	Y+20, r25	; 0x14
    5adc:	8b 8b       	std	Y+19, r24	; 0x13
    5ade:	8b 89       	ldd	r24, Y+19	; 0x13
    5ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    5ae2:	98 8b       	std	Y+16, r25	; 0x10
    5ae4:	8f 87       	std	Y+15, r24	; 0x0f
    5ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ae8:	98 89       	ldd	r25, Y+16	; 0x10
    5aea:	01 97       	sbiw	r24, 0x01	; 1
    5aec:	f1 f7       	brne	.-4      	; 0x5aea <main+0x33ee>
    5aee:	98 8b       	std	Y+16, r25	; 0x10
    5af0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);
			LCD_VoidSendStringFromPos("Invalid Input",0,1);
    5af2:	86 ea       	ldi	r24, 0xA6	; 166
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	60 e0       	ldi	r22, 0x00	; 0
    5af8:	41 e0       	ldi	r20, 0x01	; 1
    5afa:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStringFromPos>
    5afe:	80 e0       	ldi	r24, 0x00	; 0
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	aa ef       	ldi	r26, 0xFA	; 250
    5b04:	b3 e4       	ldi	r27, 0x43	; 67
    5b06:	8b 87       	std	Y+11, r24	; 0x0b
    5b08:	9c 87       	std	Y+12, r25	; 0x0c
    5b0a:	ad 87       	std	Y+13, r26	; 0x0d
    5b0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b16:	20 e0       	ldi	r18, 0x00	; 0
    5b18:	30 e0       	ldi	r19, 0x00	; 0
    5b1a:	4a ef       	ldi	r20, 0xFA	; 250
    5b1c:	54 e4       	ldi	r21, 0x44	; 68
    5b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b22:	dc 01       	movw	r26, r24
    5b24:	cb 01       	movw	r24, r22
    5b26:	8f 83       	std	Y+7, r24	; 0x07
    5b28:	98 87       	std	Y+8, r25	; 0x08
    5b2a:	a9 87       	std	Y+9, r26	; 0x09
    5b2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b30:	78 85       	ldd	r23, Y+8	; 0x08
    5b32:	89 85       	ldd	r24, Y+9	; 0x09
    5b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b36:	20 e0       	ldi	r18, 0x00	; 0
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	40 e8       	ldi	r20, 0x80	; 128
    5b3c:	5f e3       	ldi	r21, 0x3F	; 63
    5b3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b42:	88 23       	and	r24, r24
    5b44:	2c f4       	brge	.+10     	; 0x5b50 <main+0x3454>
		__ticks = 1;
    5b46:	81 e0       	ldi	r24, 0x01	; 1
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	9e 83       	std	Y+6, r25	; 0x06
    5b4c:	8d 83       	std	Y+5, r24	; 0x05
    5b4e:	40 c0       	rjmp	.+128    	; 0x5bd0 <main+0x34d4>
	else if (__tmp > 65535)
    5b50:	6f 81       	ldd	r22, Y+7	; 0x07
    5b52:	78 85       	ldd	r23, Y+8	; 0x08
    5b54:	89 85       	ldd	r24, Y+9	; 0x09
    5b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	3f ef       	ldi	r19, 0xFF	; 255
    5b5c:	4f e7       	ldi	r20, 0x7F	; 127
    5b5e:	57 e4       	ldi	r21, 0x47	; 71
    5b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5b64:	18 16       	cp	r1, r24
    5b66:	54 f5       	brge	.+84     	; 0x5bbc <main+0x34c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b70:	20 e0       	ldi	r18, 0x00	; 0
    5b72:	30 e0       	ldi	r19, 0x00	; 0
    5b74:	40 e2       	ldi	r20, 0x20	; 32
    5b76:	51 e4       	ldi	r21, 0x41	; 65
    5b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b7c:	dc 01       	movw	r26, r24
    5b7e:	cb 01       	movw	r24, r22
    5b80:	bc 01       	movw	r22, r24
    5b82:	cd 01       	movw	r24, r26
    5b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b88:	dc 01       	movw	r26, r24
    5b8a:	cb 01       	movw	r24, r22
    5b8c:	9e 83       	std	Y+6, r25	; 0x06
    5b8e:	8d 83       	std	Y+5, r24	; 0x05
    5b90:	0f c0       	rjmp	.+30     	; 0x5bb0 <main+0x34b4>
    5b92:	88 ec       	ldi	r24, 0xC8	; 200
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	9c 83       	std	Y+4, r25	; 0x04
    5b98:	8b 83       	std	Y+3, r24	; 0x03
    5b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    5b9e:	01 97       	sbiw	r24, 0x01	; 1
    5ba0:	f1 f7       	brne	.-4      	; 0x5b9e <main+0x34a2>
    5ba2:	9c 83       	std	Y+4, r25	; 0x04
    5ba4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    5baa:	01 97       	sbiw	r24, 0x01	; 1
    5bac:	9e 83       	std	Y+6, r25	; 0x06
    5bae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    5bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    5bb4:	00 97       	sbiw	r24, 0x00	; 0
    5bb6:	69 f7       	brne	.-38     	; 0x5b92 <main+0x3496>
    5bb8:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <main+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    5bbe:	78 85       	ldd	r23, Y+8	; 0x08
    5bc0:	89 85       	ldd	r24, Y+9	; 0x09
    5bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	9e 83       	std	Y+6, r25	; 0x06
    5bce:	8d 83       	std	Y+5, r24	; 0x05
    5bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    5bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    5bd4:	9a 83       	std	Y+2, r25	; 0x02
    5bd6:	89 83       	std	Y+1, r24	; 0x01
    5bd8:	89 81       	ldd	r24, Y+1	; 0x01
    5bda:	9a 81       	ldd	r25, Y+2	; 0x02
    5bdc:	01 97       	sbiw	r24, 0x01	; 1
    5bde:	f1 f7       	brne	.-4      	; 0x5bdc <main+0x34e0>
    5be0:	9a 83       	std	Y+2, r25	; 0x02
    5be2:	89 83       	std	Y+1, r24	; 0x01
    5be4:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <main+0x264>

00005be8 <UART_Interrupt_Fun>:
			_delay_ms(500);
		}
	}
}
void UART_Interrupt_Fun (void)
{
    5be8:	df 93       	push	r29
    5bea:	cf 93       	push	r28
    5bec:	cd b7       	in	r28, 0x3d	; 61
    5bee:	de b7       	in	r29, 0x3e	; 62
    5bf0:	6c 97       	sbiw	r28, 0x1c	; 28
    5bf2:	0f b6       	in	r0, 0x3f	; 63
    5bf4:	f8 94       	cli
    5bf6:	de bf       	out	0x3e, r29	; 62
    5bf8:	0f be       	out	0x3f, r0	; 63
    5bfa:	cd bf       	out	0x3d, r28	; 61
	UART_InterruptReceive(&UART_RecValue);
    5bfc:	8c e1       	ldi	r24, 0x1C	; 28
    5bfe:	91 e0       	ldi	r25, 0x01	; 1
    5c00:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_InterruptReceive>
	if (UART_RecValue == 'A')
    5c04:	80 91 1c 01 	lds	r24, 0x011C
    5c08:	81 34       	cpi	r24, 0x41	; 65
    5c0a:	09 f0       	breq	.+2      	; 0x5c0e <UART_Interrupt_Fun+0x26>
    5c0c:	fb c0       	rjmp	.+502    	; 0x5e04 <UART_Interrupt_Fun+0x21c>
	{
		LCD_VoidSendCommand(LCD_ClearDisplay);
    5c0e:	81 e0       	ldi	r24, 0x01	; 1
    5c10:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_VoidSendCommand>
    5c14:	80 e0       	ldi	r24, 0x00	; 0
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	a0 e0       	ldi	r26, 0x00	; 0
    5c1a:	b0 e4       	ldi	r27, 0x40	; 64
    5c1c:	89 8f       	std	Y+25, r24	; 0x19
    5c1e:	9a 8f       	std	Y+26, r25	; 0x1a
    5c20:	ab 8f       	std	Y+27, r26	; 0x1b
    5c22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c24:	69 8d       	ldd	r22, Y+25	; 0x19
    5c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c2c:	20 e0       	ldi	r18, 0x00	; 0
    5c2e:	30 e0       	ldi	r19, 0x00	; 0
    5c30:	4a ef       	ldi	r20, 0xFA	; 250
    5c32:	54 e4       	ldi	r21, 0x44	; 68
    5c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c38:	dc 01       	movw	r26, r24
    5c3a:	cb 01       	movw	r24, r22
    5c3c:	8d 8b       	std	Y+21, r24	; 0x15
    5c3e:	9e 8b       	std	Y+22, r25	; 0x16
    5c40:	af 8b       	std	Y+23, r26	; 0x17
    5c42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c44:	6d 89       	ldd	r22, Y+21	; 0x15
    5c46:	7e 89       	ldd	r23, Y+22	; 0x16
    5c48:	8f 89       	ldd	r24, Y+23	; 0x17
    5c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	40 e8       	ldi	r20, 0x80	; 128
    5c52:	5f e3       	ldi	r21, 0x3F	; 63
    5c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c58:	88 23       	and	r24, r24
    5c5a:	2c f4       	brge	.+10     	; 0x5c66 <UART_Interrupt_Fun+0x7e>
		__ticks = 1;
    5c5c:	81 e0       	ldi	r24, 0x01	; 1
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	9c 8b       	std	Y+20, r25	; 0x14
    5c62:	8b 8b       	std	Y+19, r24	; 0x13
    5c64:	3f c0       	rjmp	.+126    	; 0x5ce4 <UART_Interrupt_Fun+0xfc>
	else if (__tmp > 65535)
    5c66:	6d 89       	ldd	r22, Y+21	; 0x15
    5c68:	7e 89       	ldd	r23, Y+22	; 0x16
    5c6a:	8f 89       	ldd	r24, Y+23	; 0x17
    5c6c:	98 8d       	ldd	r25, Y+24	; 0x18
    5c6e:	20 e0       	ldi	r18, 0x00	; 0
    5c70:	3f ef       	ldi	r19, 0xFF	; 255
    5c72:	4f e7       	ldi	r20, 0x7F	; 127
    5c74:	57 e4       	ldi	r21, 0x47	; 71
    5c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c7a:	18 16       	cp	r1, r24
    5c7c:	4c f5       	brge	.+82     	; 0x5cd0 <UART_Interrupt_Fun+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c7e:	69 8d       	ldd	r22, Y+25	; 0x19
    5c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c86:	20 e0       	ldi	r18, 0x00	; 0
    5c88:	30 e0       	ldi	r19, 0x00	; 0
    5c8a:	40 e2       	ldi	r20, 0x20	; 32
    5c8c:	51 e4       	ldi	r21, 0x41	; 65
    5c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c92:	dc 01       	movw	r26, r24
    5c94:	cb 01       	movw	r24, r22
    5c96:	bc 01       	movw	r22, r24
    5c98:	cd 01       	movw	r24, r26
    5c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	cb 01       	movw	r24, r22
    5ca2:	9c 8b       	std	Y+20, r25	; 0x14
    5ca4:	8b 8b       	std	Y+19, r24	; 0x13
    5ca6:	0f c0       	rjmp	.+30     	; 0x5cc6 <UART_Interrupt_Fun+0xde>
    5ca8:	88 ec       	ldi	r24, 0xC8	; 200
    5caa:	90 e0       	ldi	r25, 0x00	; 0
    5cac:	9a 8b       	std	Y+18, r25	; 0x12
    5cae:	89 8b       	std	Y+17, r24	; 0x11
    5cb0:	89 89       	ldd	r24, Y+17	; 0x11
    5cb2:	9a 89       	ldd	r25, Y+18	; 0x12
    5cb4:	01 97       	sbiw	r24, 0x01	; 1
    5cb6:	f1 f7       	brne	.-4      	; 0x5cb4 <UART_Interrupt_Fun+0xcc>
    5cb8:	9a 8b       	std	Y+18, r25	; 0x12
    5cba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    5cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    5cc0:	01 97       	sbiw	r24, 0x01	; 1
    5cc2:	9c 8b       	std	Y+20, r25	; 0x14
    5cc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    5cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    5cca:	00 97       	sbiw	r24, 0x00	; 0
    5ccc:	69 f7       	brne	.-38     	; 0x5ca8 <UART_Interrupt_Fun+0xc0>
    5cce:	14 c0       	rjmp	.+40     	; 0x5cf8 <UART_Interrupt_Fun+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    5cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    5cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    5cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    5cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cdc:	dc 01       	movw	r26, r24
    5cde:	cb 01       	movw	r24, r22
    5ce0:	9c 8b       	std	Y+20, r25	; 0x14
    5ce2:	8b 8b       	std	Y+19, r24	; 0x13
    5ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    5ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    5ce8:	98 8b       	std	Y+16, r25	; 0x10
    5cea:	8f 87       	std	Y+15, r24	; 0x0f
    5cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cee:	98 89       	ldd	r25, Y+16	; 0x10
    5cf0:	01 97       	sbiw	r24, 0x01	; 1
    5cf2:	f1 f7       	brne	.-4      	; 0x5cf0 <UART_Interrupt_Fun+0x108>
    5cf4:	98 8b       	std	Y+16, r25	; 0x10
    5cf6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		LCD_VoidSendString("Welcome Back");
    5cf8:	84 eb       	ldi	r24, 0xB4	; 180
    5cfa:	90 e0       	ldi	r25, 0x00	; 0
    5cfc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_VoidSendString>
		DIO_PORTC = (DIO_PORTC & 0xF0) | (3 & 0x0F);  // 90
    5d00:	a5 e3       	ldi	r26, 0x35	; 53
    5d02:	b0 e0       	ldi	r27, 0x00	; 0
    5d04:	e5 e3       	ldi	r30, 0x35	; 53
    5d06:	f0 e0       	ldi	r31, 0x00	; 0
    5d08:	80 81       	ld	r24, Z
    5d0a:	80 7f       	andi	r24, 0xF0	; 240
    5d0c:	83 60       	ori	r24, 0x03	; 3
    5d0e:	8c 93       	st	X, r24
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	aa e7       	ldi	r26, 0x7A	; 122
    5d16:	b4 e4       	ldi	r27, 0x44	; 68
    5d18:	8b 87       	std	Y+11, r24	; 0x0b
    5d1a:	9c 87       	std	Y+12, r25	; 0x0c
    5d1c:	ad 87       	std	Y+13, r26	; 0x0d
    5d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d28:	20 e0       	ldi	r18, 0x00	; 0
    5d2a:	30 e0       	ldi	r19, 0x00	; 0
    5d2c:	4a ef       	ldi	r20, 0xFA	; 250
    5d2e:	54 e4       	ldi	r21, 0x44	; 68
    5d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d34:	dc 01       	movw	r26, r24
    5d36:	cb 01       	movw	r24, r22
    5d38:	8f 83       	std	Y+7, r24	; 0x07
    5d3a:	98 87       	std	Y+8, r25	; 0x08
    5d3c:	a9 87       	std	Y+9, r26	; 0x09
    5d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d40:	6f 81       	ldd	r22, Y+7	; 0x07
    5d42:	78 85       	ldd	r23, Y+8	; 0x08
    5d44:	89 85       	ldd	r24, Y+9	; 0x09
    5d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d48:	20 e0       	ldi	r18, 0x00	; 0
    5d4a:	30 e0       	ldi	r19, 0x00	; 0
    5d4c:	40 e8       	ldi	r20, 0x80	; 128
    5d4e:	5f e3       	ldi	r21, 0x3F	; 63
    5d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5d54:	88 23       	and	r24, r24
    5d56:	2c f4       	brge	.+10     	; 0x5d62 <UART_Interrupt_Fun+0x17a>
		__ticks = 1;
    5d58:	81 e0       	ldi	r24, 0x01	; 1
    5d5a:	90 e0       	ldi	r25, 0x00	; 0
    5d5c:	9e 83       	std	Y+6, r25	; 0x06
    5d5e:	8d 83       	std	Y+5, r24	; 0x05
    5d60:	3f c0       	rjmp	.+126    	; 0x5de0 <UART_Interrupt_Fun+0x1f8>
	else if (__tmp > 65535)
    5d62:	6f 81       	ldd	r22, Y+7	; 0x07
    5d64:	78 85       	ldd	r23, Y+8	; 0x08
    5d66:	89 85       	ldd	r24, Y+9	; 0x09
    5d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d6a:	20 e0       	ldi	r18, 0x00	; 0
    5d6c:	3f ef       	ldi	r19, 0xFF	; 255
    5d6e:	4f e7       	ldi	r20, 0x7F	; 127
    5d70:	57 e4       	ldi	r21, 0x47	; 71
    5d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5d76:	18 16       	cp	r1, r24
    5d78:	4c f5       	brge	.+82     	; 0x5dcc <UART_Interrupt_Fun+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d82:	20 e0       	ldi	r18, 0x00	; 0
    5d84:	30 e0       	ldi	r19, 0x00	; 0
    5d86:	40 e2       	ldi	r20, 0x20	; 32
    5d88:	51 e4       	ldi	r21, 0x41	; 65
    5d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d8e:	dc 01       	movw	r26, r24
    5d90:	cb 01       	movw	r24, r22
    5d92:	bc 01       	movw	r22, r24
    5d94:	cd 01       	movw	r24, r26
    5d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	cb 01       	movw	r24, r22
    5d9e:	9e 83       	std	Y+6, r25	; 0x06
    5da0:	8d 83       	std	Y+5, r24	; 0x05
    5da2:	0f c0       	rjmp	.+30     	; 0x5dc2 <UART_Interrupt_Fun+0x1da>
    5da4:	88 ec       	ldi	r24, 0xC8	; 200
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	9c 83       	std	Y+4, r25	; 0x04
    5daa:	8b 83       	std	Y+3, r24	; 0x03
    5dac:	8b 81       	ldd	r24, Y+3	; 0x03
    5dae:	9c 81       	ldd	r25, Y+4	; 0x04
    5db0:	01 97       	sbiw	r24, 0x01	; 1
    5db2:	f1 f7       	brne	.-4      	; 0x5db0 <UART_Interrupt_Fun+0x1c8>
    5db4:	9c 83       	std	Y+4, r25	; 0x04
    5db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5db8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dba:	9e 81       	ldd	r25, Y+6	; 0x06
    5dbc:	01 97       	sbiw	r24, 0x01	; 1
    5dbe:	9e 83       	std	Y+6, r25	; 0x06
    5dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    5dc6:	00 97       	sbiw	r24, 0x00	; 0
    5dc8:	69 f7       	brne	.-38     	; 0x5da4 <UART_Interrupt_Fun+0x1bc>
    5dca:	14 c0       	rjmp	.+40     	; 0x5df4 <UART_Interrupt_Fun+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    5dce:	78 85       	ldd	r23, Y+8	; 0x08
    5dd0:	89 85       	ldd	r24, Y+9	; 0x09
    5dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dd8:	dc 01       	movw	r26, r24
    5dda:	cb 01       	movw	r24, r22
    5ddc:	9e 83       	std	Y+6, r25	; 0x06
    5dde:	8d 83       	std	Y+5, r24	; 0x05
    5de0:	8d 81       	ldd	r24, Y+5	; 0x05
    5de2:	9e 81       	ldd	r25, Y+6	; 0x06
    5de4:	9a 83       	std	Y+2, r25	; 0x02
    5de6:	89 83       	std	Y+1, r24	; 0x01
    5de8:	89 81       	ldd	r24, Y+1	; 0x01
    5dea:	9a 81       	ldd	r25, Y+2	; 0x02
    5dec:	01 97       	sbiw	r24, 0x01	; 1
    5dee:	f1 f7       	brne	.-4      	; 0x5dec <UART_Interrupt_Fun+0x204>
    5df0:	9a 83       	std	Y+2, r25	; 0x02
    5df2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		DIO_PORTC = (DIO_PORTC & 0xF0) | (6 & 0x0F);  //   0
    5df4:	a5 e3       	ldi	r26, 0x35	; 53
    5df6:	b0 e0       	ldi	r27, 0x00	; 0
    5df8:	e5 e3       	ldi	r30, 0x35	; 53
    5dfa:	f0 e0       	ldi	r31, 0x00	; 0
    5dfc:	80 81       	ld	r24, Z
    5dfe:	80 7f       	andi	r24, 0xF0	; 240
    5e00:	86 60       	ori	r24, 0x06	; 6
    5e02:	8c 93       	st	X, r24
	}
	UART_RecValue = 0;
    5e04:	10 92 1c 01 	sts	0x011C, r1
}
    5e08:	6c 96       	adiw	r28, 0x1c	; 28
    5e0a:	0f b6       	in	r0, 0x3f	; 63
    5e0c:	f8 94       	cli
    5e0e:	de bf       	out	0x3e, r29	; 62
    5e10:	0f be       	out	0x3f, r0	; 63
    5e12:	cd bf       	out	0x3d, r28	; 61
    5e14:	cf 91       	pop	r28
    5e16:	df 91       	pop	r29
    5e18:	08 95       	ret

00005e1a <__mulsi3>:
    5e1a:	62 9f       	mul	r22, r18
    5e1c:	d0 01       	movw	r26, r0
    5e1e:	73 9f       	mul	r23, r19
    5e20:	f0 01       	movw	r30, r0
    5e22:	82 9f       	mul	r24, r18
    5e24:	e0 0d       	add	r30, r0
    5e26:	f1 1d       	adc	r31, r1
    5e28:	64 9f       	mul	r22, r20
    5e2a:	e0 0d       	add	r30, r0
    5e2c:	f1 1d       	adc	r31, r1
    5e2e:	92 9f       	mul	r25, r18
    5e30:	f0 0d       	add	r31, r0
    5e32:	83 9f       	mul	r24, r19
    5e34:	f0 0d       	add	r31, r0
    5e36:	74 9f       	mul	r23, r20
    5e38:	f0 0d       	add	r31, r0
    5e3a:	65 9f       	mul	r22, r21
    5e3c:	f0 0d       	add	r31, r0
    5e3e:	99 27       	eor	r25, r25
    5e40:	72 9f       	mul	r23, r18
    5e42:	b0 0d       	add	r27, r0
    5e44:	e1 1d       	adc	r30, r1
    5e46:	f9 1f       	adc	r31, r25
    5e48:	63 9f       	mul	r22, r19
    5e4a:	b0 0d       	add	r27, r0
    5e4c:	e1 1d       	adc	r30, r1
    5e4e:	f9 1f       	adc	r31, r25
    5e50:	bd 01       	movw	r22, r26
    5e52:	cf 01       	movw	r24, r30
    5e54:	11 24       	eor	r1, r1
    5e56:	08 95       	ret

00005e58 <__udivmodsi4>:
    5e58:	a1 e2       	ldi	r26, 0x21	; 33
    5e5a:	1a 2e       	mov	r1, r26
    5e5c:	aa 1b       	sub	r26, r26
    5e5e:	bb 1b       	sub	r27, r27
    5e60:	fd 01       	movw	r30, r26
    5e62:	0d c0       	rjmp	.+26     	; 0x5e7e <__udivmodsi4_ep>

00005e64 <__udivmodsi4_loop>:
    5e64:	aa 1f       	adc	r26, r26
    5e66:	bb 1f       	adc	r27, r27
    5e68:	ee 1f       	adc	r30, r30
    5e6a:	ff 1f       	adc	r31, r31
    5e6c:	a2 17       	cp	r26, r18
    5e6e:	b3 07       	cpc	r27, r19
    5e70:	e4 07       	cpc	r30, r20
    5e72:	f5 07       	cpc	r31, r21
    5e74:	20 f0       	brcs	.+8      	; 0x5e7e <__udivmodsi4_ep>
    5e76:	a2 1b       	sub	r26, r18
    5e78:	b3 0b       	sbc	r27, r19
    5e7a:	e4 0b       	sbc	r30, r20
    5e7c:	f5 0b       	sbc	r31, r21

00005e7e <__udivmodsi4_ep>:
    5e7e:	66 1f       	adc	r22, r22
    5e80:	77 1f       	adc	r23, r23
    5e82:	88 1f       	adc	r24, r24
    5e84:	99 1f       	adc	r25, r25
    5e86:	1a 94       	dec	r1
    5e88:	69 f7       	brne	.-38     	; 0x5e64 <__udivmodsi4_loop>
    5e8a:	60 95       	com	r22
    5e8c:	70 95       	com	r23
    5e8e:	80 95       	com	r24
    5e90:	90 95       	com	r25
    5e92:	9b 01       	movw	r18, r22
    5e94:	ac 01       	movw	r20, r24
    5e96:	bd 01       	movw	r22, r26
    5e98:	cf 01       	movw	r24, r30
    5e9a:	08 95       	ret

00005e9c <__prologue_saves__>:
    5e9c:	2f 92       	push	r2
    5e9e:	3f 92       	push	r3
    5ea0:	4f 92       	push	r4
    5ea2:	5f 92       	push	r5
    5ea4:	6f 92       	push	r6
    5ea6:	7f 92       	push	r7
    5ea8:	8f 92       	push	r8
    5eaa:	9f 92       	push	r9
    5eac:	af 92       	push	r10
    5eae:	bf 92       	push	r11
    5eb0:	cf 92       	push	r12
    5eb2:	df 92       	push	r13
    5eb4:	ef 92       	push	r14
    5eb6:	ff 92       	push	r15
    5eb8:	0f 93       	push	r16
    5eba:	1f 93       	push	r17
    5ebc:	cf 93       	push	r28
    5ebe:	df 93       	push	r29
    5ec0:	cd b7       	in	r28, 0x3d	; 61
    5ec2:	de b7       	in	r29, 0x3e	; 62
    5ec4:	ca 1b       	sub	r28, r26
    5ec6:	db 0b       	sbc	r29, r27
    5ec8:	0f b6       	in	r0, 0x3f	; 63
    5eca:	f8 94       	cli
    5ecc:	de bf       	out	0x3e, r29	; 62
    5ece:	0f be       	out	0x3f, r0	; 63
    5ed0:	cd bf       	out	0x3d, r28	; 61
    5ed2:	09 94       	ijmp

00005ed4 <__epilogue_restores__>:
    5ed4:	2a 88       	ldd	r2, Y+18	; 0x12
    5ed6:	39 88       	ldd	r3, Y+17	; 0x11
    5ed8:	48 88       	ldd	r4, Y+16	; 0x10
    5eda:	5f 84       	ldd	r5, Y+15	; 0x0f
    5edc:	6e 84       	ldd	r6, Y+14	; 0x0e
    5ede:	7d 84       	ldd	r7, Y+13	; 0x0d
    5ee0:	8c 84       	ldd	r8, Y+12	; 0x0c
    5ee2:	9b 84       	ldd	r9, Y+11	; 0x0b
    5ee4:	aa 84       	ldd	r10, Y+10	; 0x0a
    5ee6:	b9 84       	ldd	r11, Y+9	; 0x09
    5ee8:	c8 84       	ldd	r12, Y+8	; 0x08
    5eea:	df 80       	ldd	r13, Y+7	; 0x07
    5eec:	ee 80       	ldd	r14, Y+6	; 0x06
    5eee:	fd 80       	ldd	r15, Y+5	; 0x05
    5ef0:	0c 81       	ldd	r16, Y+4	; 0x04
    5ef2:	1b 81       	ldd	r17, Y+3	; 0x03
    5ef4:	aa 81       	ldd	r26, Y+2	; 0x02
    5ef6:	b9 81       	ldd	r27, Y+1	; 0x01
    5ef8:	ce 0f       	add	r28, r30
    5efa:	d1 1d       	adc	r29, r1
    5efc:	0f b6       	in	r0, 0x3f	; 63
    5efe:	f8 94       	cli
    5f00:	de bf       	out	0x3e, r29	; 62
    5f02:	0f be       	out	0x3f, r0	; 63
    5f04:	cd bf       	out	0x3d, r28	; 61
    5f06:	ed 01       	movw	r28, r26
    5f08:	08 95       	ret

00005f0a <_exit>:
    5f0a:	f8 94       	cli

00005f0c <__stop_program>:
    5f0c:	ff cf       	rjmp	.-2      	; 0x5f0c <__stop_program>
