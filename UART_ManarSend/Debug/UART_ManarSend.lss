
UART_ManarSend.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002f70  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  0000300c  2**0
                  ALLOC
  3 .stab         00002dd8  00000000  00000000  0000300c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144d  00000000  00000000  00005de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007231  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000074e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000912a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a015  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000adc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b97f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_10>
      2c:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e7       	ldi	r30, 0x70	; 112
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <main>
      8a:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_enuInit>:
#include "../Header/UART_int.h"
#include "../Header/UART_prv.h"
static void (*GPTF_RX) (void) = NULL;

UART_tenuErrorStatus  UART_enuInit(UART_tstrConfiguration* Add_pstrConfigue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_enuInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     b56:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pstrConfigue== NULL)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	19 f4       	brne	.+6      	; 0xb66 <UART_enuInit+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	5a c0       	rjmp	.+180    	; 0xc1a <UART_enuInit+0xd4>
	}
	else
	{
        UART_u8_UCSRC_REG |=(1<<7);   //URSEL Set to 1
     b66:	a0 e4       	ldi	r26, 0x40	; 64
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	8c 93       	st	X, r24
		// Set Parity bits
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8ParityBits;
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	90 81       	ld	r25, Z
     b7e:	ea 81       	ldd	r30, Y+2	; 0x02
     b80:	fb 81       	ldd	r31, Y+3	; 0x03
     b82:	80 81       	ld	r24, Z
     b84:	89 2b       	or	r24, r25
     b86:	8c 93       	st	X, r24

         // Set Stop bit
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8PStopBit;
     b88:	a0 e4       	ldi	r26, 0x40	; 64
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	90 81       	ld	r25, Z
     b92:	ea 81       	ldd	r30, Y+2	; 0x02
     b94:	fb 81       	ldd	r31, Y+3	; 0x03
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	89 2b       	or	r24, r25
     b9a:	8c 93       	st	X, r24

         //check 9 bit
         if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     b9c:	ea 81       	ldd	r30, Y+2	; 0x02
     b9e:	fb 81       	ldd	r31, Y+3	; 0x03
     ba0:	82 81       	ldd	r24, Z+2	; 0x02
     ba2:	86 30       	cpi	r24, 0x06	; 6
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <UART_enuInit+0x6e>
         {
        	 UART_u8_UCSRB_REG |=0x04;
     ba6:	aa e2       	ldi	r26, 0x2A	; 42
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e2       	ldi	r30, 0x2A	; 42
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	8c 93       	st	X, r24
         }

         // Set Character Size
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8DataBits;
     bb4:	a0 e4       	ldi	r26, 0x40	; 64
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 e4       	ldi	r30, 0x40	; 64
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	90 81       	ld	r25, Z
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	89 2b       	or	r24, r25
     bc6:	8c 93       	st	X, r24

         //Choose Transmite or Receive
         UART_u8_UCSRB_REG |=Add_pstrConfigue->UART_u8Mode;
     bc8:	aa e2       	ldi	r26, 0x2A	; 42
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea e2       	ldi	r30, 0x2A	; 42
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	90 81       	ld	r25, Z
     bd2:	ea 81       	ldd	r30, Y+2	; 0x02
     bd4:	fb 81       	ldd	r31, Y+3	; 0x03
     bd6:	83 81       	ldd	r24, Z+3	; 0x03
     bd8:	89 2b       	or	r24, r25
     bda:	8c 93       	st	X, r24

         // set Baud Rate
         UART_u8_UCSRC_REG &=~(1<<7);   //URSEL Set to 0
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	8c 93       	st	X, r24
         UART_u8_UBRRL_REG |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     bea:	a9 e2       	ldi	r26, 0x29	; 41
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	20 81       	ld	r18, Z
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	84 81       	ldd	r24, Z+4	; 0x04
     bfa:	95 81       	ldd	r25, Z+5	; 0x05
     bfc:	82 2b       	or	r24, r18
     bfe:	8c 93       	st	X, r24
         UART_u8_UBRRH_REG |= (u8)((Add_pstrConfigue->UART_u16BaudRate)>>8);
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	20 81       	ld	r18, Z
     c0a:	ea 81       	ldd	r30, Y+2	; 0x02
     c0c:	fb 81       	ldd	r31, Y+3	; 0x03
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	95 81       	ldd	r25, Z+5	; 0x05
     c12:	89 2f       	mov	r24, r25
     c14:	99 27       	eor	r25, r25
     c16:	82 2b       	or	r24, r18
     c18:	8c 93       	st	X, r24

	}

	return Local_enuErrorStatus;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <UART_enuInitRXInterrupt>:
UART_tenuErrorStatus  UART_enuInitRXInterrupt(UART_tstrConfiguration* Add_pstrConfigue)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <UART_enuInitRXInterrupt+0x6>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02

	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     c38:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pstrConfigue== NULL)
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	19 f4       	brne	.+6      	; 0xc48 <UART_enuInitRXInterrupt+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	61 c0       	rjmp	.+194    	; 0xd0a <UART_enuInitRXInterrupt+0xe2>
	}
	else
	{
        UART_u8_UCSRC_REG |=(1<<7);   //URSEL Set to 1
     c48:	a0 e4       	ldi	r26, 0x40	; 64
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	8c 93       	st	X, r24
		// Set Parity bits
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8ParityBits;
     c56:	a0 e4       	ldi	r26, 0x40	; 64
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e0 e4       	ldi	r30, 0x40	; 64
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	90 81       	ld	r25, Z
     c60:	ea 81       	ldd	r30, Y+2	; 0x02
     c62:	fb 81       	ldd	r31, Y+3	; 0x03
     c64:	80 81       	ld	r24, Z
     c66:	89 2b       	or	r24, r25
     c68:	8c 93       	st	X, r24

         // Set Stop bit
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8PStopBit;
     c6a:	a0 e4       	ldi	r26, 0x40	; 64
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	90 81       	ld	r25, Z
     c74:	ea 81       	ldd	r30, Y+2	; 0x02
     c76:	fb 81       	ldd	r31, Y+3	; 0x03
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	89 2b       	or	r24, r25
     c7c:	8c 93       	st	X, r24

         //check 9 bit
         if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     c7e:	ea 81       	ldd	r30, Y+2	; 0x02
     c80:	fb 81       	ldd	r31, Y+3	; 0x03
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	86 30       	cpi	r24, 0x06	; 6
     c86:	39 f4       	brne	.+14     	; 0xc96 <UART_enuInitRXInterrupt+0x6e>
         {
        	 UART_u8_UCSRB_REG |=0x04;
     c88:	aa e2       	ldi	r26, 0x2A	; 42
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	ea e2       	ldi	r30, 0x2A	; 42
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	8c 93       	st	X, r24
         }

         // Set Character Size
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8DataBits;
     c96:	a0 e4       	ldi	r26, 0x40	; 64
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e0 e4       	ldi	r30, 0x40	; 64
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	90 81       	ld	r25, Z
     ca0:	ea 81       	ldd	r30, Y+2	; 0x02
     ca2:	fb 81       	ldd	r31, Y+3	; 0x03
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	89 2b       	or	r24, r25
     ca8:	8c 93       	st	X, r24

         //Choose Transmite or Receive
         UART_u8_UCSRB_REG |=Add_pstrConfigue->UART_u8Mode;
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	90 81       	ld	r25, Z
     cb4:	ea 81       	ldd	r30, Y+2	; 0x02
     cb6:	fb 81       	ldd	r31, Y+3	; 0x03
     cb8:	83 81       	ldd	r24, Z+3	; 0x03
     cba:	89 2b       	or	r24, r25
     cbc:	8c 93       	st	X, r24
         /*enable RXICE Rx complete interrupt*/
         UART_u8_UCSRB_REG |= (1<<7);
     cbe:	aa e2       	ldi	r26, 0x2A	; 42
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ea e2       	ldi	r30, 0x2A	; 42
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 68       	ori	r24, 0x80	; 128
     cca:	8c 93       	st	X, r24

         // set Baud Rate
         UART_u8_UCSRC_REG &=~(1<<7);   //URSEL Set to 0
     ccc:	a0 e4       	ldi	r26, 0x40	; 64
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e0 e4       	ldi	r30, 0x40	; 64
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8f 77       	andi	r24, 0x7F	; 127
     cd8:	8c 93       	st	X, r24
         UART_u8_UBRRL_REG |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     cda:	a9 e2       	ldi	r26, 0x29	; 41
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e9 e2       	ldi	r30, 0x29	; 41
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	20 81       	ld	r18, Z
     ce4:	ea 81       	ldd	r30, Y+2	; 0x02
     ce6:	fb 81       	ldd	r31, Y+3	; 0x03
     ce8:	84 81       	ldd	r24, Z+4	; 0x04
     cea:	95 81       	ldd	r25, Z+5	; 0x05
     cec:	82 2b       	or	r24, r18
     cee:	8c 93       	st	X, r24
         UART_u8_UBRRH_REG |= (u8)((Add_pstrConfigue->UART_u16BaudRate)>>8);
     cf0:	a0 e4       	ldi	r26, 0x40	; 64
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e0 e4       	ldi	r30, 0x40	; 64
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 81       	ld	r18, Z
     cfa:	ea 81       	ldd	r30, Y+2	; 0x02
     cfc:	fb 81       	ldd	r31, Y+3	; 0x03
     cfe:	84 81       	ldd	r24, Z+4	; 0x04
     d00:	95 81       	ldd	r25, Z+5	; 0x05
     d02:	89 2f       	mov	r24, r25
     d04:	99 27       	eor	r25, r25
     d06:	82 2b       	or	r24, r18
     d08:	8c 93       	st	X, r24


	}

	return Local_enuErrorStatus;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <UART_enuTransmite>:
UART_tenuErrorStatus  UART_enuTransmite(u16 Copy_pu16Data)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <UART_enuTransmite+0x6>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     d28:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	       // poling on the flag >>> wait for UDR to be empty
     while(((UART_u8_UCSRA_REG >> 5) & 0x01 )== 0);
     d2a:	eb e2       	ldi	r30, 0x2B	; 43
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	82 95       	swap	r24
     d32:	86 95       	lsr	r24
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	81 70       	andi	r24, 0x01	; 1
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	a1 f3       	breq	.-24     	; 0xd2a <UART_enuTransmite+0x12>

     UART_u8_UCSRB_REG &= ~(1<<0);  // Clear TXB8
     d42:	aa e2       	ldi	r26, 0x2A	; 42
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ea e2       	ldi	r30, 0x2A	; 42
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8e 7f       	andi	r24, 0xFE	; 254
     d4e:	8c 93       	st	X, r24
     if ( Copy_pu16Data & 0x0100 )
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	80 70       	andi	r24, 0x00	; 0
     d56:	91 70       	andi	r25, 0x01	; 1
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	39 f0       	breq	.+14     	; 0xd6a <UART_enuTransmite+0x52>
     {
    	 UART_u8_UCSRB_REG |= 0x01; //Set TXB8
     d5c:	aa e2       	ldi	r26, 0x2A	; 42
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ea e2       	ldi	r30, 0x2A	; 42
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	8c 93       	st	X, r24
     }
     /* Put data into UDR Register */
     UART_u8_UDR_REG = (u8)(Copy_pu16Data);
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	80 83       	st	Z, r24


	}

	return Local_enuErrorStatus;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <UART_enuReceive>:

UART_tenuErrorStatus  UART_enuReceive(u8* Add_pu16Data)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <UART_enuReceive+0x6>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     d90:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pu16Data==NULL)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	19 f4       	brne	.+6      	; 0xda0 <UART_enuReceive+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	25 c0       	rjmp	.+74     	; 0xdea <UART_enuReceive+0x6a>
	}
	else
	{

	       // poling on the flag >>> wait for data to be received
	     while(((UART_u8_UCSRA_REG >> 7) & 0x01 )== 0);
     da0:	eb e2       	ldi	r30, 0x2B	; 43
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	dc f7       	brge	.-10     	; 0xda0 <UART_enuReceive+0x20>

	      // check frame error and Data over Run error
	     if(((UART_u8_UCSRA_REG>>3) & 0x01) || ((UART_u8_UCSRA_REG>>4) & 0x01))
     daa:	eb e2       	ldi	r30, 0x2B	; 43
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	86 95       	lsr	r24
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	81 70       	andi	r24, 0x01	; 1
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	88 23       	and	r24, r24
     dc0:	59 f4       	brne	.+22     	; 0xdd8 <UART_enuReceive+0x58>
     dc2:	eb e2       	ldi	r30, 0x2B	; 43
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	82 95       	swap	r24
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	88 23       	and	r24, r24
     dd6:	19 f0       	breq	.+6      	; 0xdde <UART_enuReceive+0x5e>
	     {
	    	 Local_enuErrorStatus= UART_NOK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	06 c0       	rjmp	.+12     	; 0xdea <UART_enuReceive+0x6a>
	     }
	     else
	     {
	    	// *Add_pu16Data =(((UART_u8_UCSRB_REG>>1) & 0X01) << 8); // get bit number 9
	    	*Add_pu16Data = UART_u8_UDR_REG;     // get Lowbyte
     dde:	ec e2       	ldi	r30, 0x2C	; 44
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	ea 81       	ldd	r30, Y+2	; 0x02
     de6:	fb 81       	ldd	r31, Y+3	; 0x03
     de8:	80 83       	st	Z, r24
	     }
	}

	return Local_enuErrorStatus;
     dea:	89 81       	ldd	r24, Y+1	; 0x01
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <UART_CallBackFunctionRX>:
void UART_CallBackFunctionRX(void (*PTF)(void))
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <UART_CallBackFunctionRX+0x6>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
	GPTF_RX = PTF;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	90 93 69 00 	sts	0x0069, r25
     e0e:	80 93 68 00 	sts	0x0068, r24
}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <__vector_13>:
void __vector_13(void)
{
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	2f 93       	push	r18
     e28:	3f 93       	push	r19
     e2a:	4f 93       	push	r20
     e2c:	5f 93       	push	r21
     e2e:	6f 93       	push	r22
     e30:	7f 93       	push	r23
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
     e36:	af 93       	push	r26
     e38:	bf 93       	push	r27
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	GPTF_RX();
     e46:	e0 91 68 00 	lds	r30, 0x0068
     e4a:	f0 91 69 00 	lds	r31, 0x0069
     e4e:	09 95       	icall
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	ff 91       	pop	r31
     e56:	ef 91       	pop	r30
     e58:	bf 91       	pop	r27
     e5a:	af 91       	pop	r26
     e5c:	9f 91       	pop	r25
     e5e:	8f 91       	pop	r24
     e60:	7f 91       	pop	r23
     e62:	6f 91       	pop	r22
     e64:	5f 91       	pop	r21
     e66:	4f 91       	pop	r20
     e68:	3f 91       	pop	r19
     e6a:	2f 91       	pop	r18
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	1f 90       	pop	r1
     e74:	18 95       	reti

00000e76 <Timer0_VoidInitNormal>:

static void (*GPTF_Normal) (void) = NULL;
static void (*GPTF_CTC) (void) = NULL;

void Timer0_VoidInitNormal (u8 Local_PreLoad)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	89 83       	std	Y+1, r24	; 0x01
	Timer0_TCNT0 = Local_PreLoad;
     e82:	e2 e5       	ldi	r30, 0x52	; 82
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	80 83       	st	Z, r24
	/*select normal mode*/
	clear_Bit(Timer0_TCCR0,Timer0_WGM01);
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	87 7f       	andi	r24, 0xF7	; 247
     e96:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_WGM00);
     e98:	a3 e5       	ldi	r26, 0x53	; 83
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e3 e5       	ldi	r30, 0x53	; 83
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7b       	andi	r24, 0xBF	; 191
     ea4:	8c 93       	st	X, r24
	/*Enable overflow interrupt*/
	Set_Bit(Timer0_TIMSK,Timer0_TOIE0);
     ea6:	a9 e5       	ldi	r26, 0x59	; 89
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e9 e5       	ldi	r30, 0x59	; 89
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	8c 93       	st	X, r24
#elif Timer0_Prescaler == Prescaler256
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
	clear_Bit(Timer0_TCCR0,Timer0_CS00);
#elif Timer0_Prescaler == Prescaler1024
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
     eb4:	a3 e5       	ldi	r26, 0x53	; 83
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e3 e5       	ldi	r30, 0x53	; 83
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	84 60       	ori	r24, 0x04	; 4
     ec0:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
     ec2:	a3 e5       	ldi	r26, 0x53	; 83
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8d 7f       	andi	r24, 0xFD	; 253
     ece:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);
     ed0:	a3 e5       	ldi	r26, 0x53	; 83
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);

#endif

#if OC0_Mode == OC0_Toggle
	Set_Bit(Timer0_TCCR0,Timer0_COM00);
     ede:	a3 e5       	ldi	r26, 0x53	; 83
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_COM01);
     eec:	a3 e5       	ldi	r26, 0x53	; 83
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e3 e5       	ldi	r30, 0x53	; 83
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 7d       	andi	r24, 0xDF	; 223
     ef8:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_COM01);
#elif OC0_Mode == OC0_Toggle
	Set_Bit(Timer0_TCCR0,Timer0_COM00);
	clear_Bit(Timer0_TCCR0,Timer0_COM01);
#endif
}
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <Timer0_VoidInitCTC>:
void Timer0_VoidInitCTC (u8 Local_CompareValue)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCR0 = Local_CompareValue;
     f0e:	ec e5       	ldi	r30, 0x5C	; 92
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	80 83       	st	Z, r24
	/*Select CTC mode*/
	Set_Bit(Timer0_TCCR0,Timer0_WGM01);
     f16:	a3 e5       	ldi	r26, 0x53	; 83
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e3 e5       	ldi	r30, 0x53	; 83
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 60       	ori	r24, 0x08	; 8
     f22:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_WGM00);
     f24:	a3 e5       	ldi	r26, 0x53	; 83
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e3 e5       	ldi	r30, 0x53	; 83
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7b       	andi	r24, 0xBF	; 191
     f30:	8c 93       	st	X, r24
	/*Enable interrupt on compare match*/
	Set_Bit(Timer0_TIMSK,Timer0_OCIE0);
     f32:	a9 e5       	ldi	r26, 0x59	; 89
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e9 e5       	ldi	r30, 0x59	; 89
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	82 60       	ori	r24, 0x02	; 2
     f3e:	8c 93       	st	X, r24
#elif Timer0_Prescaler == Prescaler256
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
	clear_Bit(Timer0_TCCR0,Timer0_CS00);
#elif Timer0_Prescaler == Prescaler1024
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
     f40:	a3 e5       	ldi	r26, 0x53	; 83
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e3 e5       	ldi	r30, 0x53	; 83
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	84 60       	ori	r24, 0x04	; 4
     f4c:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
     f4e:	a3 e5       	ldi	r26, 0x53	; 83
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e3 e5       	ldi	r30, 0x53	; 83
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8d 7f       	andi	r24, 0xFD	; 253
     f5a:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);
     f5c:	a3 e5       	ldi	r26, 0x53	; 83
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e3 e5       	ldi	r30, 0x53	; 83
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	81 60       	ori	r24, 0x01	; 1
     f68:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	Set_Bit(Timer0_TCCR0,Timer0_CS01);
	Set_Bit(Timer0_TCCR0,Timer0_CS00);

#endif
}
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <Timer0_VoidSetPreload>:
void Timer0_VoidSetPreload(u8 Local_Preload)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_TCNT0 = Local_Preload;
     f7e:	e2 e5       	ldi	r30, 0x52	; 82
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	80 83       	st	Z, r24
}
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <Timer0_CallBackFunctionNormal>:
void Timer0_CallBackFunctionNormal(void (*PTF)(void))
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <Timer0_CallBackFunctionNormal+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
	GPTF_Normal = PTF;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	90 93 6b 00 	sts	0x006B, r25
     fa4:	80 93 6a 00 	sts	0x006A, r24
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <Timer0_CallBackFunctionCTC>:
void Timer0_CallBackFunctionCTC(void (*PTF)(void))
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <Timer0_CallBackFunctionCTC+0x6>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
	GPTF_CTC = PTF;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	90 93 6d 00 	sts	0x006D, r25
     fc8:	80 93 6c 00 	sts	0x006C, r24
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <__vector_11>:

void __vector_11(void)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	GPTF_Normal();
    1000:	e0 91 6a 00 	lds	r30, 0x006A
    1004:	f0 91 6b 00 	lds	r31, 0x006B
    1008:	09 95       	icall
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	bf 91       	pop	r27
    1014:	af 91       	pop	r26
    1016:	9f 91       	pop	r25
    1018:	8f 91       	pop	r24
    101a:	7f 91       	pop	r23
    101c:	6f 91       	pop	r22
    101e:	5f 91       	pop	r21
    1020:	4f 91       	pop	r20
    1022:	3f 91       	pop	r19
    1024:	2f 91       	pop	r18
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_10>:
void __vector_10(void)
{
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	GPTF_CTC();
    105a:	e0 91 6c 00 	lds	r30, 0x006C
    105e:	f0 91 6d 00 	lds	r31, 0x006D
    1062:	09 95       	icall
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <GIE_VoidEnable>:

#include "../Header/GIE_Register.h"
#include "../Header/GIE_interface.h"

void GIE_VoidEnable (void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GIE_SREG,GIE_SREG_I);
    1092:	af e5       	ldi	r26, 0x5F	; 95
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ef e5       	ldi	r30, 0x5F	; 95
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 68       	ori	r24, 0x80	; 128
    109e:	8c 93       	st	X, r24
}
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <GIE_VoidDisable>:

void GIE_VoidDisable (void)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	clear_Bit(GIE_SREG,GIE_SREG_I);
    10ae:	af e5       	ldi	r26, 0x5F	; 95
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ef e5       	ldi	r30, 0x5F	; 95
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 77       	andi	r24, 0x7F	; 127
    10ba:	8c 93       	st	X, r24
}
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <DIO_VoidSetPinDir>:
#include "../Header/DIO_interface.h"
#include "../Header/DIO_Private.h"
#include "../Header/DIO_Register.h"

void DIO_VoidSetPinDir(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_DirectionState)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	27 97       	sbiw	r28, 0x07	; 7
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	6a 83       	std	Y+2, r22	; 0x02
    10da:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	85 30       	cpi	r24, 0x05	; 5
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <DIO_VoidSetPinDir+0x22>
    10e2:	f0 c0       	rjmp	.+480    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	88 30       	cpi	r24, 0x08	; 8
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO_VoidSetPinDir+0x2a>
    10ea:	ec c0       	rjmp	.+472    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
	{
		if (Local_DirectionState == Input)
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 23       	and	r24, r24
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <DIO_VoidSetPinDir+0x32>
    10f2:	75 c0       	rjmp	.+234    	; 0x11de <DIO_VoidSetPinDir+0x11c>
		{
			switch (Local_Groupname)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3f 83       	std	Y+7, r19	; 0x07
    10fc:	2e 83       	std	Y+6, r18	; 0x06
    10fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1100:	9f 81       	ldd	r25, Y+7	; 0x07
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	91 05       	cpc	r25, r1
    1106:	61 f1       	breq	.+88     	; 0x1160 <DIO_VoidSetPinDir+0x9e>
    1108:	2e 81       	ldd	r18, Y+6	; 0x06
    110a:	3f 81       	ldd	r19, Y+7	; 0x07
    110c:	23 30       	cpi	r18, 0x03	; 3
    110e:	31 05       	cpc	r19, r1
    1110:	34 f4       	brge	.+12     	; 0x111e <DIO_VoidSetPinDir+0x5c>
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	69 f0       	breq	.+26     	; 0x1136 <DIO_VoidSetPinDir+0x74>
    111c:	d3 c0       	rjmp	.+422    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
    111e:	2e 81       	ldd	r18, Y+6	; 0x06
    1120:	3f 81       	ldd	r19, Y+7	; 0x07
    1122:	23 30       	cpi	r18, 0x03	; 3
    1124:	31 05       	cpc	r19, r1
    1126:	89 f1       	breq	.+98     	; 0x118a <DIO_VoidSetPinDir+0xc8>
    1128:	8e 81       	ldd	r24, Y+6	; 0x06
    112a:	9f 81       	ldd	r25, Y+7	; 0x07
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	91 05       	cpc	r25, r1
    1130:	09 f4       	brne	.+2      	; 0x1134 <DIO_VoidSetPinDir+0x72>
    1132:	40 c0       	rjmp	.+128    	; 0x11b4 <DIO_VoidSetPinDir+0xf2>
    1134:	c7 c0       	rjmp	.+398    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					clear_Bit(DIO_DDRA, Local_PinNumber);
    1136:	aa e3       	ldi	r26, 0x3A	; 58
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ea e3       	ldi	r30, 0x3A	; 58
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_VoidSetPinDir+0x92>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_VoidSetPinDir+0x8e>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	b2 c0       	rjmp	.+356    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					clear_Bit (DIO_DDRB, Local_PinNumber);
    1160:	a7 e3       	ldi	r26, 0x37	; 55
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e7 e3       	ldi	r30, 0x37	; 55
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_VoidSetPinDir+0xbc>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_VoidSetPinDir+0xb8>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	9d c0       	rjmp	.+314    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					clear_Bit (DIO_DDRC, Local_PinNumber);
    118a:	a4 e3       	ldi	r26, 0x34	; 52
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e4 e3       	ldi	r30, 0x34	; 52
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_VoidSetPinDir+0xe6>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_VoidSetPinDir+0xe2>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	88 c0       	rjmp	.+272    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					clear_Bit (DIO_DDRD, Local_PinNumber);
    11b4:	a1 e3       	ldi	r26, 0x31	; 49
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e1 e3       	ldi	r30, 0x31	; 49
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_VoidSetPinDir+0x110>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_VoidSetPinDir+0x10c>
    11d6:	80 95       	com	r24
    11d8:	84 23       	and	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	73 c0       	rjmp	.+230    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
					break;
			}
		}
		else if (Local_DirectionState == Output)
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <DIO_VoidSetPinDir+0x124>
    11e4:	6f c0       	rjmp	.+222    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
		{
			switch (Local_Groupname)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3d 83       	std	Y+5, r19	; 0x05
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	91 05       	cpc	r25, r1
    11f8:	51 f1       	breq	.+84     	; 0x124e <DIO_VoidSetPinDir+0x18c>
    11fa:	2c 81       	ldd	r18, Y+4	; 0x04
    11fc:	3d 81       	ldd	r19, Y+5	; 0x05
    11fe:	23 30       	cpi	r18, 0x03	; 3
    1200:	31 05       	cpc	r19, r1
    1202:	34 f4       	brge	.+12     	; 0x1210 <DIO_VoidSetPinDir+0x14e>
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	61 f0       	breq	.+24     	; 0x1226 <DIO_VoidSetPinDir+0x164>
    120e:	5a c0       	rjmp	.+180    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	23 30       	cpi	r18, 0x03	; 3
    1216:	31 05       	cpc	r19, r1
    1218:	71 f1       	breq	.+92     	; 0x1276 <DIO_VoidSetPinDir+0x1b4>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	84 30       	cpi	r24, 0x04	; 4
    1220:	91 05       	cpc	r25, r1
    1222:	e9 f1       	breq	.+122    	; 0x129e <DIO_VoidSetPinDir+0x1dc>
    1224:	4f c0       	rjmp	.+158    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					Set_Bit(DIO_DDRA, Local_PinNumber);
    1226:	aa e3       	ldi	r26, 0x3A	; 58
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ea e3       	ldi	r30, 0x3A	; 58
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_VoidSetPinDir+0x182>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_VoidSetPinDir+0x17e>
    1248:	84 2b       	or	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	3b c0       	rjmp	.+118    	; 0x12c4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					Set_Bit(DIO_DDRB, Local_PinNumber);
    124e:	a7 e3       	ldi	r26, 0x37	; 55
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e7 e3       	ldi	r30, 0x37	; 55
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_VoidSetPinDir+0x1aa>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_VoidSetPinDir+0x1a6>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	27 c0       	rjmp	.+78     	; 0x12c4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					Set_Bit(DIO_DDRC, Local_PinNumber);
    1276:	a4 e3       	ldi	r26, 0x34	; 52
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e4 e3       	ldi	r30, 0x34	; 52
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_VoidSetPinDir+0x1d2>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_VoidSetPinDir+0x1ce>
    1298:	84 2b       	or	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	13 c0       	rjmp	.+38     	; 0x12c4 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					Set_Bit(DIO_DDRD, Local_PinNumber);
    129e:	a1 e3       	ldi	r26, 0x31	; 49
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e1 e3       	ldi	r30, 0x31	; 49
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_VoidSetPinDir+0x1fa>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_VoidSetPinDir+0x1f6>
    12c0:	84 2b       	or	r24, r20
    12c2:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    12c4:	27 96       	adiw	r28, 0x07	; 7
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_valueState)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	27 97       	sbiw	r28, 0x07	; 7
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	6a 83       	std	Y+2, r22	; 0x02
    12ee:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	85 30       	cpi	r24, 0x05	; 5
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <DIO_VoidSetPinValue+0x22>
    12f6:	f0 c0       	rjmp	.+480    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 30       	cpi	r24, 0x08	; 8
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <DIO_VoidSetPinValue+0x2a>
    12fe:	ec c0       	rjmp	.+472    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
	{
		if (Local_valueState == Low)
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	88 23       	and	r24, r24
    1304:	09 f0       	breq	.+2      	; 0x1308 <DIO_VoidSetPinValue+0x32>
    1306:	75 c0       	rjmp	.+234    	; 0x13f2 <DIO_VoidSetPinValue+0x11c>
		{
			switch (Local_Groupname)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3f 83       	std	Y+7, r19	; 0x07
    1310:	2e 83       	std	Y+6, r18	; 0x06
    1312:	8e 81       	ldd	r24, Y+6	; 0x06
    1314:	9f 81       	ldd	r25, Y+7	; 0x07
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	91 05       	cpc	r25, r1
    131a:	61 f1       	breq	.+88     	; 0x1374 <DIO_VoidSetPinValue+0x9e>
    131c:	2e 81       	ldd	r18, Y+6	; 0x06
    131e:	3f 81       	ldd	r19, Y+7	; 0x07
    1320:	23 30       	cpi	r18, 0x03	; 3
    1322:	31 05       	cpc	r19, r1
    1324:	34 f4       	brge	.+12     	; 0x1332 <DIO_VoidSetPinValue+0x5c>
    1326:	8e 81       	ldd	r24, Y+6	; 0x06
    1328:	9f 81       	ldd	r25, Y+7	; 0x07
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	69 f0       	breq	.+26     	; 0x134a <DIO_VoidSetPinValue+0x74>
    1330:	d3 c0       	rjmp	.+422    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
    1332:	2e 81       	ldd	r18, Y+6	; 0x06
    1334:	3f 81       	ldd	r19, Y+7	; 0x07
    1336:	23 30       	cpi	r18, 0x03	; 3
    1338:	31 05       	cpc	r19, r1
    133a:	89 f1       	breq	.+98     	; 0x139e <DIO_VoidSetPinValue+0xc8>
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	9f 81       	ldd	r25, Y+7	; 0x07
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	91 05       	cpc	r25, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <DIO_VoidSetPinValue+0x72>
    1346:	40 c0       	rjmp	.+128    	; 0x13c8 <DIO_VoidSetPinValue+0xf2>
    1348:	c7 c0       	rjmp	.+398    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					clear_Bit(DIO_PORTA, Local_PinNumber);
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_VoidSetPinValue+0x92>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_VoidSetPinValue+0x8e>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	b2 c0       	rjmp	.+356    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					clear_Bit(DIO_PORTB, Local_PinNumber);
    1374:	a8 e3       	ldi	r26, 0x38	; 56
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e8 e3       	ldi	r30, 0x38	; 56
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_VoidSetPinValue+0xbc>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_VoidSetPinValue+0xb8>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	9d c0       	rjmp	.+314    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					clear_Bit(DIO_PORTC, Local_PinNumber);
    139e:	a5 e3       	ldi	r26, 0x35	; 53
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e3       	ldi	r30, 0x35	; 53
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_VoidSetPinValue+0xe6>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO_VoidSetPinValue+0xe2>
    13c0:	80 95       	com	r24
    13c2:	84 23       	and	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	88 c0       	rjmp	.+272    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					clear_Bit(DIO_PORTD, Local_PinNumber);
    13c8:	a2 e3       	ldi	r26, 0x32	; 50
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e2 e3       	ldi	r30, 0x32	; 50
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_VoidSetPinValue+0x110>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_VoidSetPinValue+0x10c>
    13ea:	80 95       	com	r24
    13ec:	84 23       	and	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	73 c0       	rjmp	.+230    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
					break;
			}
		}
		else if (Local_valueState == High)
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <DIO_VoidSetPinValue+0x124>
    13f8:	6f c0       	rjmp	.+222    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
		{
			switch (Local_Groupname)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3d 83       	std	Y+5, r19	; 0x05
    1402:	2c 83       	std	Y+4, r18	; 0x04
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	91 05       	cpc	r25, r1
    140c:	51 f1       	breq	.+84     	; 0x1462 <DIO_VoidSetPinValue+0x18c>
    140e:	2c 81       	ldd	r18, Y+4	; 0x04
    1410:	3d 81       	ldd	r19, Y+5	; 0x05
    1412:	23 30       	cpi	r18, 0x03	; 3
    1414:	31 05       	cpc	r19, r1
    1416:	34 f4       	brge	.+12     	; 0x1424 <DIO_VoidSetPinValue+0x14e>
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	9d 81       	ldd	r25, Y+5	; 0x05
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	61 f0       	breq	.+24     	; 0x143a <DIO_VoidSetPinValue+0x164>
    1422:	5a c0       	rjmp	.+180    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
    1424:	2c 81       	ldd	r18, Y+4	; 0x04
    1426:	3d 81       	ldd	r19, Y+5	; 0x05
    1428:	23 30       	cpi	r18, 0x03	; 3
    142a:	31 05       	cpc	r19, r1
    142c:	71 f1       	breq	.+92     	; 0x148a <DIO_VoidSetPinValue+0x1b4>
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	84 30       	cpi	r24, 0x04	; 4
    1434:	91 05       	cpc	r25, r1
    1436:	e9 f1       	breq	.+122    	; 0x14b2 <DIO_VoidSetPinValue+0x1dc>
    1438:	4f c0       	rjmp	.+158    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					Set_Bit(DIO_PORTA, Local_PinNumber);
    143a:	ab e3       	ldi	r26, 0x3B	; 59
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_VoidSetPinValue+0x182>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_VoidSetPinValue+0x17e>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	3b c0       	rjmp	.+118    	; 0x14d8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					Set_Bit(DIO_PORTB, Local_PinNumber);
    1462:	a8 e3       	ldi	r26, 0x38	; 56
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e8 e3       	ldi	r30, 0x38	; 56
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_VoidSetPinValue+0x1aa>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_VoidSetPinValue+0x1a6>
    1484:	84 2b       	or	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	27 c0       	rjmp	.+78     	; 0x14d8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					Set_Bit(DIO_PORTC, Local_PinNumber);
    148a:	a5 e3       	ldi	r26, 0x35	; 53
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e3       	ldi	r30, 0x35	; 53
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_VoidSetPinValue+0x1d2>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_VoidSetPinValue+0x1ce>
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	13 c0       	rjmp	.+38     	; 0x14d8 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					Set_Bit(DIO_PORTD, Local_PinNumber);
    14b2:	a2 e3       	ldi	r26, 0x32	; 50
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e2 e3       	ldi	r30, 0x32	; 50
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_VoidSetPinValue+0x1fa>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_VoidSetPinValue+0x1f6>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    14d8:	27 96       	adiw	r28, 0x07	; 7
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO_u8GetPinValue>:
u8	 DIO_u8GetPinValue (u8 Local_Groupname, u8 Local_PinNumber)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_u8GetPinValue+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_u8GetPinValue+0x8>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_u8GetPinValue+0xa>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	8a 83       	std	Y+2, r24	; 0x02
    14fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_returndata = 0;
    14fc:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	85 30       	cpi	r24, 0x05	; 5
    1502:	08 f0       	brcs	.+2      	; 0x1506 <DIO_u8GetPinValue+0x1c>
    1504:	6e c0       	rjmp	.+220    	; 0x15e2 <DIO_u8GetPinValue+0xf8>
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 30       	cpi	r24, 0x08	; 8
    150a:	08 f0       	brcs	.+2      	; 0x150e <DIO_u8GetPinValue+0x24>
    150c:	6a c0       	rjmp	.+212    	; 0x15e2 <DIO_u8GetPinValue+0xf8>
	{
		switch (Local_Groupname)
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3e 83       	std	Y+6, r19	; 0x06
    1516:	2d 83       	std	Y+5, r18	; 0x05
    1518:	4d 81       	ldd	r20, Y+5	; 0x05
    151a:	5e 81       	ldd	r21, Y+6	; 0x06
    151c:	42 30       	cpi	r20, 0x02	; 2
    151e:	51 05       	cpc	r21, r1
    1520:	41 f1       	breq	.+80     	; 0x1572 <DIO_u8GetPinValue+0x88>
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	34 f4       	brge	.+12     	; 0x1538 <DIO_u8GetPinValue+0x4e>
    152c:	2d 81       	ldd	r18, Y+5	; 0x05
    152e:	3e 81       	ldd	r19, Y+6	; 0x06
    1530:	21 30       	cpi	r18, 0x01	; 1
    1532:	31 05       	cpc	r19, r1
    1534:	61 f0       	breq	.+24     	; 0x154e <DIO_u8GetPinValue+0x64>
    1536:	52 c0       	rjmp	.+164    	; 0x15dc <DIO_u8GetPinValue+0xf2>
    1538:	4d 81       	ldd	r20, Y+5	; 0x05
    153a:	5e 81       	ldd	r21, Y+6	; 0x06
    153c:	43 30       	cpi	r20, 0x03	; 3
    153e:	51 05       	cpc	r21, r1
    1540:	51 f1       	breq	.+84     	; 0x1596 <DIO_u8GetPinValue+0xac>
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	91 05       	cpc	r25, r1
    154a:	b9 f1       	breq	.+110    	; 0x15ba <DIO_u8GetPinValue+0xd0>
    154c:	47 c0       	rjmp	.+142    	; 0x15dc <DIO_u8GetPinValue+0xf2>
		{
			case Group_A:
				Local_returndata = Get_Bit(DIO_PINA, Local_PinNumber);
    154e:	e9 e3       	ldi	r30, 0x39	; 57
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_u8GetPinValue+0x7c>
    1562:	55 95       	asr	r21
    1564:	47 95       	ror	r20
    1566:	8a 95       	dec	r24
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_u8GetPinValue+0x78>
    156a:	ca 01       	movw	r24, r20
    156c:	81 70       	andi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	35 c0       	rjmp	.+106    	; 0x15dc <DIO_u8GetPinValue+0xf2>
				break;
			case Group_B:
				Local_returndata = Get_Bit(DIO_PINB, Local_PinNumber);
    1572:	e6 e3       	ldi	r30, 0x36	; 54
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_u8GetPinValue+0xa0>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_u8GetPinValue+0x9c>
    158e:	ca 01       	movw	r24, r20
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	23 c0       	rjmp	.+70     	; 0x15dc <DIO_u8GetPinValue+0xf2>
				break;
			case Group_C:
				Local_returndata = Get_Bit(DIO_PINC, Local_PinNumber);
    1596:	e3 e3       	ldi	r30, 0x33	; 51
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_u8GetPinValue+0xc4>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_u8GetPinValue+0xc0>
    15b2:	ca 01       	movw	r24, r20
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	11 c0       	rjmp	.+34     	; 0x15dc <DIO_u8GetPinValue+0xf2>
				break;
			case Group_D:
				Local_returndata = Get_Bit(DIO_PIND, Local_PinNumber);
    15ba:	e0 e3       	ldi	r30, 0x30	; 48
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_u8GetPinValue+0xe8>
    15ce:	55 95       	asr	r21
    15d0:	47 95       	ror	r20
    15d2:	8a 95       	dec	r24
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_u8GetPinValue+0xe4>
    15d6:	ca 01       	movw	r24, r20
    15d8:	81 70       	andi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    15dc:	59 81       	ldd	r21, Y+1	; 0x01
    15de:	5c 83       	std	Y+4, r21	; 0x04
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_u8GetPinValue+0xfc>
	}
	else
	{
		return -1;
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	8c 83       	std	Y+4, r24	; 0x04
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    15e8:	26 96       	adiw	r28, 0x06	; 6
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <DIO_VoidSetPortDir>:
void DIO_VoidSetPortDir(u8 Local_Groupname, u8 Local_DirectionState)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <DIO_VoidSetPortDir+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <DIO_VoidSetPortDir+0x8>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3c 83       	std	Y+4, r19	; 0x04
    1612:	2b 83       	std	Y+3, r18	; 0x03
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	91 05       	cpc	r25, r1
    161c:	d9 f0       	breq	.+54     	; 0x1654 <DIO_VoidSetPortDir+0x5a>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	23 30       	cpi	r18, 0x03	; 3
    1624:	31 05       	cpc	r19, r1
    1626:	34 f4       	brge	.+12     	; 0x1634 <DIO_VoidSetPortDir+0x3a>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	91 05       	cpc	r25, r1
    1630:	61 f0       	breq	.+24     	; 0x164a <DIO_VoidSetPortDir+0x50>
    1632:	1e c0       	rjmp	.+60     	; 0x1670 <DIO_VoidSetPortDir+0x76>
    1634:	2b 81       	ldd	r18, Y+3	; 0x03
    1636:	3c 81       	ldd	r19, Y+4	; 0x04
    1638:	23 30       	cpi	r18, 0x03	; 3
    163a:	31 05       	cpc	r19, r1
    163c:	81 f0       	breq	.+32     	; 0x165e <DIO_VoidSetPortDir+0x64>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	91 05       	cpc	r25, r1
    1646:	81 f0       	breq	.+32     	; 0x1668 <DIO_VoidSetPortDir+0x6e>
    1648:	13 c0       	rjmp	.+38     	; 0x1670 <DIO_VoidSetPortDir+0x76>
	{
		case Group_A:
			DIO_DDRA = Local_DirectionState;
    164a:	ea e3       	ldi	r30, 0x3A	; 58
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	80 83       	st	Z, r24
    1652:	0e c0       	rjmp	.+28     	; 0x1670 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_B:
			DIO_DDRB = Local_DirectionState;
    1654:	e7 e3       	ldi	r30, 0x37	; 55
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	80 83       	st	Z, r24
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_C:
			DIO_DDRC = Local_DirectionState;
    165e:	e4 e3       	ldi	r30, 0x34	; 52
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	80 83       	st	Z, r24
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_D:
			DIO_DDRD = Local_DirectionState;
    1668:	e1 e3       	ldi	r30, 0x31	; 49
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	80 83       	st	Z, r24
			break;
	}
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Local_Groupname, u8 Local_valueState)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <DIO_VoidSetPortValue+0x6>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <DIO_VoidSetPortValue+0x8>
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	3c 83       	std	Y+4, r19	; 0x04
    1696:	2b 83       	std	Y+3, r18	; 0x03
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	91 05       	cpc	r25, r1
    16a0:	d9 f0       	breq	.+54     	; 0x16d8 <DIO_VoidSetPortValue+0x5a>
    16a2:	2b 81       	ldd	r18, Y+3	; 0x03
    16a4:	3c 81       	ldd	r19, Y+4	; 0x04
    16a6:	23 30       	cpi	r18, 0x03	; 3
    16a8:	31 05       	cpc	r19, r1
    16aa:	34 f4       	brge	.+12     	; 0x16b8 <DIO_VoidSetPortValue+0x3a>
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	91 05       	cpc	r25, r1
    16b4:	61 f0       	breq	.+24     	; 0x16ce <DIO_VoidSetPortValue+0x50>
    16b6:	1e c0       	rjmp	.+60     	; 0x16f4 <DIO_VoidSetPortValue+0x76>
    16b8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ba:	3c 81       	ldd	r19, Y+4	; 0x04
    16bc:	23 30       	cpi	r18, 0x03	; 3
    16be:	31 05       	cpc	r19, r1
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <DIO_VoidSetPortValue+0x64>
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	91 05       	cpc	r25, r1
    16ca:	81 f0       	breq	.+32     	; 0x16ec <DIO_VoidSetPortValue+0x6e>
    16cc:	13 c0       	rjmp	.+38     	; 0x16f4 <DIO_VoidSetPortValue+0x76>
	{
		case Group_A:
			DIO_PORTA = Local_valueState;
    16ce:	eb e3       	ldi	r30, 0x3B	; 59
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	80 83       	st	Z, r24
    16d6:	0e c0       	rjmp	.+28     	; 0x16f4 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_B:
			DIO_PORTB = Local_valueState;
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	80 83       	st	Z, r24
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_C:
			DIO_PORTC = Local_valueState;
    16e2:	e5 e3       	ldi	r30, 0x35	; 53
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	80 83       	st	Z, r24
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_D:
			DIO_PORTD = Local_valueState;
    16ec:	e2 e3       	ldi	r30, 0x32	; 50
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	80 83       	st	Z, r24
			break;
	}
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <DIO_u8GetPortValue>:
u8	 DIO_u8GetPortValue (u8 Local_Groupname)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <DIO_u8GetPortValue+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <DIO_u8GetPortValue+0x8>
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_returndata = 0;
    1712:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D)
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	85 30       	cpi	r24, 0x05	; 5
    1718:	b0 f5       	brcc	.+108    	; 0x1786 <DIO_u8GetPortValue+0x84>
	{
		switch (Local_Groupname)
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3d 83       	std	Y+5, r19	; 0x05
    1722:	2c 83       	std	Y+4, r18	; 0x04
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	82 30       	cpi	r24, 0x02	; 2
    172a:	91 05       	cpc	r25, r1
    172c:	d9 f0       	breq	.+54     	; 0x1764 <DIO_u8GetPortValue+0x62>
    172e:	2c 81       	ldd	r18, Y+4	; 0x04
    1730:	3d 81       	ldd	r19, Y+5	; 0x05
    1732:	23 30       	cpi	r18, 0x03	; 3
    1734:	31 05       	cpc	r19, r1
    1736:	34 f4       	brge	.+12     	; 0x1744 <DIO_u8GetPortValue+0x42>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	61 f0       	breq	.+24     	; 0x175a <DIO_u8GetPortValue+0x58>
    1742:	1e c0       	rjmp	.+60     	; 0x1780 <DIO_u8GetPortValue+0x7e>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	23 30       	cpi	r18, 0x03	; 3
    174a:	31 05       	cpc	r19, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <DIO_u8GetPortValue+0x6c>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	84 30       	cpi	r24, 0x04	; 4
    1754:	91 05       	cpc	r25, r1
    1756:	81 f0       	breq	.+32     	; 0x1778 <DIO_u8GetPortValue+0x76>
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <DIO_u8GetPortValue+0x7e>
		{
			case Group_A:
				Local_returndata = DIO_PINA;
    175a:	e9 e3       	ldi	r30, 0x39	; 57
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_B:
				Local_returndata = DIO_PINB;
    1764:	e6 e3       	ldi	r30, 0x36	; 54
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_C:
				Local_returndata = DIO_PINC;
    176e:	e3 e3       	ldi	r30, 0x33	; 51
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_D:
				Local_returndata = DIO_PIND;
    1778:	e0 e3       	ldi	r30, 0x30	; 48
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    1780:	99 81       	ldd	r25, Y+1	; 0x01
    1782:	9b 83       	std	Y+3, r25	; 0x03
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_u8GetPortValue+0x88>
	}
	else
	{
		return -1;
    1786:	2f ef       	ldi	r18, 0xFF	; 255
    1788:	2b 83       	std	Y+3, r18	; 0x03
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <DIO_VoidToggleBit>:
void DIO_VoidToggleBit(u8 Local_Groupname, u8 Local_PinNumber)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <DIO_VoidToggleBit+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <DIO_VoidToggleBit+0x8>
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3c 83       	std	Y+4, r19	; 0x04
    17b4:	2b 83       	std	Y+3, r18	; 0x03
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	91 05       	cpc	r25, r1
    17be:	51 f1       	breq	.+84     	; 0x1814 <DIO_VoidToggleBit+0x78>
    17c0:	2b 81       	ldd	r18, Y+3	; 0x03
    17c2:	3c 81       	ldd	r19, Y+4	; 0x04
    17c4:	23 30       	cpi	r18, 0x03	; 3
    17c6:	31 05       	cpc	r19, r1
    17c8:	34 f4       	brge	.+12     	; 0x17d6 <DIO_VoidToggleBit+0x3a>
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	91 05       	cpc	r25, r1
    17d2:	61 f0       	breq	.+24     	; 0x17ec <DIO_VoidToggleBit+0x50>
    17d4:	5a c0       	rjmp	.+180    	; 0x188a <DIO_VoidToggleBit+0xee>
    17d6:	2b 81       	ldd	r18, Y+3	; 0x03
    17d8:	3c 81       	ldd	r19, Y+4	; 0x04
    17da:	23 30       	cpi	r18, 0x03	; 3
    17dc:	31 05       	cpc	r19, r1
    17de:	71 f1       	breq	.+92     	; 0x183c <DIO_VoidToggleBit+0xa0>
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	84 30       	cpi	r24, 0x04	; 4
    17e6:	91 05       	cpc	r25, r1
    17e8:	e9 f1       	breq	.+122    	; 0x1864 <DIO_VoidToggleBit+0xc8>
    17ea:	4f c0       	rjmp	.+158    	; 0x188a <DIO_VoidToggleBit+0xee>
	{
		case Group_A:
			toggle_Bit(DIO_PORTA, Local_PinNumber);
    17ec:	ab e3       	ldi	r26, 0x3B	; 59
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	eb e3       	ldi	r30, 0x3B	; 59
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_VoidToggleBit+0x6e>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_VoidToggleBit+0x6a>
    180e:	84 27       	eor	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	3b c0       	rjmp	.+118    	; 0x188a <DIO_VoidToggleBit+0xee>
			break;
		case Group_B:
			toggle_Bit(DIO_PORTB, Local_PinNumber);
    1814:	a8 e3       	ldi	r26, 0x38	; 56
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e8 e3       	ldi	r30, 0x38	; 56
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_VoidToggleBit+0x96>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <DIO_VoidToggleBit+0x92>
    1836:	84 27       	eor	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	27 c0       	rjmp	.+78     	; 0x188a <DIO_VoidToggleBit+0xee>
			break;
		case Group_C:
			toggle_Bit(DIO_PORTC, Local_PinNumber);
    183c:	a5 e3       	ldi	r26, 0x35	; 53
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e5 e3       	ldi	r30, 0x35	; 53
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <DIO_VoidToggleBit+0xbe>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <DIO_VoidToggleBit+0xba>
    185e:	84 27       	eor	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	13 c0       	rjmp	.+38     	; 0x188a <DIO_VoidToggleBit+0xee>
			break;
		case Group_D:
			toggle_Bit(DIO_PORTD, Local_PinNumber);
    1864:	a2 e3       	ldi	r26, 0x32	; 50
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e2 e3       	ldi	r30, 0x32	; 50
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	48 2f       	mov	r20, r24
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 2e       	mov	r0, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <DIO_VoidToggleBit+0xe6>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	0a 94       	dec	r0
    1884:	e2 f7       	brpl	.-8      	; 0x187e <DIO_VoidToggleBit+0xe2>
    1886:	84 27       	eor	r24, r20
    1888:	8c 93       	st	X, r24
			break;
	}
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <DIO_VoidTogglePORT>:
void DIO_VoidTogglePORT(u8 Local_Groupname)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <DIO_VoidTogglePORT+0x6>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01

	switch (Local_Groupname)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	3b 83       	std	Y+3, r19	; 0x03
    18ae:	2a 83       	std	Y+2, r18	; 0x02
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	91 05       	cpc	r25, r1
    18b8:	f1 f0       	breq	.+60     	; 0x18f6 <DIO_VoidTogglePORT+0x5e>
    18ba:	2a 81       	ldd	r18, Y+2	; 0x02
    18bc:	3b 81       	ldd	r19, Y+3	; 0x03
    18be:	23 30       	cpi	r18, 0x03	; 3
    18c0:	31 05       	cpc	r19, r1
    18c2:	34 f4       	brge	.+12     	; 0x18d0 <DIO_VoidTogglePORT+0x38>
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <DIO_VoidTogglePORT+0x4e>
    18ce:	2a c0       	rjmp	.+84     	; 0x1924 <DIO_VoidTogglePORT+0x8c>
    18d0:	2a 81       	ldd	r18, Y+2	; 0x02
    18d2:	3b 81       	ldd	r19, Y+3	; 0x03
    18d4:	23 30       	cpi	r18, 0x03	; 3
    18d6:	31 05       	cpc	r19, r1
    18d8:	b1 f0       	breq	.+44     	; 0x1906 <DIO_VoidTogglePORT+0x6e>
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	91 05       	cpc	r25, r1
    18e2:	c9 f0       	breq	.+50     	; 0x1916 <DIO_VoidTogglePORT+0x7e>
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <DIO_VoidTogglePORT+0x8c>
	{
		case Group_A:
			DIO_PORTA = ~DIO_PORTA;
    18e6:	ab e3       	ldi	r26, 0x3B	; 59
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 95       	com	r24
    18f2:	8c 93       	st	X, r24
    18f4:	17 c0       	rjmp	.+46     	; 0x1924 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_B:
			DIO_PORTB = ~DIO_PORTB;
    18f6:	a8 e3       	ldi	r26, 0x38	; 56
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e8 e3       	ldi	r30, 0x38	; 56
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	80 95       	com	r24
    1902:	8c 93       	st	X, r24
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_C:
			DIO_PORTC = ~DIO_PORTC;
    1906:	a5 e3       	ldi	r26, 0x35	; 53
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e5 e3       	ldi	r30, 0x35	; 53
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 95       	com	r24
    1912:	8c 93       	st	X, r24
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_D:
			DIO_PORTD = ~DIO_PORTD;
    1916:	a2 e3       	ldi	r26, 0x32	; 50
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e2 e3       	ldi	r30, 0x32	; 50
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 95       	com	r24
    1922:	8c 93       	st	X, r24
			break;
	}

}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <ADC_VoidInitPolling>:
#include "../Header/ADC_Private.h"
#include "../Header/ADC_Config.h"
#include "../Header/ADC_interface.h"

void ADC_VoidInitPolling	(void)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
	/*enable ADC*/
	Set_Bit(ADC_ADCSRA, ADC_ADEN);
    1938:	a6 e2       	ldi	r26, 0x26	; 38
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e6 e2       	ldi	r30, 0x26	; 38
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	80 68       	ori	r24, 0x80	; 128
    1944:	8c 93       	st	X, r24
	/*Set reference voltage to AVCC*/
	Set_Bit(ADC_ADMUX, ADC_REFS0);
    1946:	a7 e2       	ldi	r26, 0x27	; 39
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e7 e2       	ldi	r30, 0x27	; 39
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	80 64       	ori	r24, 0x40	; 64
    1952:	8c 93       	st	X, r24
	clear_Bit(ADC_ADMUX, ADC_REFS1);
    1954:	a7 e2       	ldi	r26, 0x27	; 39
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e7 e2       	ldi	r30, 0x27	; 39
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8f 77       	andi	r24, 0x7F	; 127
    1960:	8c 93       	st	X, r24
	/*deactivate left adjust result*/
	clear_Bit(ADC_ADMUX,ADC_ADLAR);
    1962:	a7 e2       	ldi	r26, 0x27	; 39
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e7 e2       	ldi	r30, 0x27	; 39
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8f 7d       	andi	r24, 0xDF	; 223
    196e:	8c 93       	st	X, r24
	/*Select prescaler to 32 --> 011*/
	Set_Bit(ADC_ADCSRA, ADC_ADPS0);
    1970:	a6 e2       	ldi	r26, 0x26	; 38
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e6 e2       	ldi	r30, 0x26	; 38
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	81 60       	ori	r24, 0x01	; 1
    197c:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS1);
    197e:	a6 e2       	ldi	r26, 0x26	; 38
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e6 e2       	ldi	r30, 0x26	; 38
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	82 60       	ori	r24, 0x02	; 2
    198a:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS2);
    198c:	a6 e2       	ldi	r26, 0x26	; 38
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e6 e2       	ldi	r30, 0x26	; 38
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	84 60       	ori	r24, 0x04	; 4
    1998:	8c 93       	st	X, r24

}
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <ADC_VoidInitInterrupt>:
void ADC_VoidInitInterrupt	(void)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	/*enable ADC*/
	Set_Bit(ADC_ADCSRA, ADC_ADEN);
    19a8:	a6 e2       	ldi	r26, 0x26	; 38
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e6 e2       	ldi	r30, 0x26	; 38
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 68       	ori	r24, 0x80	; 128
    19b4:	8c 93       	st	X, r24
	/*Set reference voltage to AVCC*/
	Set_Bit(ADC_ADMUX, ADC_REFS0);
    19b6:	a7 e2       	ldi	r26, 0x27	; 39
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e7 e2       	ldi	r30, 0x27	; 39
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 64       	ori	r24, 0x40	; 64
    19c2:	8c 93       	st	X, r24
	clear_Bit(ADC_ADMUX, ADC_REFS1);
    19c4:	a7 e2       	ldi	r26, 0x27	; 39
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e7 e2       	ldi	r30, 0x27	; 39
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8f 77       	andi	r24, 0x7F	; 127
    19d0:	8c 93       	st	X, r24
	/*activate left adjust result*/
	Set_Bit(ADC_ADMUX,ADC_ADLAR);
    19d2:	a7 e2       	ldi	r26, 0x27	; 39
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e7 e2       	ldi	r30, 0x27	; 39
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 62       	ori	r24, 0x20	; 32
    19de:	8c 93       	st	X, r24
	/*Select prescaler to 8 --> 011*/
	Set_Bit(ADC_ADCSRA, ADC_ADPS0);
    19e0:	a6 e2       	ldi	r26, 0x26	; 38
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 e2       	ldi	r30, 0x26	; 38
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS1);
    19ee:	a6 e2       	ldi	r26, 0x26	; 38
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e6 e2       	ldi	r30, 0x26	; 38
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	82 60       	ori	r24, 0x02	; 2
    19fa:	8c 93       	st	X, r24
	clear_Bit(ADC_ADCSRA, ADC_ADPS2);
    19fc:	a6 e2       	ldi	r26, 0x26	; 38
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e6 e2       	ldi	r30, 0x26	; 38
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8b 7f       	andi	r24, 0xFB	; 251
    1a08:	8c 93       	st	X, r24
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <ADC_U16GetValue>:

u16 ADC_U16GetValue(u8 ADC_Channel)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <ADC_U16GetValue+0x6>
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
	u16 LOCAL_READ ;
	/*Select THe 5 Bit */
	ADC_Channel  = ADC_Channel & 0x1F;
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	8f 71       	andi	r24, 0x1F	; 31
    1a22:	8b 83       	std	Y+3, r24	; 0x03
	ADC_ADMUX  &= 0xE0 ;
    1a24:	a7 e2       	ldi	r26, 0x27	; 39
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e7 e2       	ldi	r30, 0x27	; 39
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 7e       	andi	r24, 0xE0	; 224
    1a30:	8c 93       	st	X, r24
	ADC_ADMUX  |= ADC_Channel ;
    1a32:	a7 e2       	ldi	r26, 0x27	; 39
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e7 e2       	ldi	r30, 0x27	; 39
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	90 81       	ld	r25, Z
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	89 2b       	or	r24, r25
    1a40:	8c 93       	st	X, r24
	/*Start conversion*/
	ADC_ADCSRA |= (1<<ADC_ADSC);
    1a42:	a6 e2       	ldi	r26, 0x26	; 38
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e6 e2       	ldi	r30, 0x26	; 38
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 64       	ori	r24, 0x40	; 64
    1a4e:	8c 93       	st	X, r24
	while((Get_Bit(ADC_ADCSRA,ADC_ADIF)) == 0);
    1a50:	e6 e2       	ldi	r30, 0x26	; 38
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	82 95       	swap	r24
    1a58:	8f 70       	andi	r24, 0x0F	; 15
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	81 70       	andi	r24, 0x01	; 1
    1a60:	90 70       	andi	r25, 0x00	; 0
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	a9 f3       	breq	.-22     	; 0x1a50 <ADC_U16GetValue+0x40>
	LOCAL_READ = ADC_ADCW;
    1a66:	e4 e2       	ldi	r30, 0x24	; 36
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
	return LOCAL_READ;
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <LCD_VoidSendCommand>:

#include <stdio.h>
#include <util/delay.h>

void LCD_VoidSendCommand(u8 Local_command)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	0f 92       	push	r0
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to command --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,Low);
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
    1a90:	65 e0       	ldi	r22, 0x05	; 5
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	66 e0       	ldi	r22, 0x06	; 6
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
	/*set Enable pin to High*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1aa2:	84 e0       	ldi	r24, 0x04	; 4
    1aa4:	67 e0       	ldi	r22, 0x07	; 7
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
	/*send the command line*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_command);
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	69 81       	ldd	r22, Y+1	; 0x01
    1ab0:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	67 e0       	ldi	r22, 0x07	; 7
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
}
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <LCD_VoidSendChar>:
void LCD_VoidSendChar(u8 Local_char)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	0f 92       	push	r0
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to Data --> 1*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,High);
    1ad2:	84 e0       	ldi	r24, 0x04	; 4
    1ad4:	65 e0       	ldi	r22, 0x05	; 5
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	66 e0       	ldi	r22, 0x06	; 6
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1ae6:	84 e0       	ldi	r24, 0x04	; 4
    1ae8:	67 e0       	ldi	r22, 0x07	; 7
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
	/*send the char*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_char);
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	69 81       	ldd	r22, Y+1	; 0x01
    1af4:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    1af8:	84 e0       	ldi	r24, 0x04	; 4
    1afa:	67 e0       	ldi	r22, 0x07	; 7
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
}
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <LCD_Void8BitInit>:
void LCD_Void8BitInit(void)
{
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	c6 54       	subi	r28, 0x46	; 70
    1b18:	d0 40       	sbci	r29, 0x00	; 0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
	/*Select The Directions*/
	DIO_VoidSetPortDir(LCD_DataGroup,Max_Output);
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	6f ef       	ldi	r22, 0xFF	; 255
    1b28:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <DIO_VoidSetPortDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RS_Pin, Output);
    1b2c:	84 e0       	ldi	r24, 0x04	; 4
    1b2e:	65 e0       	ldi	r22, 0x05	; 5
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	0e 94 61 08 	call	0x10c2	; 0x10c2 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RW_Pin, Output);
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	66 e0       	ldi	r22, 0x06	; 6
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_E_Pin, Output);
    1b40:	84 e0       	ldi	r24, 0x04	; 4
    1b42:	67 e0       	ldi	r22, 0x07	; 7
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 61 08 	call	0x10c2	; 0x10c2 <DIO_VoidSetPinDir>
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	ed 5b       	subi	r30, 0xBD	; 189
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	ac e0       	ldi	r26, 0x0C	; 12
    1b56:	b2 e4       	ldi	r27, 0x42	; 66
    1b58:	80 83       	st	Z, r24
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	a2 83       	std	Z+2, r26	; 0x02
    1b5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	8e 01       	movw	r16, r28
    1b62:	01 5c       	subi	r16, 0xC1	; 193
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	ed 5b       	subi	r30, 0xBD	; 189
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a ef       	ldi	r20, 0xFA	; 250
    1b7a:	54 e4       	ldi	r21, 0x44	; 68
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	f8 01       	movw	r30, r16
    1b86:	80 83       	st	Z, r24
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	a2 83       	std	Z+2, r26	; 0x02
    1b8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ff 96       	adiw	r30, 0x3f	; 63
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <LCD_Void8BitInit+0xaa>
		__ticks = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9e af       	std	Y+62, r25	; 0x3e
    1bb0:	8d af       	std	Y+61, r24	; 0x3d
    1bb2:	46 c0       	rjmp	.+140    	; 0x1c40 <LCD_Void8BitInit+0x136>
	else if (__tmp > 65535)
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	ff 96       	adiw	r30, 0x3f	; 63
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	64 f5       	brge	.+88     	; 0x1c28 <LCD_Void8BitInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ed 5b       	subi	r30, 0xBD	; 189
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9e af       	std	Y+62, r25	; 0x3e
    1bfc:	8d af       	std	Y+61, r24	; 0x3d
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <LCD_Void8BitInit+0x114>
    1c00:	88 ec       	ldi	r24, 0xC8	; 200
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9c af       	std	Y+60, r25	; 0x3c
    1c06:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c08:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LCD_Void8BitInit+0x102>
    1c10:	9c af       	std	Y+60, r25	; 0x3c
    1c12:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9e af       	std	Y+62, r25	; 0x3e
    1c1c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <LCD_Void8BitInit+0xf6>
    1c26:	16 c0       	rjmp	.+44     	; 0x1c54 <LCD_Void8BitInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ff 96       	adiw	r30, 0x3f	; 63
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9e af       	std	Y+62, r25	; 0x3e
    1c3e:	8d af       	std	Y+61, r24	; 0x3d
    1c40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c44:	9a af       	std	Y+58, r25	; 0x3a
    1c46:	89 af       	std	Y+57, r24	; 0x39
    1c48:	89 ad       	ldd	r24, Y+57	; 0x39
    1c4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_Void8BitInit+0x142>
    1c50:	9a af       	std	Y+58, r25	; 0x3a
    1c52:	89 af       	std	Y+57, r24	; 0x39

	/*wait for more than 30ms after power up*/
	_delay_ms(35);
	/*function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8);
    1c54:	88 e3       	ldi	r24, 0x38	; 56
    1c56:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e8       	ldi	r26, 0x80	; 128
    1c60:	bf e3       	ldi	r27, 0x3F	; 63
    1c62:	8d ab       	std	Y+53, r24	; 0x35
    1c64:	9e ab       	std	Y+54, r25	; 0x36
    1c66:	af ab       	std	Y+55, r26	; 0x37
    1c68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c6c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c6e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c70:	98 ad       	ldd	r25, Y+56	; 0x38
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a ef       	ldi	r20, 0xFA	; 250
    1c78:	54 e4       	ldi	r21, 0x44	; 68
    1c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	89 ab       	std	Y+49, r24	; 0x31
    1c84:	9a ab       	std	Y+50, r25	; 0x32
    1c86:	ab ab       	std	Y+51, r26	; 0x33
    1c88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c90:	9c a9       	ldd	r25, Y+52	; 0x34
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <LCD_Void8BitInit+0x1a2>
		__ticks = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	98 ab       	std	Y+48, r25	; 0x30
    1ca8:	8f a7       	std	Y+47, r24	; 0x2f
    1caa:	3f c0       	rjmp	.+126    	; 0x1d2a <LCD_Void8BitInit+0x220>
	else if (__tmp > 65535)
    1cac:	69 a9       	ldd	r22, Y+49	; 0x31
    1cae:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	4c f5       	brge	.+82     	; 0x1d16 <LCD_Void8BitInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cca:	98 ad       	ldd	r25, Y+56	; 0x38
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	98 ab       	std	Y+48, r25	; 0x30
    1cea:	8f a7       	std	Y+47, r24	; 0x2f
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_Void8BitInit+0x202>
    1cee:	88 ec       	ldi	r24, 0xC8	; 200
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9e a7       	std	Y+46, r25	; 0x2e
    1cf4:	8d a7       	std	Y+45, r24	; 0x2d
    1cf6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cf8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_Void8BitInit+0x1f0>
    1cfe:	9e a7       	std	Y+46, r25	; 0x2e
    1d00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d04:	98 a9       	ldd	r25, Y+48	; 0x30
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	98 ab       	std	Y+48, r25	; 0x30
    1d0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	69 f7       	brne	.-38     	; 0x1cee <LCD_Void8BitInit+0x1e4>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <LCD_Void8BitInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	69 a9       	ldd	r22, Y+49	; 0x31
    1d18:	7a a9       	ldd	r23, Y+50	; 0x32
    1d1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	98 ab       	std	Y+48, r25	; 0x30
    1d28:	8f a7       	std	Y+47, r24	; 0x2f
    1d2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2e:	9c a7       	std	Y+44, r25	; 0x2c
    1d30:	8b a7       	std	Y+43, r24	; 0x2b
    1d32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d34:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_Void8BitInit+0x22c>
    1d3a:	9c a7       	std	Y+44, r25	; 0x2c
    1d3c:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Display On off control*/
	LCD_VoidSendCommand(LCD_CursorON);
    1d3e:	8e e0       	ldi	r24, 0x0E	; 14
    1d40:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	8f a3       	std	Y+39, r24	; 0x27
    1d4e:	98 a7       	std	Y+40, r25	; 0x28
    1d50:	a9 a7       	std	Y+41, r26	; 0x29
    1d52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	6f a1       	ldd	r22, Y+39	; 0x27
    1d56:	78 a5       	ldd	r23, Y+40	; 0x28
    1d58:	89 a5       	ldd	r24, Y+41	; 0x29
    1d5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a ef       	ldi	r20, 0xFA	; 250
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8b a3       	std	Y+35, r24	; 0x23
    1d6e:	9c a3       	std	Y+36, r25	; 0x24
    1d70:	ad a3       	std	Y+37, r26	; 0x25
    1d72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d74:	6b a1       	ldd	r22, Y+35	; 0x23
    1d76:	7c a1       	ldd	r23, Y+36	; 0x24
    1d78:	8d a1       	ldd	r24, Y+37	; 0x25
    1d7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <LCD_Void8BitInit+0x28c>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9a a3       	std	Y+34, r25	; 0x22
    1d92:	89 a3       	std	Y+33, r24	; 0x21
    1d94:	3f c0       	rjmp	.+126    	; 0x1e14 <LCD_Void8BitInit+0x30a>
	else if (__tmp > 65535)
    1d96:	6b a1       	ldd	r22, Y+35	; 0x23
    1d98:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <LCD_Void8BitInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	6f a1       	ldd	r22, Y+39	; 0x27
    1db0:	78 a5       	ldd	r23, Y+40	; 0x28
    1db2:	89 a5       	ldd	r24, Y+41	; 0x29
    1db4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9a a3       	std	Y+34, r25	; 0x22
    1dd4:	89 a3       	std	Y+33, r24	; 0x21
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <LCD_Void8BitInit+0x2ec>
    1dd8:	88 ec       	ldi	r24, 0xC8	; 200
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	98 a3       	std	Y+32, r25	; 0x20
    1dde:	8f 8f       	std	Y+31, r24	; 0x1f
    1de0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de2:	98 a1       	ldd	r25, Y+32	; 0x20
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_Void8BitInit+0x2da>
    1de8:	98 a3       	std	Y+32, r25	; 0x20
    1dea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	89 a1       	ldd	r24, Y+33	; 0x21
    1dee:	9a a1       	ldd	r25, Y+34	; 0x22
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9a a3       	std	Y+34, r25	; 0x22
    1df4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	89 a1       	ldd	r24, Y+33	; 0x21
    1df8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <LCD_Void8BitInit+0x2ce>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <LCD_Void8BitInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	6b a1       	ldd	r22, Y+35	; 0x23
    1e02:	7c a1       	ldd	r23, Y+36	; 0x24
    1e04:	8d a1       	ldd	r24, Y+37	; 0x25
    1e06:	9e a1       	ldd	r25, Y+38	; 0x26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9a a3       	std	Y+34, r25	; 0x22
    1e12:	89 a3       	std	Y+33, r24	; 0x21
    1e14:	89 a1       	ldd	r24, Y+33	; 0x21
    1e16:	9a a1       	ldd	r25, Y+34	; 0x22
    1e18:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_Void8BitInit+0x316>
    1e24:	9e 8f       	std	Y+30, r25	; 0x1e
    1e26:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Clear LCD*/
	LCD_VoidSendCommand(LCD_ClearDisplay);
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e0       	ldi	r26, 0x00	; 0
    1e34:	b0 e4       	ldi	r27, 0x40	; 64
    1e36:	89 8f       	std	Y+25, r24	; 0x19
    1e38:	9a 8f       	std	Y+26, r25	; 0x1a
    1e3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a ef       	ldi	r20, 0xFA	; 250
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8d 8b       	std	Y+21, r24	; 0x15
    1e58:	9e 8b       	std	Y+22, r25	; 0x16
    1e5a:	af 8b       	std	Y+23, r26	; 0x17
    1e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e60:	7e 89       	ldd	r23, Y+22	; 0x16
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <LCD_Void8BitInit+0x376>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9c 8b       	std	Y+20, r25	; 0x14
    1e7c:	8b 8b       	std	Y+19, r24	; 0x13
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <LCD_Void8BitInit+0x3f4>
	else if (__tmp > 65535)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <LCD_Void8BitInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	69 8d       	ldd	r22, Y+25	; 0x19
    1e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <LCD_Void8BitInit+0x3d6>
    1ec2:	88 ec       	ldi	r24, 0xC8	; 200
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
    1eca:	89 89       	ldd	r24, Y+17	; 0x11
    1ecc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_Void8BitInit+0x3c4>
    1ed2:	9a 8b       	std	Y+18, r25	; 0x12
    1ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9c 8b       	std	Y+20, r25	; 0x14
    1ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <LCD_Void8BitInit+0x3b8>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <LCD_Void8BitInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	6d 89       	ldd	r22, Y+21	; 0x15
    1eec:	7e 89       	ldd	r23, Y+22	; 0x16
    1eee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	98 8b       	std	Y+16, r25	; 0x10
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	98 89       	ldd	r25, Y+16	; 0x10
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_Void8BitInit+0x400>
    1f0e:	98 8b       	std	Y+16, r25	; 0x10
    1f10:	8f 87       	std	Y+15, r24	; 0x0f
	/*wait for more than 1.53ms*/
	_delay_ms(2);
	/*Entry Mode*/
	LCD_VoidSendCommand(LCD_EntryMode2);
    1f12:	86 e0       	ldi	r24, 0x06	; 6
    1f14:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e8       	ldi	r26, 0x80	; 128
    1f1e:	bf e3       	ldi	r27, 0x3F	; 63
    1f20:	8b 87       	std	Y+11, r24	; 0x0b
    1f22:	9c 87       	std	Y+12, r25	; 0x0c
    1f24:	ad 87       	std	Y+13, r26	; 0x0d
    1f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a ef       	ldi	r20, 0xFA	; 250
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8f 83       	std	Y+7, r24	; 0x07
    1f42:	98 87       	std	Y+8, r25	; 0x08
    1f44:	a9 87       	std	Y+9, r26	; 0x09
    1f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <LCD_Void8BitInit+0x460>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	3f c0       	rjmp	.+126    	; 0x1fe8 <LCD_Void8BitInit+0x4de>
	else if (__tmp > 65535)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	57 e4       	ldi	r21, 0x47	; 71
    1f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	4c f5       	brge	.+82     	; 0x1fd4 <LCD_Void8BitInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e2       	ldi	r20, 0x20	; 32
    1f90:	51 e4       	ldi	r21, 0x41	; 65
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <LCD_Void8BitInit+0x4c0>
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 83       	std	Y+4, r25	; 0x04
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_Void8BitInit+0x4ae>
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <LCD_Void8BitInit+0x4a2>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <LCD_Void8BitInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_Void8BitInit+0x4ea>
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ffc:	ca 5b       	subi	r28, 0xBA	; 186
    1ffe:	df 4f       	sbci	r29, 0xFF	; 255
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	08 95       	ret

00002014 <LCD_VoidSendString>:
void LCD_VoidSendString (char *Ref_string)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	00 d0       	rcall	.+0      	; 0x201a <LCD_VoidSendString+0x6>
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	0a c0       	rjmp	.+20     	; 0x2038 <LCD_VoidSendString+0x24>
	while (*Ref_string != '\0')
	{
		LCD_VoidSendChar(*Ref_string);
    2024:	e9 81       	ldd	r30, Y+1	; 0x01
    2026:	fa 81       	ldd	r31, Y+2	; 0x02
    2028:	80 81       	ld	r24, Z
    202a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_VoidSendChar>
		Ref_string++;
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LCD_EntryMode2);
	_delay_ms(1);
}
void LCD_VoidSendString (char *Ref_string)
{
	while (*Ref_string != '\0')
    2038:	e9 81       	ldd	r30, Y+1	; 0x01
    203a:	fa 81       	ldd	r31, Y+2	; 0x02
    203c:	80 81       	ld	r24, Z
    203e:	88 23       	and	r24, r24
    2040:	89 f7       	brne	.-30     	; 0x2024 <LCD_VoidSendString+0x10>
	{
		LCD_VoidSendChar(*Ref_string);
		Ref_string++;
	}
}
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32 Local_Number)
{
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	28 97       	sbiw	r28, 0x08	; 8
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	6d 83       	std	Y+5, r22	; 0x05
    206a:	7e 83       	std	Y+6, r23	; 0x06
    206c:	8f 83       	std	Y+7, r24	; 0x07
    206e:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_ReversedNum = 2;
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a0 e0       	ldi	r26, 0x00	; 0
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	ab 83       	std	Y+3, r26	; 0x03
    207e:	bc 83       	std	Y+4, r27	; 0x04
    2080:	36 c0       	rjmp	.+108    	; 0x20ee <LCD_VoidSendNumber+0xa2>
	while (Local_Number != 0)
	{
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	ab 81       	ldd	r26, Y+3	; 0x03
    2088:	bc 81       	ldd	r27, Y+4	; 0x04
    208a:	2a e0       	ldi	r18, 0x0A	; 10
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__mulsi3>
    209a:	7b 01       	movw	r14, r22
    209c:	8c 01       	movw	r16, r24
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	af 81       	ldd	r26, Y+7	; 0x07
    20a4:	b8 85       	ldd	r27, Y+8	; 0x08
    20a6:	2a e0       	ldi	r18, 0x0A	; 10
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <__udivmodsi4>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8e 0d       	add	r24, r14
    20bc:	9f 1d       	adc	r25, r15
    20be:	a0 1f       	adc	r26, r16
    20c0:	b1 1f       	adc	r27, r17
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	ab 83       	std	Y+3, r26	; 0x03
    20c8:	bc 83       	std	Y+4, r27	; 0x04
		Local_Number = Local_Number / 10;
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	af 81       	ldd	r26, Y+7	; 0x07
    20d0:	b8 85       	ldd	r27, Y+8	; 0x08
    20d2:	2a e0       	ldi	r18, 0x0A	; 10
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 5d 17 	call	0x2eba	; 0x2eba <__udivmodsi4>
    20e2:	da 01       	movw	r26, r20
    20e4:	c9 01       	movw	r24, r18
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	af 83       	std	Y+7, r26	; 0x07
    20ec:	b8 87       	std	Y+8, r27	; 0x08
	}
}
void LCD_VoidSendNumber(u32 Local_Number)
{
	u32 Local_ReversedNum = 2;
	while (Local_Number != 0)
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	af 81       	ldd	r26, Y+7	; 0x07
    20f4:	b8 85       	ldd	r27, Y+8	; 0x08
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	a1 05       	cpc	r26, r1
    20fa:	b1 05       	cpc	r27, r1
    20fc:	11 f6       	brne	.-124    	; 0x2082 <LCD_VoidSendNumber+0x36>
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
		Local_Number = Local_Number / 10;
	}
	do
	{
		LCD_VoidSendChar((Local_ReversedNum%10)+ '0');
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	ab 81       	ldd	r26, Y+3	; 0x03
    2104:	bc 81       	ldd	r27, Y+4	; 0x04
    2106:	2a e0       	ldi	r18, 0x0A	; 10
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 5d 17 	call	0x2eba	; 0x2eba <__udivmodsi4>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	80 5d       	subi	r24, 0xD0	; 208
    211c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_VoidSendChar>
		Local_ReversedNum /= 10;
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	ab 81       	ldd	r26, Y+3	; 0x03
    2126:	bc 81       	ldd	r27, Y+4	; 0x04
    2128:	2a e0       	ldi	r18, 0x0A	; 10
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 5d 17 	call	0x2eba	; 0x2eba <__udivmodsi4>
    2138:	da 01       	movw	r26, r20
    213a:	c9 01       	movw	r24, r18
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	ab 83       	std	Y+3, r26	; 0x03
    2142:	bc 83       	std	Y+4, r27	; 0x04
	}while(Local_ReversedNum != 2);
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	ab 81       	ldd	r26, Y+3	; 0x03
    214a:	bc 81       	ldd	r27, Y+4	; 0x04
    214c:	82 30       	cpi	r24, 0x02	; 2
    214e:	91 05       	cpc	r25, r1
    2150:	a1 05       	cpc	r26, r1
    2152:	b1 05       	cpc	r27, r1
    2154:	a1 f6       	brne	.-88     	; 0x20fe <LCD_VoidSendNumber+0xb2>
	}
	for (int count = i-1; count >= 0; count--)
	{
		LCD_VoidSendChar(arr[count] + '0');
	}*/
}
    2156:	28 96       	adiw	r28, 0x08	; 8
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	08 95       	ret

00002170 <LCD_VoidStartFrom>:
void LCD_VoidStartFrom(u8 Local_RowPosition, u8 Local_ColPosition)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <LCD_VoidStartFrom+0x6>
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	6b 83       	std	Y+3, r22	; 0x03
	if((Local_ColPosition < Cols_Number) && (Local_RowPosition < Rows_Number))
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	80 31       	cpi	r24, 0x10	; 16
    2184:	b8 f4       	brcc	.+46     	; 0x21b4 <LCD_VoidStartFrom+0x44>
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	82 30       	cpi	r24, 0x02	; 2
    218a:	a0 f4       	brcc	.+40     	; 0x21b4 <LCD_VoidStartFrom+0x44>
	{
		u8 Local_DDRAMAddress = LCD_SetAddressDDRAM + (Local_RowPosition * Line1_Address) + Local_ColPosition;
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 96       	adiw	r24, 0x02	; 2
    2194:	00 24       	eor	r0, r0
    2196:	96 95       	lsr	r25
    2198:	87 95       	ror	r24
    219a:	07 94       	ror	r0
    219c:	96 95       	lsr	r25
    219e:	87 95       	ror	r24
    21a0:	07 94       	ror	r0
    21a2:	98 2f       	mov	r25, r24
    21a4:	80 2d       	mov	r24, r0
    21a6:	98 2f       	mov	r25, r24
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	89 0f       	add	r24, r25
    21ac:	89 83       	std	Y+1, r24	; 0x01
		LCD_VoidSendCommand(Local_DDRAMAddress);
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
	}
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_VoidSendStringFromPos>:
void LCD_VoidSendStringFromPos (char *Ref_string, u8 Local_RowPosition, u8 Local_ColPosition)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <LCD_VoidSendStringFromPos+0x6>
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <LCD_VoidSendStringFromPos+0x8>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <LCD_VoidSendStringFromPos+0xa>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
    21d2:	6d 83       	std	Y+5, r22	; 0x05
    21d4:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_Index = 0;
    21d6:	1a 82       	std	Y+2, r1	; 0x02
	u8 line;
	if (Local_RowPosition == 0)
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	88 23       	and	r24, r24
    21dc:	11 f4       	brne	.+4      	; 0x21e2 <LCD_VoidSendStringFromPos+0x22>
	{
		line = Line_1;
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	05 c0       	rjmp	.+10     	; 0x21ec <LCD_VoidSendStringFromPos+0x2c>
	}
	else if (Local_RowPosition == 1)
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	11 f4       	brne	.+4      	; 0x21ec <LCD_VoidSendStringFromPos+0x2c>
	{
		line = Line_2;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	6e 81       	ldd	r22, Y+6	; 0x06
    21f0:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_VoidStartFrom>
    21f4:	90 c0       	rjmp	.+288    	; 0x2316 <LCD_VoidSendStringFromPos+0x156>
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
	{
		if((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Cols_Number)
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	ac 01       	movw	r20, r24
    21fe:	42 95       	swap	r20
    2200:	52 95       	swap	r21
    2202:	50 7f       	andi	r21, 0xF0	; 240
    2204:	54 27       	eor	r21, r20
    2206:	40 7f       	andi	r20, 0xF0	; 240
    2208:	54 27       	eor	r21, r20
    220a:	8e 81       	ldd	r24, Y+6	; 0x06
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	82 0f       	add	r24, r18
    2218:	93 1f       	adc	r25, r19
    221a:	84 0f       	add	r24, r20
    221c:	95 1f       	adc	r25, r21
    221e:	80 31       	cpi	r24, 0x10	; 16
    2220:	91 05       	cpc	r25, r1
    2222:	7c f4       	brge	.+30     	; 0x2242 <LCD_VoidSendStringFromPos+0x82>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	fc 01       	movw	r30, r24
    2230:	e2 0f       	add	r30, r18
    2232:	f3 1f       	adc	r31, r19
    2234:	80 81       	ld	r24, Z
    2236:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_VoidSendChar>
			Local_Index++;
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	8f 5f       	subi	r24, 0xFF	; 255
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	6a c0       	rjmp	.+212    	; 0x2316 <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) == Cols_Number) && (line == Line_1))
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	ac 01       	movw	r20, r24
    224a:	42 95       	swap	r20
    224c:	52 95       	swap	r21
    224e:	50 7f       	andi	r21, 0xF0	; 240
    2250:	54 27       	eor	r21, r20
    2252:	40 7f       	andi	r20, 0xF0	; 240
    2254:	54 27       	eor	r21, r20
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	82 0f       	add	r24, r18
    2264:	93 1f       	adc	r25, r19
    2266:	84 0f       	add	r24, r20
    2268:	95 1f       	adc	r25, r21
    226a:	80 31       	cpi	r24, 0x10	; 16
    226c:	91 05       	cpc	r25, r1
    226e:	69 f4       	brne	.+26     	; 0x228a <LCD_VoidSendStringFromPos+0xca>
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	88 23       	and	r24, r24
    2274:	51 f4       	brne	.+20     	; 0x228a <LCD_VoidSendStringFromPos+0xca>
		{
			LCD_VoidStartFrom(1,0);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_VoidStartFrom>
			line = Line_2;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	89 83       	std	Y+1, r24	; 0x01
			Local_RowPosition = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	8d 83       	std	Y+5, r24	; 0x05
			Local_ColPosition = 0;
    2286:	1e 82       	std	Y+6, r1	; 0x06
    2288:	46 c0       	rjmp	.+140    	; 0x2316 <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Total_blocks_Num) && (line == Line_2))
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	ac 01       	movw	r20, r24
    2292:	42 95       	swap	r20
    2294:	52 95       	swap	r21
    2296:	50 7f       	andi	r21, 0xF0	; 240
    2298:	54 27       	eor	r21, r20
    229a:	40 7f       	andi	r20, 0xF0	; 240
    229c:	54 27       	eor	r21, r20
    229e:	8e 81       	ldd	r24, Y+6	; 0x06
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	82 0f       	add	r24, r18
    22ac:	93 1f       	adc	r25, r19
    22ae:	84 0f       	add	r24, r20
    22b0:	95 1f       	adc	r25, r21
    22b2:	80 32       	cpi	r24, 0x20	; 32
    22b4:	91 05       	cpc	r25, r1
    22b6:	7c f5       	brge	.+94     	; 0x2316 <LCD_VoidSendStringFromPos+0x156>
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	81 30       	cpi	r24, 0x01	; 1
    22bc:	61 f5       	brne	.+88     	; 0x2316 <LCD_VoidSendStringFromPos+0x156>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	fc 01       	movw	r30, r24
    22ca:	e2 0f       	add	r30, r18
    22cc:	f3 1f       	adc	r31, r19
    22ce:	80 81       	ld	r24, Z
    22d0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_VoidSendChar>
			Local_Index++;
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	8a 83       	std	Y+2, r24	; 0x02
			if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index)) == Total_blocks_Num)
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	ac 01       	movw	r20, r24
    22e2:	42 95       	swap	r20
    22e4:	52 95       	swap	r21
    22e6:	50 7f       	andi	r21, 0xF0	; 240
    22e8:	54 27       	eor	r21, r20
    22ea:	40 7f       	andi	r20, 0xF0	; 240
    22ec:	54 27       	eor	r21, r20
    22ee:	8e 81       	ldd	r24, Y+6	; 0x06
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	82 0f       	add	r24, r18
    22fc:	93 1f       	adc	r25, r19
    22fe:	84 0f       	add	r24, r20
    2300:	95 1f       	adc	r25, r21
    2302:	80 32       	cpi	r24, 0x20	; 32
    2304:	91 05       	cpc	r25, r1
    2306:	39 f4       	brne	.+14     	; 0x2316 <LCD_VoidSendStringFromPos+0x156>
			{
				LCD_VoidStartFrom(0,0);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_VoidStartFrom>
				Local_RowPosition = 0;
    2310:	1d 82       	std	Y+5, r1	; 0x05
				Local_ColPosition = 0;
    2312:	1e 82       	std	Y+6, r1	; 0x06
				line = Line_1;
    2314:	19 82       	std	Y+1, r1	; 0x01
	else if (Local_RowPosition == 1)
	{
		line = Line_2;
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	fc 01       	movw	r30, r24
    2322:	e2 0f       	add	r30, r18
    2324:	f3 1f       	adc	r31, r19
    2326:	80 81       	ld	r24, Z
    2328:	88 23       	and	r24, r24
    232a:	c1 f0       	breq	.+48     	; 0x235c <LCD_VoidSendStringFromPos+0x19c>
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	ac 01       	movw	r20, r24
    2334:	42 95       	swap	r20
    2336:	52 95       	swap	r21
    2338:	50 7f       	andi	r21, 0xF0	; 240
    233a:	54 27       	eor	r21, r20
    233c:	40 7f       	andi	r20, 0xF0	; 240
    233e:	54 27       	eor	r21, r20
    2340:	8e 81       	ldd	r24, Y+6	; 0x06
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	82 0f       	add	r24, r18
    234e:	93 1f       	adc	r25, r19
    2350:	84 0f       	add	r24, r20
    2352:	95 1f       	adc	r25, r21
    2354:	80 32       	cpi	r24, 0x20	; 32
    2356:	91 05       	cpc	r25, r1
    2358:	0c f4       	brge	.+2      	; 0x235c <LCD_VoidSendStringFromPos+0x19c>
    235a:	4d cf       	rjmp	.-358    	; 0x21f6 <LCD_VoidSendStringFromPos+0x36>
				Local_ColPosition = 0;
				line = Line_1;
			}
		}
	}
}
    235c:	26 96       	adiw	r28, 0x06	; 6
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <LCD_VoidAddCustomPattern>:
void LCD_VoidAddCustomPattern(u8 * Local_Pattern, u8 Local_IndexCGRAM)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	64 97       	sbiw	r28, 0x14	; 20
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	9b 8b       	std	Y+19, r25	; 0x13
    2384:	8a 8b       	std	Y+18, r24	; 0x12
    2386:	6c 8b       	std	Y+20, r22	; 0x14
	if(Local_IndexCGRAM < CGRAM_MaxSize)
    2388:	8c 89       	ldd	r24, Y+20	; 0x14
    238a:	88 30       	cpi	r24, 0x08	; 8
    238c:	08 f0       	brcs	.+2      	; 0x2390 <LCD_VoidAddCustomPattern+0x22>
    238e:	9a c0       	rjmp	.+308    	; 0x24c4 <LCD_VoidAddCustomPattern+0x156>
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
    2390:	8c 89       	ldd	r24, Y+20	; 0x14
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	08 96       	adiw	r24, 0x08	; 8
    2398:	88 0f       	add	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	89 8b       	std	Y+17, r24	; 0x11
		LCD_VoidSendCommand(Local_CGRAMAddress);
    23a6:	89 89       	ldd	r24, Y+17	; 0x11
    23a8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
		for(int index = 0; index < CGRAM_MaxSize; index++)
    23ac:	18 8a       	std	Y+16, r1	; 0x10
    23ae:	1f 86       	std	Y+15, r1	; 0x0f
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_VoidAddCustomPattern+0x62>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
    23b2:	2f 85       	ldd	r18, Y+15	; 0x0f
    23b4:	38 89       	ldd	r19, Y+16	; 0x10
    23b6:	8a 89       	ldd	r24, Y+18	; 0x12
    23b8:	9b 89       	ldd	r25, Y+19	; 0x13
    23ba:	fc 01       	movw	r30, r24
    23bc:	e2 0f       	add	r30, r18
    23be:	f3 1f       	adc	r31, r19
    23c0:	80 81       	ld	r24, Z
    23c2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_VoidSendChar>
{
	if(Local_IndexCGRAM < CGRAM_MaxSize)
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
		LCD_VoidSendCommand(Local_CGRAMAddress);
		for(int index = 0; index < CGRAM_MaxSize; index++)
    23c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c8:	98 89       	ldd	r25, Y+16	; 0x10
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	98 8b       	std	Y+16, r25	; 0x10
    23ce:	8f 87       	std	Y+15, r24	; 0x0f
    23d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d2:	98 89       	ldd	r25, Y+16	; 0x10
    23d4:	88 30       	cpi	r24, 0x08	; 8
    23d6:	91 05       	cpc	r25, r1
    23d8:	64 f3       	brlt	.-40     	; 0x23b2 <LCD_VoidAddCustomPattern+0x44>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
		}
		LCD_VoidSendCommand(LCD_ReturnHome);
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e0       	ldi	r26, 0x00	; 0
    23e6:	b0 e4       	ldi	r27, 0x40	; 64
    23e8:	8b 87       	std	Y+11, r24	; 0x0b
    23ea:	9c 87       	std	Y+12, r25	; 0x0c
    23ec:	ad 87       	std	Y+13, r26	; 0x0d
    23ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4a ef       	ldi	r20, 0xFA	; 250
    23fe:	54 e4       	ldi	r21, 0x44	; 68
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	8f 83       	std	Y+7, r24	; 0x07
    240a:	98 87       	std	Y+8, r25	; 0x08
    240c:	a9 87       	std	Y+9, r26	; 0x09
    240e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2410:	6f 81       	ldd	r22, Y+7	; 0x07
    2412:	78 85       	ldd	r23, Y+8	; 0x08
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	2c f4       	brge	.+10     	; 0x2432 <LCD_VoidAddCustomPattern+0xc4>
		__ticks = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	3f c0       	rjmp	.+126    	; 0x24b0 <LCD_VoidAddCustomPattern+0x142>
	else if (__tmp > 65535)
    2432:	6f 81       	ldd	r22, Y+7	; 0x07
    2434:	78 85       	ldd	r23, Y+8	; 0x08
    2436:	89 85       	ldd	r24, Y+9	; 0x09
    2438:	9a 85       	ldd	r25, Y+10	; 0x0a
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	3f ef       	ldi	r19, 0xFF	; 255
    243e:	4f e7       	ldi	r20, 0x7F	; 127
    2440:	57 e4       	ldi	r21, 0x47	; 71
    2442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2446:	18 16       	cp	r1, r24
    2448:	4c f5       	brge	.+82     	; 0x249c <LCD_VoidAddCustomPattern+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244a:	6b 85       	ldd	r22, Y+11	; 0x0b
    244c:	7c 85       	ldd	r23, Y+12	; 0x0c
    244e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2450:	9e 85       	ldd	r25, Y+14	; 0x0e
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	51 e4       	ldi	r21, 0x41	; 65
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9e 83       	std	Y+6, r25	; 0x06
    2470:	8d 83       	std	Y+5, r24	; 0x05
    2472:	0f c0       	rjmp	.+30     	; 0x2492 <LCD_VoidAddCustomPattern+0x124>
    2474:	88 ec       	ldi	r24, 0xC8	; 200
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9c 83       	std	Y+4, r25	; 0x04
    247a:	8b 83       	std	Y+3, r24	; 0x03
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_VoidAddCustomPattern+0x112>
    2484:	9c 83       	std	Y+4, r25	; 0x04
    2486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	9e 81       	ldd	r25, Y+6	; 0x06
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	9e 81       	ldd	r25, Y+6	; 0x06
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	69 f7       	brne	.-38     	; 0x2474 <LCD_VoidAddCustomPattern+0x106>
    249a:	14 c0       	rjmp	.+40     	; 0x24c4 <LCD_VoidAddCustomPattern+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	6f 81       	ldd	r22, Y+7	; 0x07
    249e:	78 85       	ldd	r23, Y+8	; 0x08
    24a0:	89 85       	ldd	r24, Y+9	; 0x09
    24a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	9a 83       	std	Y+2, r25	; 0x02
    24b6:	89 83       	std	Y+1, r24	; 0x01
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	9a 81       	ldd	r25, Y+2	; 0x02
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_VoidAddCustomPattern+0x14e>
    24c0:	9a 83       	std	Y+2, r25	; 0x02
    24c2:	89 83       	std	Y+1, r24	; 0x01
		/*Wait more than 1.53ms after ReturnHome Command*/
		_delay_ms(2);
	}
}
    24c4:	64 96       	adiw	r28, 0x14	; 20
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <LCD_VoidCustomDisplay>:
void LCD_VoidCustomDisplay(u8 Local_CGRAMIndex, u8 Local_RowPosition, u8 Local_ColPosition)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <LCD_VoidCustomDisplay+0x6>
    24dc:	0f 92       	push	r0
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	6a 83       	std	Y+2, r22	; 0x02
    24e6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VoidStartFrom(Local_RowPosition, Local_ColPosition);
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	6b 81       	ldd	r22, Y+3	; 0x03
    24ec:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_VoidStartFrom>
	LCD_VoidSendChar(Local_CGRAMIndex);
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_VoidSendChar>
}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <LCD_VoidRightShift>:
void LCD_VoidRightShift (char *Ref_string)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	ae 97       	sbiw	r28, 0x2e	; 46
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	9e a7       	std	Y+46, r25	; 0x2e
    2518:	8d a7       	std	Y+45, r24	; 0x2d
	u8 Local_RowPosition = 0;
    251a:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Local_ColPosition = 0;
    251c:	1b a6       	std	Y+43, r1	; 0x2b
    251e:	84 c0       	rjmp	.+264    	; 0x2628 <LCD_VoidRightShift+0x126>
	while(1){
		while(Local_RowPosition == Line_1)
		{
			LCD_VoidSendStringFromPos(Ref_string,0,0);
    2520:	8d a5       	ldd	r24, Y+45	; 0x2d
    2522:	9e a5       	ldd	r25, Y+46	; 0x2e
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    252c:	8c e1       	ldi	r24, 0x1C	; 28
    252e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	aa e7       	ldi	r26, 0x7A	; 122
    2538:	b3 e4       	ldi	r27, 0x43	; 67
    253a:	8f a3       	std	Y+39, r24	; 0x27
    253c:	98 a7       	std	Y+40, r25	; 0x28
    253e:	a9 a7       	std	Y+41, r26	; 0x29
    2540:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2542:	6f a1       	ldd	r22, Y+39	; 0x27
    2544:	78 a5       	ldd	r23, Y+40	; 0x28
    2546:	89 a5       	ldd	r24, Y+41	; 0x29
    2548:	9a a5       	ldd	r25, Y+42	; 0x2a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	4a ef       	ldi	r20, 0xFA	; 250
    2550:	54 e4       	ldi	r21, 0x44	; 68
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	8b a3       	std	Y+35, r24	; 0x23
    255c:	9c a3       	std	Y+36, r25	; 0x24
    255e:	ad a3       	std	Y+37, r26	; 0x25
    2560:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e8       	ldi	r20, 0x80	; 128
    2570:	5f e3       	ldi	r21, 0x3F	; 63
    2572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2576:	88 23       	and	r24, r24
    2578:	2c f4       	brge	.+10     	; 0x2584 <LCD_VoidRightShift+0x82>
		__ticks = 1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9a a3       	std	Y+34, r25	; 0x22
    2580:	89 a3       	std	Y+33, r24	; 0x21
    2582:	3f c0       	rjmp	.+126    	; 0x2602 <LCD_VoidRightShift+0x100>
	else if (__tmp > 65535)
    2584:	6b a1       	ldd	r22, Y+35	; 0x23
    2586:	7c a1       	ldd	r23, Y+36	; 0x24
    2588:	8d a1       	ldd	r24, Y+37	; 0x25
    258a:	9e a1       	ldd	r25, Y+38	; 0x26
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	3f ef       	ldi	r19, 0xFF	; 255
    2590:	4f e7       	ldi	r20, 0x7F	; 127
    2592:	57 e4       	ldi	r21, 0x47	; 71
    2594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2598:	18 16       	cp	r1, r24
    259a:	4c f5       	brge	.+82     	; 0x25ee <LCD_VoidRightShift+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259c:	6f a1       	ldd	r22, Y+39	; 0x27
    259e:	78 a5       	ldd	r23, Y+40	; 0x28
    25a0:	89 a5       	ldd	r24, Y+41	; 0x29
    25a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e2       	ldi	r20, 0x20	; 32
    25aa:	51 e4       	ldi	r21, 0x41	; 65
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9a a3       	std	Y+34, r25	; 0x22
    25c2:	89 a3       	std	Y+33, r24	; 0x21
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <LCD_VoidRightShift+0xe2>
    25c6:	88 ec       	ldi	r24, 0xC8	; 200
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	98 a3       	std	Y+32, r25	; 0x20
    25cc:	8f 8f       	std	Y+31, r24	; 0x1f
    25ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d0:	98 a1       	ldd	r25, Y+32	; 0x20
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_VoidRightShift+0xd0>
    25d6:	98 a3       	std	Y+32, r25	; 0x20
    25d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25da:	89 a1       	ldd	r24, Y+33	; 0x21
    25dc:	9a a1       	ldd	r25, Y+34	; 0x22
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	9a a3       	std	Y+34, r25	; 0x22
    25e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	89 a1       	ldd	r24, Y+33	; 0x21
    25e6:	9a a1       	ldd	r25, Y+34	; 0x22
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	69 f7       	brne	.-38     	; 0x25c6 <LCD_VoidRightShift+0xc4>
    25ec:	14 c0       	rjmp	.+40     	; 0x2616 <LCD_VoidRightShift+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ee:	6b a1       	ldd	r22, Y+35	; 0x23
    25f0:	7c a1       	ldd	r23, Y+36	; 0x24
    25f2:	8d a1       	ldd	r24, Y+37	; 0x25
    25f4:	9e a1       	ldd	r25, Y+38	; 0x26
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9a a3       	std	Y+34, r25	; 0x22
    2600:	89 a3       	std	Y+33, r24	; 0x21
    2602:	89 a1       	ldd	r24, Y+33	; 0x21
    2604:	9a a1       	ldd	r25, Y+34	; 0x22
    2606:	9e 8f       	std	Y+30, r25	; 0x1e
    2608:	8d 8f       	std	Y+29, r24	; 0x1d
    260a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    260c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_VoidRightShift+0x10c>
    2612:	9e 8f       	std	Y+30, r25	; 0x1e
    2614:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    2616:	8b a5       	ldd	r24, Y+43	; 0x2b
    2618:	8f 5f       	subi	r24, 0xFF	; 255
    261a:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    261c:	8b a5       	ldd	r24, Y+43	; 0x2b
    261e:	80 31       	cpi	r24, 0x10	; 16
    2620:	19 f4       	brne	.+6      	; 0x2628 <LCD_VoidRightShift+0x126>
			{
				Local_ColPosition = 0;
    2622:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_2;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	8c a7       	std	Y+44, r24	; 0x2c
void LCD_VoidRightShift (char *Ref_string)
{
	u8 Local_RowPosition = 0;
	u8 Local_ColPosition = 0;
	while(1){
		while(Local_RowPosition == Line_1)
    2628:	8c a5       	ldd	r24, Y+44	; 0x2c
    262a:	88 23       	and	r24, r24
    262c:	09 f4       	brne	.+2      	; 0x2630 <LCD_VoidRightShift+0x12e>
    262e:	78 cf       	rjmp	.-272    	; 0x2520 <LCD_VoidRightShift+0x1e>
			{
				Local_ColPosition = 0;
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 e0       	ldi	r26, 0x00	; 0
    263c:	b0 e4       	ldi	r27, 0x40	; 64
    263e:	89 8f       	std	Y+25, r24	; 0x19
    2640:	9a 8f       	std	Y+26, r25	; 0x1a
    2642:	ab 8f       	std	Y+27, r26	; 0x1b
    2644:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2646:	69 8d       	ldd	r22, Y+25	; 0x19
    2648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a ef       	ldi	r20, 0xFA	; 250
    2654:	54 e4       	ldi	r21, 0x44	; 68
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8d 8b       	std	Y+21, r24	; 0x15
    2660:	9e 8b       	std	Y+22, r25	; 0x16
    2662:	af 8b       	std	Y+23, r26	; 0x17
    2664:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2666:	6d 89       	ldd	r22, Y+21	; 0x15
    2668:	7e 89       	ldd	r23, Y+22	; 0x16
    266a:	8f 89       	ldd	r24, Y+23	; 0x17
    266c:	98 8d       	ldd	r25, Y+24	; 0x18
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	2c f4       	brge	.+10     	; 0x2688 <LCD_VoidRightShift+0x186>
		__ticks = 1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9c 8b       	std	Y+20, r25	; 0x14
    2684:	8b 8b       	std	Y+19, r24	; 0x13
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <LCD_VoidRightShift+0x204>
	else if (__tmp > 65535)
    2688:	6d 89       	ldd	r22, Y+21	; 0x15
    268a:	7e 89       	ldd	r23, Y+22	; 0x16
    268c:	8f 89       	ldd	r24, Y+23	; 0x17
    268e:	98 8d       	ldd	r25, Y+24	; 0x18
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	4c f5       	brge	.+82     	; 0x26f2 <LCD_VoidRightShift+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	69 8d       	ldd	r22, Y+25	; 0x19
    26a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <LCD_VoidRightShift+0x1e6>
    26ca:	88 ec       	ldi	r24, 0xC8	; 200
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9a 8b       	std	Y+18, r25	; 0x12
    26d0:	89 8b       	std	Y+17, r24	; 0x11
    26d2:	89 89       	ldd	r24, Y+17	; 0x11
    26d4:	9a 89       	ldd	r25, Y+18	; 0x12
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_VoidRightShift+0x1d4>
    26da:	9a 8b       	std	Y+18, r25	; 0x12
    26dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	8b 89       	ldd	r24, Y+19	; 0x13
    26e0:	9c 89       	ldd	r25, Y+20	; 0x14
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	9c 8b       	std	Y+20, r25	; 0x14
    26e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ea:	9c 89       	ldd	r25, Y+20	; 0x14
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	69 f7       	brne	.-38     	; 0x26ca <LCD_VoidRightShift+0x1c8>
    26f0:	98 c0       	rjmp	.+304    	; 0x2822 <LCD_VoidRightShift+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	6d 89       	ldd	r22, Y+21	; 0x15
    26f4:	7e 89       	ldd	r23, Y+22	; 0x16
    26f6:	8f 89       	ldd	r24, Y+23	; 0x17
    26f8:	98 8d       	ldd	r25, Y+24	; 0x18
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9c 8b       	std	Y+20, r25	; 0x14
    2704:	8b 8b       	std	Y+19, r24	; 0x13
    2706:	8b 89       	ldd	r24, Y+19	; 0x13
    2708:	9c 89       	ldd	r25, Y+20	; 0x14
    270a:	98 8b       	std	Y+16, r25	; 0x10
    270c:	8f 87       	std	Y+15, r24	; 0x0f
    270e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2710:	98 89       	ldd	r25, Y+16	; 0x10
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_VoidRightShift+0x210>
    2716:	98 8b       	std	Y+16, r25	; 0x10
    2718:	8f 87       	std	Y+15, r24	; 0x0f
    271a:	83 c0       	rjmp	.+262    	; 0x2822 <LCD_VoidRightShift+0x320>
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
		{
			LCD_VoidSendStringFromPos(Ref_string,1,0);
    271c:	8d a5       	ldd	r24, Y+45	; 0x2d
    271e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    2728:	8c e1       	ldi	r24, 0x1C	; 28
    272a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	aa e7       	ldi	r26, 0x7A	; 122
    2734:	b3 e4       	ldi	r27, 0x43	; 67
    2736:	8b 87       	std	Y+11, r24	; 0x0b
    2738:	9c 87       	std	Y+12, r25	; 0x0c
    273a:	ad 87       	std	Y+13, r26	; 0x0d
    273c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a ef       	ldi	r20, 0xFA	; 250
    274c:	54 e4       	ldi	r21, 0x44	; 68
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	8f 83       	std	Y+7, r24	; 0x07
    2758:	98 87       	std	Y+8, r25	; 0x08
    275a:	a9 87       	std	Y+9, r26	; 0x09
    275c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275e:	6f 81       	ldd	r22, Y+7	; 0x07
    2760:	78 85       	ldd	r23, Y+8	; 0x08
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2772:	88 23       	and	r24, r24
    2774:	2c f4       	brge	.+10     	; 0x2780 <LCD_VoidRightShift+0x27e>
		__ticks = 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	3f c0       	rjmp	.+126    	; 0x27fe <LCD_VoidRightShift+0x2fc>
	else if (__tmp > 65535)
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2794:	18 16       	cp	r1, r24
    2796:	4c f5       	brge	.+82     	; 0x27ea <LCD_VoidRightShift+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	6b 85       	ldd	r22, Y+11	; 0x0b
    279a:	7c 85       	ldd	r23, Y+12	; 0x0c
    279c:	8d 85       	ldd	r24, Y+13	; 0x0d
    279e:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e2       	ldi	r20, 0x20	; 32
    27a6:	51 e4       	ldi	r21, 0x41	; 65
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	0f c0       	rjmp	.+30     	; 0x27e0 <LCD_VoidRightShift+0x2de>
    27c2:	88 ec       	ldi	r24, 0xC8	; 200
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9c 83       	std	Y+4, r25	; 0x04
    27c8:	8b 83       	std	Y+3, r24	; 0x03
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <LCD_VoidRightShift+0x2cc>
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	69 f7       	brne	.-38     	; 0x27c2 <LCD_VoidRightShift+0x2c0>
    27e8:	14 c0       	rjmp	.+40     	; 0x2812 <LCD_VoidRightShift+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ea:	6f 81       	ldd	r22, Y+7	; 0x07
    27ec:	78 85       	ldd	r23, Y+8	; 0x08
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_VoidRightShift+0x308>
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    2812:	8b a5       	ldd	r24, Y+43	; 0x2b
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    2818:	8b a5       	ldd	r24, Y+43	; 0x2b
    281a:	80 31       	cpi	r24, 0x10	; 16
    281c:	11 f4       	brne	.+4      	; 0x2822 <LCD_VoidRightShift+0x320>
			{
				Local_ColPosition = 0;
    281e:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_1;
    2820:	1c a6       	std	Y+44, r1	; 0x2c
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
    2822:	8c a5       	ldd	r24, Y+44	; 0x2c
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	09 f4       	brne	.+2      	; 0x282a <LCD_VoidRightShift+0x328>
    2828:	79 cf       	rjmp	.-270    	; 0x271c <LCD_VoidRightShift+0x21a>
    282a:	fe ce       	rjmp	.-516    	; 0x2628 <LCD_VoidRightShift+0x126>

0000282c <Keypad_GetPressedKey>:

/**************************************************************************************************/
/****************************************Function Definition***************************************/

u8 Keypad_GetPressedKey(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	00 d0       	rcall	.+0      	; 0x2832 <Keypad_GetPressedKey+0x6>
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Row, Local_Col;
	while(1)
	{
		for (Local_Col = 0; Local_Col < N_COL; Local_Col++)
    2836:	19 82       	std	Y+1, r1	; 0x01
    2838:	4c c0       	rjmp	.+152    	; 0x28d2 <Keypad_GetPressedKey+0xa6>
		{
			//DIO_VoidSetPortDir(KEYPAD_PORT,(0b00010000 << Local_Col));
			KEYPAD_PORT_DIR = (0b00010000 << Local_Col);
    283a:	ea e3       	ldi	r30, 0x3A	; 58
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	80 e1       	ldi	r24, 0x10	; 16
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	02 c0       	rjmp	.+4      	; 0x284e <Keypad_GetPressedKey+0x22>
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	2a 95       	dec	r18
    2850:	e2 f7       	brpl	.-8      	; 0x284a <Keypad_GetPressedKey+0x1e>
    2852:	80 83       	st	Z, r24
			//DIO_VoidSetPortValue(KEYPAD_PORT,(~(0b00010000<< Local_Col)));
			KEYPAD_PORT_OUT = (~(0b00010000<< Local_Col));
    2854:	eb e3       	ldi	r30, 0x3B	; 59
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	80 e1       	ldi	r24, 0x10	; 16
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	02 2e       	mov	r0, r18
    2864:	02 c0       	rjmp	.+4      	; 0x286a <Keypad_GetPressedKey+0x3e>
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	0a 94       	dec	r0
    286c:	e2 f7       	brpl	.-8      	; 0x2866 <Keypad_GetPressedKey+0x3a>
    286e:	80 95       	com	r24
    2870:	80 83       	st	Z, r24

			for (Local_Row = 0; Local_Row < N_ROW; Local_Row++)
    2872:	1a 82       	std	Y+2, r1	; 0x02
    2874:	28 c0       	rjmp	.+80     	; 0x28c6 <Keypad_GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,Local_Row))
    2876:	e9 e3       	ldi	r30, 0x39	; 57
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a9 01       	movw	r20, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <Keypad_GetPressedKey+0x62>
    288a:	55 95       	asr	r21
    288c:	47 95       	ror	r20
    288e:	8a 95       	dec	r24
    2890:	e2 f7       	brpl	.-8      	; 0x288a <Keypad_GetPressedKey+0x5e>
    2892:	ca 01       	movw	r24, r20
    2894:	81 70       	andi	r24, 0x01	; 1
    2896:	90 70       	andi	r25, 0x00	; 0
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	91 f4       	brne	.+36     	; 0x28c0 <Keypad_GetPressedKey+0x94>
					#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
					#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((Local_Row*N_COL)+Local_Col+1));
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	98 2f       	mov	r25, r24
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	89 0f       	add	r24, r25
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	0e 94 6e 14 	call	0x28dc	; 0x28dc <Keypad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret
			//DIO_VoidSetPortDir(KEYPAD_PORT,(0b00010000 << Local_Col));
			KEYPAD_PORT_DIR = (0b00010000 << Local_Col);
			//DIO_VoidSetPortValue(KEYPAD_PORT,(~(0b00010000<< Local_Col)));
			KEYPAD_PORT_OUT = (~(0b00010000<< Local_Col));

			for (Local_Row = 0; Local_Row < N_ROW; Local_Row++)
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	8a 83       	std	Y+2, r24	; 0x02
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	84 30       	cpi	r24, 0x04	; 4
    28ca:	a8 f2       	brcs	.-86     	; 0x2876 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey(void)
{
	u8 Local_Row, Local_Col;
	while(1)
	{
		for (Local_Col = 0; Local_Col < N_COL; Local_Col++)
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	8f 5f       	subi	r24, 0xFF	; 255
    28d0:	89 83       	std	Y+1, r24	; 0x01
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	84 30       	cpi	r24, 0x04	; 4
    28d6:	08 f4       	brcc	.+2      	; 0x28da <Keypad_GetPressedKey+0xae>
    28d8:	b0 cf       	rjmp	.-160    	; 0x283a <Keypad_GetPressedKey+0xe>
    28da:	ad cf       	rjmp	.-166    	; 0x2836 <Keypad_GetPressedKey+0xa>

000028dc <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <Keypad_4x4_adjustKeyNumber+0x6>
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <Keypad_4x4_adjustKeyNumber+0x8>
    28e4:	0f 92       	push	r0
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	3c 83       	std	Y+4, r19	; 0x04
    28f4:	2b 83       	std	Y+3, r18	; 0x03
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	88 30       	cpi	r24, 0x08	; 8
    28fc:	91 05       	cpc	r25, r1
    28fe:	09 f4       	brne	.+2      	; 0x2902 <Keypad_4x4_adjustKeyNumber+0x26>
    2900:	70 c0       	rjmp	.+224    	; 0x29e2 <Keypad_4x4_adjustKeyNumber+0x106>
    2902:	2b 81       	ldd	r18, Y+3	; 0x03
    2904:	3c 81       	ldd	r19, Y+4	; 0x04
    2906:	29 30       	cpi	r18, 0x09	; 9
    2908:	31 05       	cpc	r19, r1
    290a:	5c f5       	brge	.+86     	; 0x2962 <Keypad_4x4_adjustKeyNumber+0x86>
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	84 30       	cpi	r24, 0x04	; 4
    2912:	91 05       	cpc	r25, r1
    2914:	09 f4       	brne	.+2      	; 0x2918 <Keypad_4x4_adjustKeyNumber+0x3c>
    2916:	59 c0       	rjmp	.+178    	; 0x29ca <Keypad_4x4_adjustKeyNumber+0xee>
    2918:	2b 81       	ldd	r18, Y+3	; 0x03
    291a:	3c 81       	ldd	r19, Y+4	; 0x04
    291c:	25 30       	cpi	r18, 0x05	; 5
    291e:	31 05       	cpc	r19, r1
    2920:	9c f4       	brge	.+38     	; 0x2948 <Keypad_4x4_adjustKeyNumber+0x6c>
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	82 30       	cpi	r24, 0x02	; 2
    2928:	91 05       	cpc	r25, r1
    292a:	09 f4       	brne	.+2      	; 0x292e <Keypad_4x4_adjustKeyNumber+0x52>
    292c:	48 c0       	rjmp	.+144    	; 0x29be <Keypad_4x4_adjustKeyNumber+0xe2>
    292e:	2b 81       	ldd	r18, Y+3	; 0x03
    2930:	3c 81       	ldd	r19, Y+4	; 0x04
    2932:	23 30       	cpi	r18, 0x03	; 3
    2934:	31 05       	cpc	r19, r1
    2936:	0c f0       	brlt	.+2      	; 0x293a <Keypad_4x4_adjustKeyNumber+0x5e>
    2938:	45 c0       	rjmp	.+138    	; 0x29c4 <Keypad_4x4_adjustKeyNumber+0xe8>
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	91 05       	cpc	r25, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <Keypad_4x4_adjustKeyNumber+0x6a>
    2944:	39 c0       	rjmp	.+114    	; 0x29b8 <Keypad_4x4_adjustKeyNumber+0xdc>
    2946:	67 c0       	rjmp	.+206    	; 0x2a16 <Keypad_4x4_adjustKeyNumber+0x13a>
    2948:	2b 81       	ldd	r18, Y+3	; 0x03
    294a:	3c 81       	ldd	r19, Y+4	; 0x04
    294c:	26 30       	cpi	r18, 0x06	; 6
    294e:	31 05       	cpc	r19, r1
    2950:	09 f4       	brne	.+2      	; 0x2954 <Keypad_4x4_adjustKeyNumber+0x78>
    2952:	41 c0       	rjmp	.+130    	; 0x29d6 <Keypad_4x4_adjustKeyNumber+0xfa>
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	87 30       	cpi	r24, 0x07	; 7
    295a:	91 05       	cpc	r25, r1
    295c:	0c f0       	brlt	.+2      	; 0x2960 <Keypad_4x4_adjustKeyNumber+0x84>
    295e:	3e c0       	rjmp	.+124    	; 0x29dc <Keypad_4x4_adjustKeyNumber+0x100>
    2960:	37 c0       	rjmp	.+110    	; 0x29d0 <Keypad_4x4_adjustKeyNumber+0xf4>
    2962:	2b 81       	ldd	r18, Y+3	; 0x03
    2964:	3c 81       	ldd	r19, Y+4	; 0x04
    2966:	2c 30       	cpi	r18, 0x0C	; 12
    2968:	31 05       	cpc	r19, r1
    296a:	09 f4       	brne	.+2      	; 0x296e <Keypad_4x4_adjustKeyNumber+0x92>
    296c:	46 c0       	rjmp	.+140    	; 0x29fa <Keypad_4x4_adjustKeyNumber+0x11e>
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	8d 30       	cpi	r24, 0x0D	; 13
    2974:	91 05       	cpc	r25, r1
    2976:	5c f4       	brge	.+22     	; 0x298e <Keypad_4x4_adjustKeyNumber+0xb2>
    2978:	2b 81       	ldd	r18, Y+3	; 0x03
    297a:	3c 81       	ldd	r19, Y+4	; 0x04
    297c:	2a 30       	cpi	r18, 0x0A	; 10
    297e:	31 05       	cpc	r19, r1
    2980:	b1 f1       	breq	.+108    	; 0x29ee <Keypad_4x4_adjustKeyNumber+0x112>
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	9c 81       	ldd	r25, Y+4	; 0x04
    2986:	8b 30       	cpi	r24, 0x0B	; 11
    2988:	91 05       	cpc	r25, r1
    298a:	a4 f5       	brge	.+104    	; 0x29f4 <Keypad_4x4_adjustKeyNumber+0x118>
    298c:	2d c0       	rjmp	.+90     	; 0x29e8 <Keypad_4x4_adjustKeyNumber+0x10c>
    298e:	2b 81       	ldd	r18, Y+3	; 0x03
    2990:	3c 81       	ldd	r19, Y+4	; 0x04
    2992:	2e 30       	cpi	r18, 0x0E	; 14
    2994:	31 05       	cpc	r19, r1
    2996:	b9 f1       	breq	.+110    	; 0x2a06 <Keypad_4x4_adjustKeyNumber+0x12a>
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	8e 30       	cpi	r24, 0x0E	; 14
    299e:	91 05       	cpc	r25, r1
    29a0:	7c f1       	brlt	.+94     	; 0x2a00 <Keypad_4x4_adjustKeyNumber+0x124>
    29a2:	2b 81       	ldd	r18, Y+3	; 0x03
    29a4:	3c 81       	ldd	r19, Y+4	; 0x04
    29a6:	2f 30       	cpi	r18, 0x0F	; 15
    29a8:	31 05       	cpc	r19, r1
    29aa:	79 f1       	breq	.+94     	; 0x2a0a <Keypad_4x4_adjustKeyNumber+0x12e>
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	80 31       	cpi	r24, 0x10	; 16
    29b2:	91 05       	cpc	r25, r1
    29b4:	69 f1       	breq	.+90     	; 0x2a10 <Keypad_4x4_adjustKeyNumber+0x134>
    29b6:	2f c0       	rjmp	.+94     	; 0x2a16 <Keypad_4x4_adjustKeyNumber+0x13a>
	{
				//7
	case 1:		return 'T';
    29b8:	94 e5       	ldi	r25, 0x54	; 84
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	2d c0       	rjmp	.+90     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 2:		return 8;
    29be:	28 e0       	ldi	r18, 0x08	; 8
    29c0:	2a 83       	std	Y+2, r18	; 0x02
    29c2:	2a c0       	rjmp	.+84     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 3:		return 9;
    29c4:	39 e0       	ldi	r19, 0x09	; 9
    29c6:	3a 83       	std	Y+2, r19	; 0x02
    29c8:	27 c0       	rjmp	.+78     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 4:		return '/';
    29ca:	8f e2       	ldi	r24, 0x2F	; 47
    29cc:	8a 83       	std	Y+2, r24	; 0x02
    29ce:	24 c0       	rjmp	.+72     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
				//4
	case 5:		return 'L';
    29d0:	9c e4       	ldi	r25, 0x4C	; 76
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	21 c0       	rjmp	.+66     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
				//5
	case 6:		return 'O';
    29d6:	2f e4       	ldi	r18, 0x4F	; 79
    29d8:	2a 83       	std	Y+2, r18	; 0x02
    29da:	1e c0       	rjmp	.+60     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
				//6
	case 7:		return 'F';
    29dc:	36 e4       	ldi	r19, 0x46	; 70
    29de:	3a 83       	std	Y+2, r19	; 0x02
    29e0:	1b c0       	rjmp	.+54     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 8:		return '*';
    29e2:	8a e2       	ldi	r24, 0x2A	; 42
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	18 c0       	rjmp	.+48     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 9:		return 'A';
    29e8:	91 e4       	ldi	r25, 0x41	; 65
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	15 c0       	rjmp	.+42     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 10:	return 'B';
    29ee:	22 e4       	ldi	r18, 0x42	; 66
    29f0:	2a 83       	std	Y+2, r18	; 0x02
    29f2:	12 c0       	rjmp	.+36     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 11:	return 'C';
    29f4:	33 e4       	ldi	r19, 0x43	; 67
    29f6:	3a 83       	std	Y+2, r19	; 0x02
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 12:	return '-';
    29fa:	8d e2       	ldi	r24, 0x2D	; 45
    29fc:	8a 83       	std	Y+2, r24	; 0x02
    29fe:	0c c0       	rjmp	.+24     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 13:	return 'c';
    2a00:	93 e6       	ldi	r25, 0x63	; 99
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	09 c0       	rjmp	.+18     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 14:	return 0;
    2a06:	1a 82       	std	Y+2, r1	; 0x02
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 15:	return '=';
    2a0a:	2d e3       	ldi	r18, 0x3D	; 61
    2a0c:	2a 83       	std	Y+2, r18	; 0x02
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 16:	return '+';
    2a10:	3b e2       	ldi	r19, 0x2B	; 43
    2a12:	3a 83       	std	Y+2, r19	; 0x02
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <Keypad_4x4_adjustKeyNumber+0x13c>
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <Keypad_4x4_adjustKeyNumber+0x140>
				break;
	}
}
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <main>:
#include "../HAL/LCD/Header/LCD_interface.h"
#include "../HAL/KPD/Header/KPD_Interface.h"

#include <util/delay.h>
void main (void)
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	c0 54       	subi	r28, 0x40	; 64
    2a38:	d0 40       	sbci	r29, 0x00	; 0
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
	LCD_Void8BitInit();
    2a44:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_Void8BitInit>

	u8 Key_Value;
	DIO_VoidSetPinDir(Group_B,Pin_B0,Output);
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	41 e0       	ldi	r20, 0x01	; 1
    2a4e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <DIO_VoidSetPinDir>
	DIO_VoidSetPinValue(Group_B,Pin_B0,Low);
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>

	DIO_VoidSetPinDir(Group_D,Pin_D1,Output);
    2a5c:	84 e0       	ldi	r24, 0x04	; 4
    2a5e:	61 e0       	ldi	r22, 0x01	; 1
    2a60:	41 e0       	ldi	r20, 0x01	; 1
    2a62:	0e 94 61 08 	call	0x10c2	; 0x10c2 <DIO_VoidSetPinDir>
	DIO_VoidSetPinValue(Group_D,Pin_D1,Low);
    2a66:	84 e0       	ldi	r24, 0x04	; 4
    2a68:	61 e0       	ldi	r22, 0x01	; 1
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>

	DIO_VoidSetPinDir(Group_D, Pin_D0, Input);
    2a70:	84 e0       	ldi	r24, 0x04	; 4
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	40 e0       	ldi	r20, 0x00	; 0
    2a76:	0e 94 61 08 	call	0x10c2	; 0x10c2 <DIO_VoidSetPinDir>
	DIO_VoidSetPinValue(Group_D,Pin_D0,High);
    2a7a:	84 e0       	ldi	r24, 0x04	; 4
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>


	UART_tstrConfiguration object;
	object.UART_u16BaudRate = UART_u16_BAUD_RATE_9600;
    2a84:	87 e6       	ldi	r24, 0x67	; 103
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	fe 01       	movw	r30, r28
    2a8a:	ff 96       	adiw	r30, 0x3f	; 63
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
	object.UART_u8DataBits = UART_u8_EIGHT_DATA_BITS;
    2a90:	86 e0       	ldi	r24, 0x06	; 6
    2a92:	8d af       	std	Y+61, r24	; 0x3d
	object.UART_u8Mode = UART_u8_Transmite;
    2a94:	88 e0       	ldi	r24, 0x08	; 8
    2a96:	8e af       	std	Y+62, r24	; 0x3e
	object.UART_u8PStopBit = UART_u8_ONE_STOP_BIT;
    2a98:	1c ae       	std	Y+60, r1	; 0x3c
	object.UART_u8ParityBits = UART_u8_DISABLED_PARITY;
    2a9a:	1b ae       	std	Y+59, r1	; 0x3b

	while(1)
	{
		Key_Value = Keypad_GetPressedKey();
    2a9c:	0e 94 16 14 	call	0x282c	; 0x282c <Keypad_GetPressedKey>
    2aa0:	8a af       	std	Y+58, r24	; 0x3a
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	aa e7       	ldi	r26, 0x7A	; 122
    2aa8:	b3 e4       	ldi	r27, 0x43	; 67
    2aaa:	8d ab       	std	Y+53, r24	; 0x35
    2aac:	9e ab       	std	Y+54, r25	; 0x36
    2aae:	af ab       	std	Y+55, r26	; 0x37
    2ab0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab8:	98 ad       	ldd	r25, Y+56	; 0x38
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4a ef       	ldi	r20, 0xFA	; 250
    2ac0:	54 e4       	ldi	r21, 0x44	; 68
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	89 ab       	std	Y+49, r24	; 0x31
    2acc:	9a ab       	std	Y+50, r25	; 0x32
    2ace:	ab ab       	std	Y+51, r26	; 0x33
    2ad0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e8       	ldi	r20, 0x80	; 128
    2ae0:	5f e3       	ldi	r21, 0x3F	; 63
    2ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae6:	88 23       	and	r24, r24
    2ae8:	2c f4       	brge	.+10     	; 0x2af4 <main+0xc6>
		__ticks = 1;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	98 ab       	std	Y+48, r25	; 0x30
    2af0:	8f a7       	std	Y+47, r24	; 0x2f
    2af2:	3f c0       	rjmp	.+126    	; 0x2b72 <main+0x144>
	else if (__tmp > 65535)
    2af4:	69 a9       	ldd	r22, Y+49	; 0x31
    2af6:	7a a9       	ldd	r23, Y+50	; 0x32
    2af8:	8b a9       	ldd	r24, Y+51	; 0x33
    2afa:	9c a9       	ldd	r25, Y+52	; 0x34
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	3f ef       	ldi	r19, 0xFF	; 255
    2b00:	4f e7       	ldi	r20, 0x7F	; 127
    2b02:	57 e4       	ldi	r21, 0x47	; 71
    2b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b08:	18 16       	cp	r1, r24
    2b0a:	4c f5       	brge	.+82     	; 0x2b5e <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b10:	8f a9       	ldd	r24, Y+55	; 0x37
    2b12:	98 ad       	ldd	r25, Y+56	; 0x38
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e2       	ldi	r20, 0x20	; 32
    2b1a:	51 e4       	ldi	r21, 0x41	; 65
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	98 ab       	std	Y+48, r25	; 0x30
    2b32:	8f a7       	std	Y+47, r24	; 0x2f
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <main+0x126>
    2b36:	88 ec       	ldi	r24, 0xC8	; 200
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9e a7       	std	Y+46, r25	; 0x2e
    2b3c:	8d a7       	std	Y+45, r24	; 0x2d
    2b3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b40:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <main+0x114>
    2b46:	9e a7       	std	Y+46, r25	; 0x2e
    2b48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	98 ab       	std	Y+48, r25	; 0x30
    2b52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b56:	98 a9       	ldd	r25, Y+48	; 0x30
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <main+0x108>
    2b5c:	14 c0       	rjmp	.+40     	; 0x2b86 <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b60:	7a a9       	ldd	r23, Y+50	; 0x32
    2b62:	8b a9       	ldd	r24, Y+51	; 0x33
    2b64:	9c a9       	ldd	r25, Y+52	; 0x34
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	98 ab       	std	Y+48, r25	; 0x30
    2b70:	8f a7       	std	Y+47, r24	; 0x2f
    2b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b74:	98 a9       	ldd	r25, Y+48	; 0x30
    2b76:	9c a7       	std	Y+44, r25	; 0x2c
    2b78:	8b a7       	std	Y+43, r24	; 0x2b
    2b7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <main+0x150>
    2b82:	9c a7       	std	Y+44, r25	; 0x2c
    2b84:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250);

		UART_enuInit(&object);
    2b86:	ce 01       	movw	r24, r28
    2b88:	cb 96       	adiw	r24, 0x3b	; 59
    2b8a:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_enuInit>
		UART_tenuErrorStatus error_status = UART_enuTransmite(Key_Value);
    2b8e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 8c 06 	call	0xd18	; 0xd18 <UART_enuTransmite>
    2b98:	89 af       	std	Y+57, r24	; 0x39
		if (error_status == UART_OK)
    2b9a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b9c:	88 23       	and	r24, r24
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <main+0x174>
    2ba0:	7d c0       	rjmp	.+250    	; 0x2c9c <main+0x26e>
		{
			DIO_VoidSetPinValue(Group_B, Pin_B0, High);
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	60 e0       	ldi	r22, 0x00	; 0
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	aa e7       	ldi	r26, 0x7A	; 122
    2bb2:	b4 e4       	ldi	r27, 0x44	; 68
    2bb4:	8f a3       	std	Y+39, r24	; 0x27
    2bb6:	98 a7       	std	Y+40, r25	; 0x28
    2bb8:	a9 a7       	std	Y+41, r26	; 0x29
    2bba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2bbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a ef       	ldi	r20, 0xFA	; 250
    2bca:	54 e4       	ldi	r21, 0x44	; 68
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8b a3       	std	Y+35, r24	; 0x23
    2bd6:	9c a3       	std	Y+36, r25	; 0x24
    2bd8:	ad a3       	std	Y+37, r26	; 0x25
    2bda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bde:	7c a1       	ldd	r23, Y+36	; 0x24
    2be0:	8d a1       	ldd	r24, Y+37	; 0x25
    2be2:	9e a1       	ldd	r25, Y+38	; 0x26
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <main+0x1d0>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9a a3       	std	Y+34, r25	; 0x22
    2bfa:	89 a3       	std	Y+33, r24	; 0x21
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <main+0x24e>
	else if (__tmp > 65535)
    2bfe:	6b a1       	ldd	r22, Y+35	; 0x23
    2c00:	7c a1       	ldd	r23, Y+36	; 0x24
    2c02:	8d a1       	ldd	r24, Y+37	; 0x25
    2c04:	9e a1       	ldd	r25, Y+38	; 0x26
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <main+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6f a1       	ldd	r22, Y+39	; 0x27
    2c18:	78 a5       	ldd	r23, Y+40	; 0x28
    2c1a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9a a3       	std	Y+34, r25	; 0x22
    2c3c:	89 a3       	std	Y+33, r24	; 0x21
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <main+0x230>
    2c40:	88 ec       	ldi	r24, 0xC8	; 200
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	98 a3       	std	Y+32, r25	; 0x20
    2c46:	8f 8f       	std	Y+31, r24	; 0x1f
    2c48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c4a:	98 a1       	ldd	r25, Y+32	; 0x20
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <main+0x21e>
    2c50:	98 a3       	std	Y+32, r25	; 0x20
    2c52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	89 a1       	ldd	r24, Y+33	; 0x21
    2c56:	9a a1       	ldd	r25, Y+34	; 0x22
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9a a3       	std	Y+34, r25	; 0x22
    2c5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c60:	9a a1       	ldd	r25, Y+34	; 0x22
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <main+0x212>
    2c66:	14 c0       	rjmp	.+40     	; 0x2c90 <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9a a3       	std	Y+34, r25	; 0x22
    2c7a:	89 a3       	std	Y+33, r24	; 0x21
    2c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c80:	9e 8f       	std	Y+30, r25	; 0x1e
    2c82:	8d 8f       	std	Y+29, r24	; 0x1d
    2c84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <main+0x25a>
    2c8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			DIO_VoidSetPinValue(Group_B, Pin_B0, Low);
    2c90:	82 e0       	ldi	r24, 0x02	; 2
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
    2c9a:	05 c0       	rjmp	.+10     	; 0x2ca6 <main+0x278>
		}
		else
		{
			DIO_VoidSetPinValue(Group_B, Pin_B0, Low);
    2c9c:	82 e0       	ldi	r24, 0x02	; 2
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_VoidSetPinValue>
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_VoidSendCommand>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a0 e0       	ldi	r26, 0x00	; 0
    2cb2:	b0 e4       	ldi	r27, 0x40	; 64
    2cb4:	89 8f       	std	Y+25, r24	; 0x19
    2cb6:	9a 8f       	std	Y+26, r25	; 0x1a
    2cb8:	ab 8f       	std	Y+27, r26	; 0x1b
    2cba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4a ef       	ldi	r20, 0xFA	; 250
    2cca:	54 e4       	ldi	r21, 0x44	; 68
    2ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	8d 8b       	std	Y+21, r24	; 0x15
    2cd6:	9e 8b       	std	Y+22, r25	; 0x16
    2cd8:	af 8b       	std	Y+23, r26	; 0x17
    2cda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cde:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e8       	ldi	r20, 0x80	; 128
    2cea:	5f e3       	ldi	r21, 0x3F	; 63
    2cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf0:	88 23       	and	r24, r24
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <main+0x2d0>
		__ticks = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9c 8b       	std	Y+20, r25	; 0x14
    2cfa:	8b 8b       	std	Y+19, r24	; 0x13
    2cfc:	3f c0       	rjmp	.+126    	; 0x2d7c <main+0x34e>
	else if (__tmp > 65535)
    2cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2d00:	7e 89       	ldd	r23, Y+22	; 0x16
    2d02:	8f 89       	ldd	r24, Y+23	; 0x17
    2d04:	98 8d       	ldd	r25, Y+24	; 0x18
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	3f ef       	ldi	r19, 0xFF	; 255
    2d0a:	4f e7       	ldi	r20, 0x7F	; 127
    2d0c:	57 e4       	ldi	r21, 0x47	; 71
    2d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d12:	18 16       	cp	r1, r24
    2d14:	4c f5       	brge	.+82     	; 0x2d68 <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d16:	69 8d       	ldd	r22, Y+25	; 0x19
    2d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9c 8b       	std	Y+20, r25	; 0x14
    2d3c:	8b 8b       	std	Y+19, r24	; 0x13
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <main+0x330>
    2d40:	88 ec       	ldi	r24, 0xC8	; 200
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9a 8b       	std	Y+18, r25	; 0x12
    2d46:	89 8b       	std	Y+17, r24	; 0x11
    2d48:	89 89       	ldd	r24, Y+17	; 0x11
    2d4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <main+0x31e>
    2d50:	9a 8b       	std	Y+18, r25	; 0x12
    2d52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d54:	8b 89       	ldd	r24, Y+19	; 0x13
    2d56:	9c 89       	ldd	r25, Y+20	; 0x14
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	9c 8b       	std	Y+20, r25	; 0x14
    2d5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d60:	9c 89       	ldd	r25, Y+20	; 0x14
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	69 f7       	brne	.-38     	; 0x2d40 <main+0x312>
    2d66:	14 c0       	rjmp	.+40     	; 0x2d90 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	6d 89       	ldd	r22, Y+21	; 0x15
    2d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
    2d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d80:	98 8b       	std	Y+16, r25	; 0x10
    2d82:	8f 87       	std	Y+15, r24	; 0x0f
    2d84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d86:	98 89       	ldd	r25, Y+16	; 0x10
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <main+0x35a>
    2d8c:	98 8b       	std	Y+16, r25	; 0x10
    2d8e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		LCD_VoidSendChar(Key_Value);
    2d90:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d92:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_VoidSendChar>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	aa ef       	ldi	r26, 0xFA	; 250
    2d9c:	b3 e4       	ldi	r27, 0x43	; 67
    2d9e:	8b 87       	std	Y+11, r24	; 0x0b
    2da0:	9c 87       	std	Y+12, r25	; 0x0c
    2da2:	ad 87       	std	Y+13, r26	; 0x0d
    2da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a ef       	ldi	r20, 0xFA	; 250
    2db4:	54 e4       	ldi	r21, 0x44	; 68
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8f 83       	std	Y+7, r24	; 0x07
    2dc0:	98 87       	std	Y+8, r25	; 0x08
    2dc2:	a9 87       	std	Y+9, r26	; 0x09
    2dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <main+0x3ba>
		__ticks = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	8d 83       	std	Y+5, r24	; 0x05
    2de6:	3f c0       	rjmp	.+126    	; 0x2e66 <main+0x438>
	else if (__tmp > 65535)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	4c f5       	brge	.+82     	; 0x2e52 <main+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <main+0x41a>
    2e2a:	88 ec       	ldi	r24, 0xC8	; 200
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	9c 83       	std	Y+4, r25	; 0x04
    2e30:	8b 83       	std	Y+3, r24	; 0x03
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	9c 81       	ldd	r25, Y+4	; 0x04
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <main+0x408>
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e40:	9e 81       	ldd	r25, Y+6	; 0x06
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <main+0x3fc>
    2e50:	25 ce       	rjmp	.-950    	; 0x2a9c <main+0x6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	6f 81       	ldd	r22, Y+7	; 0x07
    2e54:	78 85       	ldd	r23, Y+8	; 0x08
    2e56:	89 85       	ldd	r24, Y+9	; 0x09
    2e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9e 83       	std	Y+6, r25	; 0x06
    2e64:	8d 83       	std	Y+5, r24	; 0x05
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <main+0x444>
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	10 ce       	rjmp	.-992    	; 0x2a9c <main+0x6e>

00002e7c <__mulsi3>:
    2e7c:	62 9f       	mul	r22, r18
    2e7e:	d0 01       	movw	r26, r0
    2e80:	73 9f       	mul	r23, r19
    2e82:	f0 01       	movw	r30, r0
    2e84:	82 9f       	mul	r24, r18
    2e86:	e0 0d       	add	r30, r0
    2e88:	f1 1d       	adc	r31, r1
    2e8a:	64 9f       	mul	r22, r20
    2e8c:	e0 0d       	add	r30, r0
    2e8e:	f1 1d       	adc	r31, r1
    2e90:	92 9f       	mul	r25, r18
    2e92:	f0 0d       	add	r31, r0
    2e94:	83 9f       	mul	r24, r19
    2e96:	f0 0d       	add	r31, r0
    2e98:	74 9f       	mul	r23, r20
    2e9a:	f0 0d       	add	r31, r0
    2e9c:	65 9f       	mul	r22, r21
    2e9e:	f0 0d       	add	r31, r0
    2ea0:	99 27       	eor	r25, r25
    2ea2:	72 9f       	mul	r23, r18
    2ea4:	b0 0d       	add	r27, r0
    2ea6:	e1 1d       	adc	r30, r1
    2ea8:	f9 1f       	adc	r31, r25
    2eaa:	63 9f       	mul	r22, r19
    2eac:	b0 0d       	add	r27, r0
    2eae:	e1 1d       	adc	r30, r1
    2eb0:	f9 1f       	adc	r31, r25
    2eb2:	bd 01       	movw	r22, r26
    2eb4:	cf 01       	movw	r24, r30
    2eb6:	11 24       	eor	r1, r1
    2eb8:	08 95       	ret

00002eba <__udivmodsi4>:
    2eba:	a1 e2       	ldi	r26, 0x21	; 33
    2ebc:	1a 2e       	mov	r1, r26
    2ebe:	aa 1b       	sub	r26, r26
    2ec0:	bb 1b       	sub	r27, r27
    2ec2:	fd 01       	movw	r30, r26
    2ec4:	0d c0       	rjmp	.+26     	; 0x2ee0 <__udivmodsi4_ep>

00002ec6 <__udivmodsi4_loop>:
    2ec6:	aa 1f       	adc	r26, r26
    2ec8:	bb 1f       	adc	r27, r27
    2eca:	ee 1f       	adc	r30, r30
    2ecc:	ff 1f       	adc	r31, r31
    2ece:	a2 17       	cp	r26, r18
    2ed0:	b3 07       	cpc	r27, r19
    2ed2:	e4 07       	cpc	r30, r20
    2ed4:	f5 07       	cpc	r31, r21
    2ed6:	20 f0       	brcs	.+8      	; 0x2ee0 <__udivmodsi4_ep>
    2ed8:	a2 1b       	sub	r26, r18
    2eda:	b3 0b       	sbc	r27, r19
    2edc:	e4 0b       	sbc	r30, r20
    2ede:	f5 0b       	sbc	r31, r21

00002ee0 <__udivmodsi4_ep>:
    2ee0:	66 1f       	adc	r22, r22
    2ee2:	77 1f       	adc	r23, r23
    2ee4:	88 1f       	adc	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	1a 94       	dec	r1
    2eea:	69 f7       	brne	.-38     	; 0x2ec6 <__udivmodsi4_loop>
    2eec:	60 95       	com	r22
    2eee:	70 95       	com	r23
    2ef0:	80 95       	com	r24
    2ef2:	90 95       	com	r25
    2ef4:	9b 01       	movw	r18, r22
    2ef6:	ac 01       	movw	r20, r24
    2ef8:	bd 01       	movw	r22, r26
    2efa:	cf 01       	movw	r24, r30
    2efc:	08 95       	ret

00002efe <__prologue_saves__>:
    2efe:	2f 92       	push	r2
    2f00:	3f 92       	push	r3
    2f02:	4f 92       	push	r4
    2f04:	5f 92       	push	r5
    2f06:	6f 92       	push	r6
    2f08:	7f 92       	push	r7
    2f0a:	8f 92       	push	r8
    2f0c:	9f 92       	push	r9
    2f0e:	af 92       	push	r10
    2f10:	bf 92       	push	r11
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	ca 1b       	sub	r28, r26
    2f28:	db 0b       	sbc	r29, r27
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	09 94       	ijmp

00002f36 <__epilogue_restores__>:
    2f36:	2a 88       	ldd	r2, Y+18	; 0x12
    2f38:	39 88       	ldd	r3, Y+17	; 0x11
    2f3a:	48 88       	ldd	r4, Y+16	; 0x10
    2f3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f40:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f42:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f44:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f46:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f48:	b9 84       	ldd	r11, Y+9	; 0x09
    2f4a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f4c:	df 80       	ldd	r13, Y+7	; 0x07
    2f4e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f50:	fd 80       	ldd	r15, Y+5	; 0x05
    2f52:	0c 81       	ldd	r16, Y+4	; 0x04
    2f54:	1b 81       	ldd	r17, Y+3	; 0x03
    2f56:	aa 81       	ldd	r26, Y+2	; 0x02
    2f58:	b9 81       	ldd	r27, Y+1	; 0x01
    2f5a:	ce 0f       	add	r28, r30
    2f5c:	d1 1d       	adc	r29, r1
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	ed 01       	movw	r28, r26
    2f6a:	08 95       	ret

00002f6c <_exit>:
    2f6c:	f8 94       	cli

00002f6e <__stop_program>:
    2f6e:	ff cf       	rjmp	.-2      	; 0x2f6e <__stop_program>
