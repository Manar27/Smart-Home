
UART_ManarSend.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002fa4  00003038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  00003040  2**0
                  ALLOC
  3 .stab         00002da8  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012a5  00000000  00000000  00005de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000071cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000733d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_10>
      2c:	0c 94 05 08 	jmp	0x100a	; 0x100a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ea       	ldi	r30, 0xA4	; 164
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 31 15 	call	0x2a62	; 0x2a62 <main>
      8a:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_enuInit>:


static void (*GPTF_RX) (void) = NULL;

UART_tenuErrorStatus UART_enuInit (UART_tstrConfiguration* Add_pstrConfigue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_enuInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     b56:	19 82       	std	Y+1, r1	; 0x01
	if(Add_pstrConfigue== NULL)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	19 f4       	brne	.+6      	; 0xb66 <UART_enuInit+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	5a c0       	rjmp	.+180    	; 0xc1a <UART_enuInit+0xd4>
	}
	else
	{
		/*Enable UCSRC -> URSEL = 1*/
		Set_Bit(UART_UCSRC, UART_URSEL);
     b66:	a0 e4       	ldi	r26, 0x40	; 64
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	8c 93       	st	X, r24
		/*Set Parity bits*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8ParityBits;
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	90 81       	ld	r25, Z
     b7e:	ea 81       	ldd	r30, Y+2	; 0x02
     b80:	fb 81       	ldd	r31, Y+3	; 0x03
     b82:	80 81       	ld	r24, Z
     b84:	89 2b       	or	r24, r25
     b86:	8c 93       	st	X, r24
		/*Set Stop bit*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8PStopBit;
     b88:	a0 e4       	ldi	r26, 0x40	; 64
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	90 81       	ld	r25, Z
     b92:	ea 81       	ldd	r30, Y+2	; 0x02
     b94:	fb 81       	ldd	r31, Y+3	; 0x03
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	89 2b       	or	r24, r25
     b9a:	8c 93       	st	X, r24
		/*Check 9 bit*/
		if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     b9c:	ea 81       	ldd	r30, Y+2	; 0x02
     b9e:	fb 81       	ldd	r31, Y+3	; 0x03
     ba0:	82 81       	ldd	r24, Z+2	; 0x02
     ba2:	86 30       	cpi	r24, 0x06	; 6
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <UART_enuInit+0x6e>
		{
			UART_UCSRC |= 0x04;
     ba6:	a0 e4       	ldi	r26, 0x40	; 64
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e0 e4       	ldi	r30, 0x40	; 64
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	8c 93       	st	X, r24
		}
		/*Set Character Size*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8DataBits;
     bb4:	a0 e4       	ldi	r26, 0x40	; 64
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 e4       	ldi	r30, 0x40	; 64
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	90 81       	ld	r25, Z
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	89 2b       	or	r24, r25
     bc6:	8c 93       	st	X, r24
		/*Choose Transmit or Receive*/
		UART_UCSRB |= Add_pstrConfigue->UART_u8Mode;
     bc8:	aa e2       	ldi	r26, 0x2A	; 42
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea e2       	ldi	r30, 0x2A	; 42
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	90 81       	ld	r25, Z
     bd2:	ea 81       	ldd	r30, Y+2	; 0x02
     bd4:	fb 81       	ldd	r31, Y+3	; 0x03
     bd6:	83 81       	ldd	r24, Z+3	; 0x03
     bd8:	89 2b       	or	r24, r25
     bda:	8c 93       	st	X, r24
		/*Enable UBRRH -> URSEL = 0*/
		clear_Bit(UART_UCSRC, UART_URSEL);
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	8c 93       	st	X, r24
		/*Set Baud Rate*/
		UART_UBRRL |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     bea:	a9 e2       	ldi	r26, 0x29	; 41
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	20 81       	ld	r18, Z
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	84 81       	ldd	r24, Z+4	; 0x04
     bfa:	95 81       	ldd	r25, Z+5	; 0x05
     bfc:	82 2b       	or	r24, r18
     bfe:	8c 93       	st	X, r24
		UART_UBRRH |= (u8)((Add_pstrConfigue->UART_u16BaudRate) >> 8);
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	20 81       	ld	r18, Z
     c0a:	ea 81       	ldd	r30, Y+2	; 0x02
     c0c:	fb 81       	ldd	r31, Y+3	; 0x03
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	95 81       	ldd	r25, Z+5	; 0x05
     c12:	89 2f       	mov	r24, r25
     c14:	99 27       	eor	r25, r25
     c16:	82 2b       	or	r24, r18
     c18:	8c 93       	st	X, r24

	}
	return Local_enuErrorStatus;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <UART_enuInitRXInterrupt>:
UART_tenuErrorStatus UART_enuInitRXInterrupt (UART_tstrConfiguration* Add_pstrConfigue)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <UART_enuInitRXInterrupt+0x6>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     c38:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pstrConfigue== NULL)
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	19 f4       	brne	.+6      	; 0xc48 <UART_enuInitRXInterrupt+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	61 c0       	rjmp	.+194    	; 0xd0a <UART_enuInitRXInterrupt+0xe2>
	}
	else
	{
		/*Enable UCSRC -> URSEL = 1*/
		Set_Bit(UART_UCSRC, UART_URSEL);
     c48:	a0 e4       	ldi	r26, 0x40	; 64
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	8c 93       	st	X, r24
		/*Set Parity bits*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8ParityBits;
     c56:	a0 e4       	ldi	r26, 0x40	; 64
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e0 e4       	ldi	r30, 0x40	; 64
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	90 81       	ld	r25, Z
     c60:	ea 81       	ldd	r30, Y+2	; 0x02
     c62:	fb 81       	ldd	r31, Y+3	; 0x03
     c64:	80 81       	ld	r24, Z
     c66:	89 2b       	or	r24, r25
     c68:	8c 93       	st	X, r24
		/*Set Stop bit*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8PStopBit;
     c6a:	a0 e4       	ldi	r26, 0x40	; 64
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	90 81       	ld	r25, Z
     c74:	ea 81       	ldd	r30, Y+2	; 0x02
     c76:	fb 81       	ldd	r31, Y+3	; 0x03
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	89 2b       	or	r24, r25
     c7c:	8c 93       	st	X, r24
		/*Check 9 bit*/
		if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     c7e:	ea 81       	ldd	r30, Y+2	; 0x02
     c80:	fb 81       	ldd	r31, Y+3	; 0x03
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	86 30       	cpi	r24, 0x06	; 6
     c86:	39 f4       	brne	.+14     	; 0xc96 <UART_enuInitRXInterrupt+0x6e>
		{
			UART_UCSRC |= 0x04;
     c88:	a0 e4       	ldi	r26, 0x40	; 64
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e0 e4       	ldi	r30, 0x40	; 64
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	8c 93       	st	X, r24
		}
		/*Set Character Size*/
		UART_UCSRC |= Add_pstrConfigue->UART_u8DataBits;
     c96:	a0 e4       	ldi	r26, 0x40	; 64
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e0 e4       	ldi	r30, 0x40	; 64
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	90 81       	ld	r25, Z
     ca0:	ea 81       	ldd	r30, Y+2	; 0x02
     ca2:	fb 81       	ldd	r31, Y+3	; 0x03
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	89 2b       	or	r24, r25
     ca8:	8c 93       	st	X, r24
		/*Choose Transmit or Receive*/
		UART_UCSRB |= Add_pstrConfigue->UART_u8Mode;
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	90 81       	ld	r25, Z
     cb4:	ea 81       	ldd	r30, Y+2	; 0x02
     cb6:	fb 81       	ldd	r31, Y+3	; 0x03
     cb8:	83 81       	ldd	r24, Z+3	; 0x03
     cba:	89 2b       	or	r24, r25
     cbc:	8c 93       	st	X, r24

		/*enable RXCIE RX complete interrupt*/
		Set_Bit(UART_UCSRB,UART_RXCIE);
     cbe:	aa e2       	ldi	r26, 0x2A	; 42
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ea e2       	ldi	r30, 0x2A	; 42
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 68       	ori	r24, 0x80	; 128
     cca:	8c 93       	st	X, r24

		/*Enable UBRRH -> URSEL = 0*/
		clear_Bit(UART_UCSRC, UART_URSEL);
     ccc:	a0 e4       	ldi	r26, 0x40	; 64
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e0 e4       	ldi	r30, 0x40	; 64
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8f 77       	andi	r24, 0x7F	; 127
     cd8:	8c 93       	st	X, r24
		/*Set Baud Rate*/
		UART_UBRRL |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     cda:	a9 e2       	ldi	r26, 0x29	; 41
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e9 e2       	ldi	r30, 0x29	; 41
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	20 81       	ld	r18, Z
     ce4:	ea 81       	ldd	r30, Y+2	; 0x02
     ce6:	fb 81       	ldd	r31, Y+3	; 0x03
     ce8:	84 81       	ldd	r24, Z+4	; 0x04
     cea:	95 81       	ldd	r25, Z+5	; 0x05
     cec:	82 2b       	or	r24, r18
     cee:	8c 93       	st	X, r24
		UART_UBRRH |= (u8)((Add_pstrConfigue->UART_u16BaudRate) >> 8);
     cf0:	a0 e4       	ldi	r26, 0x40	; 64
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e0 e4       	ldi	r30, 0x40	; 64
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 81       	ld	r18, Z
     cfa:	ea 81       	ldd	r30, Y+2	; 0x02
     cfc:	fb 81       	ldd	r31, Y+3	; 0x03
     cfe:	84 81       	ldd	r24, Z+4	; 0x04
     d00:	95 81       	ldd	r25, Z+5	; 0x05
     d02:	89 2f       	mov	r24, r25
     d04:	99 27       	eor	r25, r25
     d06:	82 2b       	or	r24, r18
     d08:	8c 93       	st	X, r24
	}
	return Local_enuErrorStatus;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <UART_enuTransmite>:
UART_tenuErrorStatus UART_enuTransmite (u16 Copy_pu16Data)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <UART_enuTransmite+0x6>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     d28:	19 82       	std	Y+1, r1	; 0x01
		Local_enuErrorStatus= UART_NOK;
	}
	else
	{
		/*Polling on the flag -> wait for UDR to be empty*/
		while((Get_Bit(UART_UCSRA, UART_UDRE)) == 0);
     d2a:	eb e2       	ldi	r30, 0x2B	; 43
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	82 95       	swap	r24
     d32:	86 95       	lsr	r24
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	81 70       	andi	r24, 0x01	; 1
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	a1 f3       	breq	.-24     	; 0xd2a <UART_enuTransmite+0x12>

		/*Clear TXB8*/
		clear_Bit(UART_UCSRB, UART_TXB8);
     d42:	aa e2       	ldi	r26, 0x2A	; 42
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ea e2       	ldi	r30, 0x2A	; 42
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8e 7f       	andi	r24, 0xFE	; 254
     d4e:	8c 93       	st	X, r24
		if ( Copy_pu16Data & 0x0100 )
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	80 70       	andi	r24, 0x00	; 0
     d56:	91 70       	andi	r25, 0x01	; 1
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	39 f0       	breq	.+14     	; 0xd6a <UART_enuTransmite+0x52>
		{
			Set_Bit(UART_UCSRB, UART_TXB8);
     d5c:	aa e2       	ldi	r26, 0x2A	; 42
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ea e2       	ldi	r30, 0x2A	; 42
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	8c 93       	st	X, r24
		}
		/* Put data into UDR Register */
		UART_UDR = (u8)(Copy_pu16Data);
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	80 83       	st	Z, r24
	}
	return Local_enuErrorStatus;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <UART_enuReceive>:

UART_tenuErrorStatus UART_enuReceive (u8* Add_pu8Data)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <UART_enuReceive+0x6>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     d90:	19 82       	std	Y+1, r1	; 0x01
	if(Add_pu8Data == NULL)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	19 f4       	brne	.+6      	; 0xda0 <UART_enuReceive+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	29 c0       	rjmp	.+82     	; 0xdf2 <UART_enuReceive+0x72>
	}
	else
	{
		/*Polling on the flag -> wait for data to be received*/
		while((Get_Bit(UART_UCSRA,UART_RXC)) == 0);
     da0:	eb e2       	ldi	r30, 0x2B	; 43
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	dc f7       	brge	.-10     	; 0xda0 <UART_enuReceive+0x20>
		/*Check frame error and Data over Run error*/
		if((Get_Bit(UART_UCSRA,UART_DOR)) || (Get_Bit(UART_UCSRA,UART_FE)))
     daa:	eb e2       	ldi	r30, 0x2B	; 43
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	86 95       	lsr	r24
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	81 70       	andi	r24, 0x01	; 1
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	88 23       	and	r24, r24
     dc0:	59 f4       	brne	.+22     	; 0xdd8 <UART_enuReceive+0x58>
     dc2:	eb e2       	ldi	r30, 0x2B	; 43
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	82 95       	swap	r24
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	88 23       	and	r24, r24
     dd6:	19 f0       	breq	.+6      	; 0xdde <UART_enuReceive+0x5e>
		{
			Local_enuErrorStatus= UART_NOK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <UART_enuReceive+0x72>
		}
		else
		{
			//*Add_pu16Data =(((UART_u8_UCSRB_REG>>1) & 0X01) << 8); // get bit number 9
			*Add_pu8Data |= UART_UDR;     // get Lowbyte
     dde:	ea 81       	ldd	r30, Y+2	; 0x02
     de0:	fb 81       	ldd	r31, Y+3	; 0x03
     de2:	90 81       	ld	r25, Z
     de4:	ec e2       	ldi	r30, 0x2C	; 44
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	89 2b       	or	r24, r25
     dec:	ea 81       	ldd	r30, Y+2	; 0x02
     dee:	fb 81       	ldd	r31, Y+3	; 0x03
     df0:	80 83       	st	Z, r24
		}
	}
	return Local_enuErrorStatus;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <UART_InterruptReceive>:
void UART_InterruptReceive(u8* Add_pu8Data)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <UART_InterruptReceive+0x6>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
	*Add_pu8Data |= UART_UDR;     // get Lowbyte
     e0e:	e9 81       	ldd	r30, Y+1	; 0x01
     e10:	fa 81       	ldd	r31, Y+2	; 0x02
     e12:	90 81       	ld	r25, Z
     e14:	ec e2       	ldi	r30, 0x2C	; 44
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	89 2b       	or	r24, r25
     e1c:	e9 81       	ldd	r30, Y+1	; 0x01
     e1e:	fa 81       	ldd	r31, Y+2	; 0x02
     e20:	80 83       	st	Z, r24
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <UART_CallBackFunctionRX>:
void UART_CallBackFunctionRX(void (*PTF)(void))
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <UART_CallBackFunctionRX+0x6>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
	GPTF_RX = PTF;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	90 93 69 00 	sts	0x0069, r25
     e42:	80 93 68 00 	sts	0x0068, r24
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <__vector_13>:
void __vector_13(void)
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	GPTF_RX();
     e7a:	e0 91 68 00 	lds	r30, 0x0068
     e7e:	f0 91 69 00 	lds	r31, 0x0069
     e82:	09 95       	icall
}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	ff 91       	pop	r31
     e8a:	ef 91       	pop	r30
     e8c:	bf 91       	pop	r27
     e8e:	af 91       	pop	r26
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	7f 91       	pop	r23
     e96:	6f 91       	pop	r22
     e98:	5f 91       	pop	r21
     e9a:	4f 91       	pop	r20
     e9c:	3f 91       	pop	r19
     e9e:	2f 91       	pop	r18
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <Timer0_VoidInitNormal>:

static void (*GPTF_Normal) (void) = NULL;
static void (*GPTF_CTC) (void) = NULL;

void Timer0_VoidInitNormal (u8 Local_PreLoad)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
	Timer0_TCNT0 = Local_PreLoad;
     eb6:	e2 e5       	ldi	r30, 0x52	; 82
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	80 83       	st	Z, r24
	/*select normal mode*/
	clear_Bit(Timer0_TCCR0,Timer0_WGM01);
     ebe:	a3 e5       	ldi	r26, 0x53	; 83
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e3 e5       	ldi	r30, 0x53	; 83
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	87 7f       	andi	r24, 0xF7	; 247
     eca:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_WGM00);
     ecc:	a3 e5       	ldi	r26, 0x53	; 83
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e3 e5       	ldi	r30, 0x53	; 83
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8f 7b       	andi	r24, 0xBF	; 191
     ed8:	8c 93       	st	X, r24
	/*Enable overflow interrupt*/
	Set_Bit(Timer0_TIMSK,Timer0_TOIE0);
     eda:	a9 e5       	ldi	r26, 0x59	; 89
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e9 e5       	ldi	r30, 0x59	; 89
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	81 60       	ori	r24, 0x01	; 1
     ee6:	8c 93       	st	X, r24
#elif Timer0_Prescaler == Prescaler256
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
	clear_Bit(Timer0_TCCR0,Timer0_CS00);
#elif Timer0_Prescaler == Prescaler1024
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
     ee8:	a3 e5       	ldi	r26, 0x53	; 83
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e3 e5       	ldi	r30, 0x53	; 83
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	84 60       	ori	r24, 0x04	; 4
     ef4:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
     ef6:	a3 e5       	ldi	r26, 0x53	; 83
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e3 e5       	ldi	r30, 0x53	; 83
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8d 7f       	andi	r24, 0xFD	; 253
     f02:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);
     f04:	a3 e5       	ldi	r26, 0x53	; 83
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e3 e5       	ldi	r30, 0x53	; 83
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	81 60       	ori	r24, 0x01	; 1
     f10:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);

#endif

#if OC0_Mode == OC0_Toggle
	Set_Bit(Timer0_TCCR0,Timer0_COM00);
     f12:	a3 e5       	ldi	r26, 0x53	; 83
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e3 e5       	ldi	r30, 0x53	; 83
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	80 61       	ori	r24, 0x10	; 16
     f1e:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_COM01);
     f20:	a3 e5       	ldi	r26, 0x53	; 83
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e3 e5       	ldi	r30, 0x53	; 83
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8f 7d       	andi	r24, 0xDF	; 223
     f2c:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_COM01);
#elif OC0_Mode == OC0_Toggle
	Set_Bit(Timer0_TCCR0,Timer0_COM00);
	clear_Bit(Timer0_TCCR0,Timer0_COM01);
#endif
}
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <Timer0_VoidInitCTC>:
void Timer0_VoidInitCTC (u8 Local_CompareValue)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	0f 92       	push	r0
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCR0 = Local_CompareValue;
     f42:	ec e5       	ldi	r30, 0x5C	; 92
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	80 83       	st	Z, r24
	/*Select CTC mode*/
	Set_Bit(Timer0_TCCR0,Timer0_WGM01);
     f4a:	a3 e5       	ldi	r26, 0x53	; 83
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e3 e5       	ldi	r30, 0x53	; 83
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_WGM00);
     f58:	a3 e5       	ldi	r26, 0x53	; 83
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e3 e5       	ldi	r30, 0x53	; 83
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8f 7b       	andi	r24, 0xBF	; 191
     f64:	8c 93       	st	X, r24
	/*Enable interrupt on compare match*/
	Set_Bit(Timer0_TIMSK,Timer0_OCIE0);
     f66:	a9 e5       	ldi	r26, 0x59	; 89
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e9 e5       	ldi	r30, 0x59	; 89
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	82 60       	ori	r24, 0x02	; 2
     f72:	8c 93       	st	X, r24
#elif Timer0_Prescaler == Prescaler256
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
	clear_Bit(Timer0_TCCR0,Timer0_CS00);
#elif Timer0_Prescaler == Prescaler1024
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
     f74:	a3 e5       	ldi	r26, 0x53	; 83
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e3 e5       	ldi	r30, 0x53	; 83
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
     f82:	a3 e5       	ldi	r26, 0x53	; 83
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e3 e5       	ldi	r30, 0x53	; 83
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8d 7f       	andi	r24, 0xFD	; 253
     f8e:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);
     f90:	a3 e5       	ldi	r26, 0x53	; 83
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e3 e5       	ldi	r30, 0x53	; 83
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	81 60       	ori	r24, 0x01	; 1
     f9c:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	Set_Bit(Timer0_TCCR0,Timer0_CS01);
	Set_Bit(Timer0_TCCR0,Timer0_CS00);

#endif
}
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <Timer0_VoidSetPreload>:
void Timer0_VoidSetPreload(u8 Local_Preload)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	89 83       	std	Y+1, r24	; 0x01
	Timer0_TCNT0 = Local_Preload;
     fb2:	e2 e5       	ldi	r30, 0x52	; 82
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	80 83       	st	Z, r24
}
     fba:	0f 90       	pop	r0
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <Timer0_CallBackFunctionNormal>:
void Timer0_CallBackFunctionNormal(void (*PTF)(void))
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <Timer0_CallBackFunctionNormal+0x6>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
	GPTF_Normal = PTF;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	90 93 6b 00 	sts	0x006B, r25
     fd8:	80 93 6a 00 	sts	0x006A, r24
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <Timer0_CallBackFunctionCTC>:
void Timer0_CallBackFunctionCTC(void (*PTF)(void))
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <Timer0_CallBackFunctionCTC+0x6>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
	GPTF_CTC = PTF;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	90 93 6d 00 	sts	0x006D, r25
     ffc:	80 93 6c 00 	sts	0x006C, r24
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <__vector_11>:

void __vector_11(void)
{
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	2f 93       	push	r18
    1016:	3f 93       	push	r19
    1018:	4f 93       	push	r20
    101a:	5f 93       	push	r21
    101c:	6f 93       	push	r22
    101e:	7f 93       	push	r23
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	af 93       	push	r26
    1026:	bf 93       	push	r27
    1028:	ef 93       	push	r30
    102a:	ff 93       	push	r31
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	GPTF_Normal();
    1034:	e0 91 6a 00 	lds	r30, 0x006A
    1038:	f0 91 6b 00 	lds	r31, 0x006B
    103c:	09 95       	icall
}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	ff 91       	pop	r31
    1044:	ef 91       	pop	r30
    1046:	bf 91       	pop	r27
    1048:	af 91       	pop	r26
    104a:	9f 91       	pop	r25
    104c:	8f 91       	pop	r24
    104e:	7f 91       	pop	r23
    1050:	6f 91       	pop	r22
    1052:	5f 91       	pop	r21
    1054:	4f 91       	pop	r20
    1056:	3f 91       	pop	r19
    1058:	2f 91       	pop	r18
    105a:	0f 90       	pop	r0
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	0f 90       	pop	r0
    1060:	1f 90       	pop	r1
    1062:	18 95       	reti

00001064 <__vector_10>:
void __vector_10(void)
{
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
    106e:	2f 93       	push	r18
    1070:	3f 93       	push	r19
    1072:	4f 93       	push	r20
    1074:	5f 93       	push	r21
    1076:	6f 93       	push	r22
    1078:	7f 93       	push	r23
    107a:	8f 93       	push	r24
    107c:	9f 93       	push	r25
    107e:	af 93       	push	r26
    1080:	bf 93       	push	r27
    1082:	ef 93       	push	r30
    1084:	ff 93       	push	r31
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	GPTF_CTC();
    108e:	e0 91 6c 00 	lds	r30, 0x006C
    1092:	f0 91 6d 00 	lds	r31, 0x006D
    1096:	09 95       	icall
}
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	ff 91       	pop	r31
    109e:	ef 91       	pop	r30
    10a0:	bf 91       	pop	r27
    10a2:	af 91       	pop	r26
    10a4:	9f 91       	pop	r25
    10a6:	8f 91       	pop	r24
    10a8:	7f 91       	pop	r23
    10aa:	6f 91       	pop	r22
    10ac:	5f 91       	pop	r21
    10ae:	4f 91       	pop	r20
    10b0:	3f 91       	pop	r19
    10b2:	2f 91       	pop	r18
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	0f 90       	pop	r0
    10ba:	1f 90       	pop	r1
    10bc:	18 95       	reti

000010be <GIE_VoidEnable>:

#include "../Header/GIE_Register.h"
#include "../Header/GIE_interface.h"

void GIE_VoidEnable (void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GIE_SREG,GIE_SREG_I);
    10c6:	af e5       	ldi	r26, 0x5F	; 95
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ef e5       	ldi	r30, 0x5F	; 95
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 68       	ori	r24, 0x80	; 128
    10d2:	8c 93       	st	X, r24
}
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <GIE_VoidDisable>:

void GIE_VoidDisable (void)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	clear_Bit(GIE_SREG,GIE_SREG_I);
    10e2:	af e5       	ldi	r26, 0x5F	; 95
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ef e5       	ldi	r30, 0x5F	; 95
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8f 77       	andi	r24, 0x7F	; 127
    10ee:	8c 93       	st	X, r24
}
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <DIO_VoidSetPinDir>:
#include "../Header/DIO_interface.h"
#include "../Header/DIO_Private.h"
#include "../Header/DIO_Register.h"

void DIO_VoidSetPinDir(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_DirectionState)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	27 97       	sbiw	r28, 0x07	; 7
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	6a 83       	std	Y+2, r22	; 0x02
    110e:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	08 f0       	brcs	.+2      	; 0x1118 <DIO_VoidSetPinDir+0x22>
    1116:	f0 c0       	rjmp	.+480    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 30       	cpi	r24, 0x08	; 8
    111c:	08 f0       	brcs	.+2      	; 0x1120 <DIO_VoidSetPinDir+0x2a>
    111e:	ec c0       	rjmp	.+472    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
	{
		if (Local_DirectionState == Input)
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 23       	and	r24, r24
    1124:	09 f0       	breq	.+2      	; 0x1128 <DIO_VoidSetPinDir+0x32>
    1126:	75 c0       	rjmp	.+234    	; 0x1212 <DIO_VoidSetPinDir+0x11c>
		{
			switch (Local_Groupname)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3f 83       	std	Y+7, r19	; 0x07
    1130:	2e 83       	std	Y+6, r18	; 0x06
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	91 05       	cpc	r25, r1
    113a:	61 f1       	breq	.+88     	; 0x1194 <DIO_VoidSetPinDir+0x9e>
    113c:	2e 81       	ldd	r18, Y+6	; 0x06
    113e:	3f 81       	ldd	r19, Y+7	; 0x07
    1140:	23 30       	cpi	r18, 0x03	; 3
    1142:	31 05       	cpc	r19, r1
    1144:	34 f4       	brge	.+12     	; 0x1152 <DIO_VoidSetPinDir+0x5c>
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	9f 81       	ldd	r25, Y+7	; 0x07
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	69 f0       	breq	.+26     	; 0x116a <DIO_VoidSetPinDir+0x74>
    1150:	d3 c0       	rjmp	.+422    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
    1152:	2e 81       	ldd	r18, Y+6	; 0x06
    1154:	3f 81       	ldd	r19, Y+7	; 0x07
    1156:	23 30       	cpi	r18, 0x03	; 3
    1158:	31 05       	cpc	r19, r1
    115a:	89 f1       	breq	.+98     	; 0x11be <DIO_VoidSetPinDir+0xc8>
    115c:	8e 81       	ldd	r24, Y+6	; 0x06
    115e:	9f 81       	ldd	r25, Y+7	; 0x07
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_VoidSetPinDir+0x72>
    1166:	40 c0       	rjmp	.+128    	; 0x11e8 <DIO_VoidSetPinDir+0xf2>
    1168:	c7 c0       	rjmp	.+398    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					clear_Bit(DIO_DDRA, Local_PinNumber);
    116a:	aa e3       	ldi	r26, 0x3A	; 58
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_VoidSetPinDir+0x92>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_VoidSetPinDir+0x8e>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	b2 c0       	rjmp	.+356    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					clear_Bit (DIO_DDRB, Local_PinNumber);
    1194:	a7 e3       	ldi	r26, 0x37	; 55
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e7 e3       	ldi	r30, 0x37	; 55
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_VoidSetPinDir+0xbc>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_VoidSetPinDir+0xb8>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	9d c0       	rjmp	.+314    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					clear_Bit (DIO_DDRC, Local_PinNumber);
    11be:	a4 e3       	ldi	r26, 0x34	; 52
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e4 e3       	ldi	r30, 0x34	; 52
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_VoidSetPinDir+0xe6>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_VoidSetPinDir+0xe2>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	88 c0       	rjmp	.+272    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					clear_Bit (DIO_DDRD, Local_PinNumber);
    11e8:	a1 e3       	ldi	r26, 0x31	; 49
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_VoidSetPinDir+0x110>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_VoidSetPinDir+0x10c>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	73 c0       	rjmp	.+230    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
					break;
			}
		}
		else if (Local_DirectionState == Output)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	09 f0       	breq	.+2      	; 0x121a <DIO_VoidSetPinDir+0x124>
    1218:	6f c0       	rjmp	.+222    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
		{
			switch (Local_Groupname)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3d 83       	std	Y+5, r19	; 0x05
    1222:	2c 83       	std	Y+4, r18	; 0x04
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	91 05       	cpc	r25, r1
    122c:	51 f1       	breq	.+84     	; 0x1282 <DIO_VoidSetPinDir+0x18c>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	23 30       	cpi	r18, 0x03	; 3
    1234:	31 05       	cpc	r19, r1
    1236:	34 f4       	brge	.+12     	; 0x1244 <DIO_VoidSetPinDir+0x14e>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	61 f0       	breq	.+24     	; 0x125a <DIO_VoidSetPinDir+0x164>
    1242:	5a c0       	rjmp	.+180    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	23 30       	cpi	r18, 0x03	; 3
    124a:	31 05       	cpc	r19, r1
    124c:	71 f1       	breq	.+92     	; 0x12aa <DIO_VoidSetPinDir+0x1b4>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	91 05       	cpc	r25, r1
    1256:	e9 f1       	breq	.+122    	; 0x12d2 <DIO_VoidSetPinDir+0x1dc>
    1258:	4f c0       	rjmp	.+158    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					Set_Bit(DIO_DDRA, Local_PinNumber);
    125a:	aa e3       	ldi	r26, 0x3A	; 58
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	ea e3       	ldi	r30, 0x3A	; 58
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_VoidSetPinDir+0x182>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_VoidSetPinDir+0x17e>
    127c:	84 2b       	or	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	3b c0       	rjmp	.+118    	; 0x12f8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					Set_Bit(DIO_DDRB, Local_PinNumber);
    1282:	a7 e3       	ldi	r26, 0x37	; 55
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e7 e3       	ldi	r30, 0x37	; 55
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_VoidSetPinDir+0x1aa>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_VoidSetPinDir+0x1a6>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					Set_Bit(DIO_DDRC, Local_PinNumber);
    12aa:	a4 e3       	ldi	r26, 0x34	; 52
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e4 e3       	ldi	r30, 0x34	; 52
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_VoidSetPinDir+0x1d2>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_VoidSetPinDir+0x1ce>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					Set_Bit(DIO_DDRD, Local_PinNumber);
    12d2:	a1 e3       	ldi	r26, 0x31	; 49
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e1 e3       	ldi	r30, 0x31	; 49
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_VoidSetPinDir+0x1fa>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_VoidSetPinDir+0x1f6>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    12f8:	27 96       	adiw	r28, 0x07	; 7
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_valueState)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	27 97       	sbiw	r28, 0x07	; 7
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6a 83       	std	Y+2, r22	; 0x02
    1322:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	85 30       	cpi	r24, 0x05	; 5
    1328:	08 f0       	brcs	.+2      	; 0x132c <DIO_VoidSetPinValue+0x22>
    132a:	f0 c0       	rjmp	.+480    	; 0x150c <DIO_VoidSetPinValue+0x202>
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	88 30       	cpi	r24, 0x08	; 8
    1330:	08 f0       	brcs	.+2      	; 0x1334 <DIO_VoidSetPinValue+0x2a>
    1332:	ec c0       	rjmp	.+472    	; 0x150c <DIO_VoidSetPinValue+0x202>
	{
		if (Local_valueState == Low)
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 23       	and	r24, r24
    1338:	09 f0       	breq	.+2      	; 0x133c <DIO_VoidSetPinValue+0x32>
    133a:	75 c0       	rjmp	.+234    	; 0x1426 <DIO_VoidSetPinValue+0x11c>
		{
			switch (Local_Groupname)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3f 83       	std	Y+7, r19	; 0x07
    1344:	2e 83       	std	Y+6, r18	; 0x06
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	9f 81       	ldd	r25, Y+7	; 0x07
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	91 05       	cpc	r25, r1
    134e:	61 f1       	breq	.+88     	; 0x13a8 <DIO_VoidSetPinValue+0x9e>
    1350:	2e 81       	ldd	r18, Y+6	; 0x06
    1352:	3f 81       	ldd	r19, Y+7	; 0x07
    1354:	23 30       	cpi	r18, 0x03	; 3
    1356:	31 05       	cpc	r19, r1
    1358:	34 f4       	brge	.+12     	; 0x1366 <DIO_VoidSetPinValue+0x5c>
    135a:	8e 81       	ldd	r24, Y+6	; 0x06
    135c:	9f 81       	ldd	r25, Y+7	; 0x07
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	69 f0       	breq	.+26     	; 0x137e <DIO_VoidSetPinValue+0x74>
    1364:	d3 c0       	rjmp	.+422    	; 0x150c <DIO_VoidSetPinValue+0x202>
    1366:	2e 81       	ldd	r18, Y+6	; 0x06
    1368:	3f 81       	ldd	r19, Y+7	; 0x07
    136a:	23 30       	cpi	r18, 0x03	; 3
    136c:	31 05       	cpc	r19, r1
    136e:	89 f1       	breq	.+98     	; 0x13d2 <DIO_VoidSetPinValue+0xc8>
    1370:	8e 81       	ldd	r24, Y+6	; 0x06
    1372:	9f 81       	ldd	r25, Y+7	; 0x07
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <DIO_VoidSetPinValue+0x72>
    137a:	40 c0       	rjmp	.+128    	; 0x13fc <DIO_VoidSetPinValue+0xf2>
    137c:	c7 c0       	rjmp	.+398    	; 0x150c <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					clear_Bit(DIO_PORTA, Local_PinNumber);
    137e:	ab e3       	ldi	r26, 0x3B	; 59
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_VoidSetPinValue+0x92>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_VoidSetPinValue+0x8e>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	b2 c0       	rjmp	.+356    	; 0x150c <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					clear_Bit(DIO_PORTB, Local_PinNumber);
    13a8:	a8 e3       	ldi	r26, 0x38	; 56
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e8 e3       	ldi	r30, 0x38	; 56
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_VoidSetPinValue+0xbc>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_VoidSetPinValue+0xb8>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	9d c0       	rjmp	.+314    	; 0x150c <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					clear_Bit(DIO_PORTC, Local_PinNumber);
    13d2:	a5 e3       	ldi	r26, 0x35	; 53
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e3       	ldi	r30, 0x35	; 53
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_VoidSetPinValue+0xe6>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_VoidSetPinValue+0xe2>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	88 c0       	rjmp	.+272    	; 0x150c <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					clear_Bit(DIO_PORTD, Local_PinNumber);
    13fc:	a2 e3       	ldi	r26, 0x32	; 50
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_VoidSetPinValue+0x110>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_VoidSetPinValue+0x10c>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	73 c0       	rjmp	.+230    	; 0x150c <DIO_VoidSetPinValue+0x202>
					break;
			}
		}
		else if (Local_valueState == High)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	09 f0       	breq	.+2      	; 0x142e <DIO_VoidSetPinValue+0x124>
    142c:	6f c0       	rjmp	.+222    	; 0x150c <DIO_VoidSetPinValue+0x202>
		{
			switch (Local_Groupname)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3d 83       	std	Y+5, r19	; 0x05
    1436:	2c 83       	std	Y+4, r18	; 0x04
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	91 05       	cpc	r25, r1
    1440:	51 f1       	breq	.+84     	; 0x1496 <DIO_VoidSetPinValue+0x18c>
    1442:	2c 81       	ldd	r18, Y+4	; 0x04
    1444:	3d 81       	ldd	r19, Y+5	; 0x05
    1446:	23 30       	cpi	r18, 0x03	; 3
    1448:	31 05       	cpc	r19, r1
    144a:	34 f4       	brge	.+12     	; 0x1458 <DIO_VoidSetPinValue+0x14e>
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	61 f0       	breq	.+24     	; 0x146e <DIO_VoidSetPinValue+0x164>
    1456:	5a c0       	rjmp	.+180    	; 0x150c <DIO_VoidSetPinValue+0x202>
    1458:	2c 81       	ldd	r18, Y+4	; 0x04
    145a:	3d 81       	ldd	r19, Y+5	; 0x05
    145c:	23 30       	cpi	r18, 0x03	; 3
    145e:	31 05       	cpc	r19, r1
    1460:	71 f1       	breq	.+92     	; 0x14be <DIO_VoidSetPinValue+0x1b4>
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	91 05       	cpc	r25, r1
    146a:	e9 f1       	breq	.+122    	; 0x14e6 <DIO_VoidSetPinValue+0x1dc>
    146c:	4f c0       	rjmp	.+158    	; 0x150c <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					Set_Bit(DIO_PORTA, Local_PinNumber);
    146e:	ab e3       	ldi	r26, 0x3B	; 59
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	eb e3       	ldi	r30, 0x3B	; 59
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_VoidSetPinValue+0x182>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_VoidSetPinValue+0x17e>
    1490:	84 2b       	or	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	3b c0       	rjmp	.+118    	; 0x150c <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					Set_Bit(DIO_PORTB, Local_PinNumber);
    1496:	a8 e3       	ldi	r26, 0x38	; 56
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e8 e3       	ldi	r30, 0x38	; 56
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_VoidSetPinValue+0x1aa>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_VoidSetPinValue+0x1a6>
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	27 c0       	rjmp	.+78     	; 0x150c <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					Set_Bit(DIO_PORTC, Local_PinNumber);
    14be:	a5 e3       	ldi	r26, 0x35	; 53
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e3       	ldi	r30, 0x35	; 53
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_VoidSetPinValue+0x1d2>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_VoidSetPinValue+0x1ce>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	13 c0       	rjmp	.+38     	; 0x150c <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					Set_Bit(DIO_PORTD, Local_PinNumber);
    14e6:	a2 e3       	ldi	r26, 0x32	; 50
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e2 e3       	ldi	r30, 0x32	; 50
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_VoidSetPinValue+0x1fa>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_VoidSetPinValue+0x1f6>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    150c:	27 96       	adiw	r28, 0x07	; 7
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <DIO_u8GetPinValue>:
u8	 DIO_u8GetPinValue (u8 Local_Groupname, u8 Local_PinNumber)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <DIO_u8GetPinValue+0x6>
    1524:	00 d0       	rcall	.+0      	; 0x1526 <DIO_u8GetPinValue+0x8>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <DIO_u8GetPinValue+0xa>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	8a 83       	std	Y+2, r24	; 0x02
    152e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_returndata = 0;
    1530:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	85 30       	cpi	r24, 0x05	; 5
    1536:	08 f0       	brcs	.+2      	; 0x153a <DIO_u8GetPinValue+0x1c>
    1538:	6e c0       	rjmp	.+220    	; 0x1616 <DIO_u8GetPinValue+0xf8>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	08 f0       	brcs	.+2      	; 0x1542 <DIO_u8GetPinValue+0x24>
    1540:	6a c0       	rjmp	.+212    	; 0x1616 <DIO_u8GetPinValue+0xf8>
	{
		switch (Local_Groupname)
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3e 83       	std	Y+6, r19	; 0x06
    154a:	2d 83       	std	Y+5, r18	; 0x05
    154c:	4d 81       	ldd	r20, Y+5	; 0x05
    154e:	5e 81       	ldd	r21, Y+6	; 0x06
    1550:	42 30       	cpi	r20, 0x02	; 2
    1552:	51 05       	cpc	r21, r1
    1554:	41 f1       	breq	.+80     	; 0x15a6 <DIO_u8GetPinValue+0x88>
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	34 f4       	brge	.+12     	; 0x156c <DIO_u8GetPinValue+0x4e>
    1560:	2d 81       	ldd	r18, Y+5	; 0x05
    1562:	3e 81       	ldd	r19, Y+6	; 0x06
    1564:	21 30       	cpi	r18, 0x01	; 1
    1566:	31 05       	cpc	r19, r1
    1568:	61 f0       	breq	.+24     	; 0x1582 <DIO_u8GetPinValue+0x64>
    156a:	52 c0       	rjmp	.+164    	; 0x1610 <DIO_u8GetPinValue+0xf2>
    156c:	4d 81       	ldd	r20, Y+5	; 0x05
    156e:	5e 81       	ldd	r21, Y+6	; 0x06
    1570:	43 30       	cpi	r20, 0x03	; 3
    1572:	51 05       	cpc	r21, r1
    1574:	51 f1       	breq	.+84     	; 0x15ca <DIO_u8GetPinValue+0xac>
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	91 05       	cpc	r25, r1
    157e:	b9 f1       	breq	.+110    	; 0x15ee <DIO_u8GetPinValue+0xd0>
    1580:	47 c0       	rjmp	.+142    	; 0x1610 <DIO_u8GetPinValue+0xf2>
		{
			case Group_A:
				Local_returndata = Get_Bit(DIO_PINA, Local_PinNumber);
    1582:	e9 e3       	ldi	r30, 0x39	; 57
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a9 01       	movw	r20, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_u8GetPinValue+0x7c>
    1596:	55 95       	asr	r21
    1598:	47 95       	ror	r20
    159a:	8a 95       	dec	r24
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_u8GetPinValue+0x78>
    159e:	ca 01       	movw	r24, r20
    15a0:	81 70       	andi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	35 c0       	rjmp	.+106    	; 0x1610 <DIO_u8GetPinValue+0xf2>
				break;
			case Group_B:
				Local_returndata = Get_Bit(DIO_PINB, Local_PinNumber);
    15a6:	e6 e3       	ldi	r30, 0x36	; 54
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a9 01       	movw	r20, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_u8GetPinValue+0xa0>
    15ba:	55 95       	asr	r21
    15bc:	47 95       	ror	r20
    15be:	8a 95       	dec	r24
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_u8GetPinValue+0x9c>
    15c2:	ca 01       	movw	r24, r20
    15c4:	81 70       	andi	r24, 0x01	; 1
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	23 c0       	rjmp	.+70     	; 0x1610 <DIO_u8GetPinValue+0xf2>
				break;
			case Group_C:
				Local_returndata = Get_Bit(DIO_PINC, Local_PinNumber);
    15ca:	e3 e3       	ldi	r30, 0x33	; 51
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a9 01       	movw	r20, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_u8GetPinValue+0xc4>
    15de:	55 95       	asr	r21
    15e0:	47 95       	ror	r20
    15e2:	8a 95       	dec	r24
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_u8GetPinValue+0xc0>
    15e6:	ca 01       	movw	r24, r20
    15e8:	81 70       	andi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	11 c0       	rjmp	.+34     	; 0x1610 <DIO_u8GetPinValue+0xf2>
				break;
			case Group_D:
				Local_returndata = Get_Bit(DIO_PIND, Local_PinNumber);
    15ee:	e0 e3       	ldi	r30, 0x30	; 48
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_u8GetPinValue+0xe8>
    1602:	55 95       	asr	r21
    1604:	47 95       	ror	r20
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_u8GetPinValue+0xe4>
    160a:	ca 01       	movw	r24, r20
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    1610:	59 81       	ldd	r21, Y+1	; 0x01
    1612:	5c 83       	std	Y+4, r21	; 0x04
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_u8GetPinValue+0xfc>
	}
	else
	{
		return -1;
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	8c 83       	std	Y+4, r24	; 0x04
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    161c:	26 96       	adiw	r28, 0x06	; 6
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DIO_VoidSetPortDir>:
void DIO_VoidSetPortDir(u8 Local_Groupname, u8 Local_DirectionState)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <DIO_VoidSetPortDir+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_VoidSetPortDir+0x8>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3c 83       	std	Y+4, r19	; 0x04
    1646:	2b 83       	std	Y+3, r18	; 0x03
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	82 30       	cpi	r24, 0x02	; 2
    164e:	91 05       	cpc	r25, r1
    1650:	d9 f0       	breq	.+54     	; 0x1688 <DIO_VoidSetPortDir+0x5a>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	23 30       	cpi	r18, 0x03	; 3
    1658:	31 05       	cpc	r19, r1
    165a:	34 f4       	brge	.+12     	; 0x1668 <DIO_VoidSetPortDir+0x3a>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	61 f0       	breq	.+24     	; 0x167e <DIO_VoidSetPortDir+0x50>
    1666:	1e c0       	rjmp	.+60     	; 0x16a4 <DIO_VoidSetPortDir+0x76>
    1668:	2b 81       	ldd	r18, Y+3	; 0x03
    166a:	3c 81       	ldd	r19, Y+4	; 0x04
    166c:	23 30       	cpi	r18, 0x03	; 3
    166e:	31 05       	cpc	r19, r1
    1670:	81 f0       	breq	.+32     	; 0x1692 <DIO_VoidSetPortDir+0x64>
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	84 30       	cpi	r24, 0x04	; 4
    1678:	91 05       	cpc	r25, r1
    167a:	81 f0       	breq	.+32     	; 0x169c <DIO_VoidSetPortDir+0x6e>
    167c:	13 c0       	rjmp	.+38     	; 0x16a4 <DIO_VoidSetPortDir+0x76>
	{
		case Group_A:
			DIO_DDRA = Local_DirectionState;
    167e:	ea e3       	ldi	r30, 0x3A	; 58
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	80 83       	st	Z, r24
    1686:	0e c0       	rjmp	.+28     	; 0x16a4 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_B:
			DIO_DDRB = Local_DirectionState;
    1688:	e7 e3       	ldi	r30, 0x37	; 55
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	80 83       	st	Z, r24
    1690:	09 c0       	rjmp	.+18     	; 0x16a4 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_C:
			DIO_DDRC = Local_DirectionState;
    1692:	e4 e3       	ldi	r30, 0x34	; 52
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	80 83       	st	Z, r24
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_D:
			DIO_DDRD = Local_DirectionState;
    169c:	e1 e3       	ldi	r30, 0x31	; 49
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	80 83       	st	Z, r24
			break;
	}
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Local_Groupname, u8 Local_valueState)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_VoidSetPortValue+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_VoidSetPortValue+0x8>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3c 83       	std	Y+4, r19	; 0x04
    16ca:	2b 83       	std	Y+3, r18	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	91 05       	cpc	r25, r1
    16d4:	d9 f0       	breq	.+54     	; 0x170c <DIO_VoidSetPortValue+0x5a>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	23 30       	cpi	r18, 0x03	; 3
    16dc:	31 05       	cpc	r19, r1
    16de:	34 f4       	brge	.+12     	; 0x16ec <DIO_VoidSetPortValue+0x3a>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	61 f0       	breq	.+24     	; 0x1702 <DIO_VoidSetPortValue+0x50>
    16ea:	1e c0       	rjmp	.+60     	; 0x1728 <DIO_VoidSetPortValue+0x76>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	23 30       	cpi	r18, 0x03	; 3
    16f2:	31 05       	cpc	r19, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <DIO_VoidSetPortValue+0x64>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	91 05       	cpc	r25, r1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <DIO_VoidSetPortValue+0x6e>
    1700:	13 c0       	rjmp	.+38     	; 0x1728 <DIO_VoidSetPortValue+0x76>
	{
		case Group_A:
			DIO_PORTA = Local_valueState;
    1702:	eb e3       	ldi	r30, 0x3B	; 59
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_B:
			DIO_PORTB = Local_valueState;
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_C:
			DIO_PORTC = Local_valueState;
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_D:
			DIO_PORTD = Local_valueState;
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
			break;
	}
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <DIO_u8GetPortValue>:
u8	 DIO_u8GetPortValue (u8 Local_Groupname)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <DIO_u8GetPortValue+0x6>
    173c:	00 d0       	rcall	.+0      	; 0x173e <DIO_u8GetPortValue+0x8>
    173e:	0f 92       	push	r0
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_returndata = 0;
    1746:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	85 30       	cpi	r24, 0x05	; 5
    174c:	b0 f5       	brcc	.+108    	; 0x17ba <DIO_u8GetPortValue+0x84>
	{
		switch (Local_Groupname)
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3d 83       	std	Y+5, r19	; 0x05
    1756:	2c 83       	std	Y+4, r18	; 0x04
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	82 30       	cpi	r24, 0x02	; 2
    175e:	91 05       	cpc	r25, r1
    1760:	d9 f0       	breq	.+54     	; 0x1798 <DIO_u8GetPortValue+0x62>
    1762:	2c 81       	ldd	r18, Y+4	; 0x04
    1764:	3d 81       	ldd	r19, Y+5	; 0x05
    1766:	23 30       	cpi	r18, 0x03	; 3
    1768:	31 05       	cpc	r19, r1
    176a:	34 f4       	brge	.+12     	; 0x1778 <DIO_u8GetPortValue+0x42>
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	91 05       	cpc	r25, r1
    1774:	61 f0       	breq	.+24     	; 0x178e <DIO_u8GetPortValue+0x58>
    1776:	1e c0       	rjmp	.+60     	; 0x17b4 <DIO_u8GetPortValue+0x7e>
    1778:	2c 81       	ldd	r18, Y+4	; 0x04
    177a:	3d 81       	ldd	r19, Y+5	; 0x05
    177c:	23 30       	cpi	r18, 0x03	; 3
    177e:	31 05       	cpc	r19, r1
    1780:	81 f0       	breq	.+32     	; 0x17a2 <DIO_u8GetPortValue+0x6c>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	91 05       	cpc	r25, r1
    178a:	81 f0       	breq	.+32     	; 0x17ac <DIO_u8GetPortValue+0x76>
    178c:	13 c0       	rjmp	.+38     	; 0x17b4 <DIO_u8GetPortValue+0x7e>
		{
			case Group_A:
				Local_returndata = DIO_PINA;
    178e:	e9 e3       	ldi	r30, 0x39	; 57
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_B:
				Local_returndata = DIO_PINB;
    1798:	e6 e3       	ldi	r30, 0x36	; 54
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_C:
				Local_returndata = DIO_PINC;
    17a2:	e3 e3       	ldi	r30, 0x33	; 51
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_D:
				Local_returndata = DIO_PIND;
    17ac:	e0 e3       	ldi	r30, 0x30	; 48
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    17b4:	99 81       	ldd	r25, Y+1	; 0x01
    17b6:	9b 83       	std	Y+3, r25	; 0x03
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_u8GetPortValue+0x88>
	}
	else
	{
		return -1;
    17ba:	2f ef       	ldi	r18, 0xFF	; 255
    17bc:	2b 83       	std	Y+3, r18	; 0x03
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <DIO_VoidToggleBit>:
void DIO_VoidToggleBit(u8 Local_Groupname, u8 Local_PinNumber)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <DIO_VoidToggleBit+0x6>
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <DIO_VoidToggleBit+0x8>
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3c 83       	std	Y+4, r19	; 0x04
    17e8:	2b 83       	std	Y+3, r18	; 0x03
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	82 30       	cpi	r24, 0x02	; 2
    17f0:	91 05       	cpc	r25, r1
    17f2:	51 f1       	breq	.+84     	; 0x1848 <DIO_VoidToggleBit+0x78>
    17f4:	2b 81       	ldd	r18, Y+3	; 0x03
    17f6:	3c 81       	ldd	r19, Y+4	; 0x04
    17f8:	23 30       	cpi	r18, 0x03	; 3
    17fa:	31 05       	cpc	r19, r1
    17fc:	34 f4       	brge	.+12     	; 0x180a <DIO_VoidToggleBit+0x3a>
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	61 f0       	breq	.+24     	; 0x1820 <DIO_VoidToggleBit+0x50>
    1808:	5a c0       	rjmp	.+180    	; 0x18be <DIO_VoidToggleBit+0xee>
    180a:	2b 81       	ldd	r18, Y+3	; 0x03
    180c:	3c 81       	ldd	r19, Y+4	; 0x04
    180e:	23 30       	cpi	r18, 0x03	; 3
    1810:	31 05       	cpc	r19, r1
    1812:	71 f1       	breq	.+92     	; 0x1870 <DIO_VoidToggleBit+0xa0>
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	91 05       	cpc	r25, r1
    181c:	e9 f1       	breq	.+122    	; 0x1898 <DIO_VoidToggleBit+0xc8>
    181e:	4f c0       	rjmp	.+158    	; 0x18be <DIO_VoidToggleBit+0xee>
	{
		case Group_A:
			toggle_Bit(DIO_PORTA, Local_PinNumber);
    1820:	ab e3       	ldi	r26, 0x3B	; 59
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e3       	ldi	r30, 0x3B	; 59
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_VoidToggleBit+0x6e>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_VoidToggleBit+0x6a>
    1842:	84 27       	eor	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	3b c0       	rjmp	.+118    	; 0x18be <DIO_VoidToggleBit+0xee>
			break;
		case Group_B:
			toggle_Bit(DIO_PORTB, Local_PinNumber);
    1848:	a8 e3       	ldi	r26, 0x38	; 56
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e8 e3       	ldi	r30, 0x38	; 56
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_VoidToggleBit+0x96>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_VoidToggleBit+0x92>
    186a:	84 27       	eor	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	27 c0       	rjmp	.+78     	; 0x18be <DIO_VoidToggleBit+0xee>
			break;
		case Group_C:
			toggle_Bit(DIO_PORTC, Local_PinNumber);
    1870:	a5 e3       	ldi	r26, 0x35	; 53
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e5 e3       	ldi	r30, 0x35	; 53
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_VoidToggleBit+0xbe>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <DIO_VoidToggleBit+0xba>
    1892:	84 27       	eor	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	13 c0       	rjmp	.+38     	; 0x18be <DIO_VoidToggleBit+0xee>
			break;
		case Group_D:
			toggle_Bit(DIO_PORTD, Local_PinNumber);
    1898:	a2 e3       	ldi	r26, 0x32	; 50
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e2 e3       	ldi	r30, 0x32	; 50
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_VoidToggleBit+0xe6>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_VoidToggleBit+0xe2>
    18ba:	84 27       	eor	r24, r20
    18bc:	8c 93       	st	X, r24
			break;
	}
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <DIO_VoidTogglePORT>:
void DIO_VoidTogglePORT(u8 Local_Groupname)
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <DIO_VoidTogglePORT+0x6>
    18d2:	0f 92       	push	r0
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	89 83       	std	Y+1, r24	; 0x01

	switch (Local_Groupname)
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3b 83       	std	Y+3, r19	; 0x03
    18e2:	2a 83       	std	Y+2, r18	; 0x02
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	9b 81       	ldd	r25, Y+3	; 0x03
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	91 05       	cpc	r25, r1
    18ec:	f1 f0       	breq	.+60     	; 0x192a <DIO_VoidTogglePORT+0x5e>
    18ee:	2a 81       	ldd	r18, Y+2	; 0x02
    18f0:	3b 81       	ldd	r19, Y+3	; 0x03
    18f2:	23 30       	cpi	r18, 0x03	; 3
    18f4:	31 05       	cpc	r19, r1
    18f6:	34 f4       	brge	.+12     	; 0x1904 <DIO_VoidTogglePORT+0x38>
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	91 05       	cpc	r25, r1
    1900:	61 f0       	breq	.+24     	; 0x191a <DIO_VoidTogglePORT+0x4e>
    1902:	2a c0       	rjmp	.+84     	; 0x1958 <DIO_VoidTogglePORT+0x8c>
    1904:	2a 81       	ldd	r18, Y+2	; 0x02
    1906:	3b 81       	ldd	r19, Y+3	; 0x03
    1908:	23 30       	cpi	r18, 0x03	; 3
    190a:	31 05       	cpc	r19, r1
    190c:	b1 f0       	breq	.+44     	; 0x193a <DIO_VoidTogglePORT+0x6e>
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	9b 81       	ldd	r25, Y+3	; 0x03
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	91 05       	cpc	r25, r1
    1916:	c9 f0       	breq	.+50     	; 0x194a <DIO_VoidTogglePORT+0x7e>
    1918:	1f c0       	rjmp	.+62     	; 0x1958 <DIO_VoidTogglePORT+0x8c>
	{
		case Group_A:
			DIO_PORTA = ~DIO_PORTA;
    191a:	ab e3       	ldi	r26, 0x3B	; 59
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	eb e3       	ldi	r30, 0x3B	; 59
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	80 95       	com	r24
    1926:	8c 93       	st	X, r24
    1928:	17 c0       	rjmp	.+46     	; 0x1958 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_B:
			DIO_PORTB = ~DIO_PORTB;
    192a:	a8 e3       	ldi	r26, 0x38	; 56
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e8 e3       	ldi	r30, 0x38	; 56
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 95       	com	r24
    1936:	8c 93       	st	X, r24
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_C:
			DIO_PORTC = ~DIO_PORTC;
    193a:	a5 e3       	ldi	r26, 0x35	; 53
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e3       	ldi	r30, 0x35	; 53
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	80 95       	com	r24
    1946:	8c 93       	st	X, r24
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_D:
			DIO_PORTD = ~DIO_PORTD;
    194a:	a2 e3       	ldi	r26, 0x32	; 50
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e2 e3       	ldi	r30, 0x32	; 50
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	80 95       	com	r24
    1956:	8c 93       	st	X, r24
			break;
	}

}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <ADC_VoidInitPolling>:
#include "../Header/ADC_Register.h"
#include "../Header/ADC_Private.h"
#include "../Header/ADC_interface.h"

void ADC_VoidInitPolling	(void)
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
	/*enable ADC*/
	Set_Bit(ADC_ADCSRA, ADC_ADEN);
    196c:	a6 e2       	ldi	r26, 0x26	; 38
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e6 e2       	ldi	r30, 0x26	; 38
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 68       	ori	r24, 0x80	; 128
    1978:	8c 93       	st	X, r24
	/*Set reference voltage to AVCC*/
	Set_Bit(ADC_ADMUX, ADC_REFS0);
    197a:	a7 e2       	ldi	r26, 0x27	; 39
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e7 e2       	ldi	r30, 0x27	; 39
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 64       	ori	r24, 0x40	; 64
    1986:	8c 93       	st	X, r24
	clear_Bit(ADC_ADMUX, ADC_REFS1);
    1988:	a7 e2       	ldi	r26, 0x27	; 39
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e7 e2       	ldi	r30, 0x27	; 39
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8f 77       	andi	r24, 0x7F	; 127
    1994:	8c 93       	st	X, r24
	/*deactivate left adjust result*/
	clear_Bit(ADC_ADMUX,ADC_ADLAR);
    1996:	a7 e2       	ldi	r26, 0x27	; 39
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e7 e2       	ldi	r30, 0x27	; 39
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	8f 7d       	andi	r24, 0xDF	; 223
    19a2:	8c 93       	st	X, r24
	/*Select prescaler to 32 --> 011*/
	Set_Bit(ADC_ADCSRA, ADC_ADPS0);
    19a4:	a6 e2       	ldi	r26, 0x26	; 38
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e6 e2       	ldi	r30, 0x26	; 38
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	81 60       	ori	r24, 0x01	; 1
    19b0:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS1);
    19b2:	a6 e2       	ldi	r26, 0x26	; 38
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e6 e2       	ldi	r30, 0x26	; 38
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS2);
    19c0:	a6 e2       	ldi	r26, 0x26	; 38
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e6 e2       	ldi	r30, 0x26	; 38
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	84 60       	ori	r24, 0x04	; 4
    19cc:	8c 93       	st	X, r24

}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <ADC_VoidInitInterrupt>:
void ADC_VoidInitInterrupt	(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	/*enable ADC*/
	Set_Bit(ADC_ADCSRA, ADC_ADEN);
    19dc:	a6 e2       	ldi	r26, 0x26	; 38
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e6 e2       	ldi	r30, 0x26	; 38
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	80 68       	ori	r24, 0x80	; 128
    19e8:	8c 93       	st	X, r24
	/*Set reference voltage to AVCC*/
	Set_Bit(ADC_ADMUX, ADC_REFS0);
    19ea:	a7 e2       	ldi	r26, 0x27	; 39
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e7 e2       	ldi	r30, 0x27	; 39
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	80 64       	ori	r24, 0x40	; 64
    19f6:	8c 93       	st	X, r24
	clear_Bit(ADC_ADMUX, ADC_REFS1);
    19f8:	a7 e2       	ldi	r26, 0x27	; 39
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e7 e2       	ldi	r30, 0x27	; 39
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 77       	andi	r24, 0x7F	; 127
    1a04:	8c 93       	st	X, r24
	/*activate left adjust result*/
	Set_Bit(ADC_ADMUX,ADC_ADLAR);
    1a06:	a7 e2       	ldi	r26, 0x27	; 39
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e7 e2       	ldi	r30, 0x27	; 39
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 62       	ori	r24, 0x20	; 32
    1a12:	8c 93       	st	X, r24
	/*Select prescaler to 8 --> 011*/
	Set_Bit(ADC_ADCSRA, ADC_ADPS0);
    1a14:	a6 e2       	ldi	r26, 0x26	; 38
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e6 e2       	ldi	r30, 0x26	; 38
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	81 60       	ori	r24, 0x01	; 1
    1a20:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS1);
    1a22:	a6 e2       	ldi	r26, 0x26	; 38
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e6 e2       	ldi	r30, 0x26	; 38
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	82 60       	ori	r24, 0x02	; 2
    1a2e:	8c 93       	st	X, r24
	clear_Bit(ADC_ADCSRA, ADC_ADPS2);
    1a30:	a6 e2       	ldi	r26, 0x26	; 38
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e6 e2       	ldi	r30, 0x26	; 38
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8b 7f       	andi	r24, 0xFB	; 251
    1a3c:	8c 93       	st	X, r24
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <ADC_U16GetValue>:

u16 ADC_U16GetValue(u8 ADC_Channel)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <ADC_U16GetValue+0x6>
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	8b 83       	std	Y+3, r24	; 0x03
	u16 LOCAL_READ ;
	/*Select THe 5 Bit */
	ADC_Channel  = ADC_Channel & 0x1F;
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	8f 71       	andi	r24, 0x1F	; 31
    1a56:	8b 83       	std	Y+3, r24	; 0x03
	ADC_ADMUX  &= 0xE0 ;
    1a58:	a7 e2       	ldi	r26, 0x27	; 39
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e7 e2       	ldi	r30, 0x27	; 39
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 7e       	andi	r24, 0xE0	; 224
    1a64:	8c 93       	st	X, r24
	ADC_ADMUX  |= ADC_Channel ;
    1a66:	a7 e2       	ldi	r26, 0x27	; 39
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e7 e2       	ldi	r30, 0x27	; 39
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	90 81       	ld	r25, Z
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	89 2b       	or	r24, r25
    1a74:	8c 93       	st	X, r24
	/*Start conversion*/
	ADC_ADCSRA |= (1<<ADC_ADSC);
    1a76:	a6 e2       	ldi	r26, 0x26	; 38
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e6 e2       	ldi	r30, 0x26	; 38
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	80 64       	ori	r24, 0x40	; 64
    1a82:	8c 93       	st	X, r24
	while((Get_Bit(ADC_ADCSRA,ADC_ADIF)) == 0);
    1a84:	e6 e2       	ldi	r30, 0x26	; 38
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 95       	swap	r24
    1a8c:	8f 70       	andi	r24, 0x0F	; 15
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	81 70       	andi	r24, 0x01	; 1
    1a94:	90 70       	andi	r25, 0x00	; 0
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	a9 f3       	breq	.-22     	; 0x1a84 <ADC_U16GetValue+0x40>
	LOCAL_READ = ADC_ADCW;
    1a9a:	e4 e2       	ldi	r30, 0x24	; 36
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
	return LOCAL_READ;
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <LCD_VoidSendCommand>:
#include "../Header/LCD_Config.h"

#include <util/delay.h>

void LCD_VoidSendCommand(u8 Local_command)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to command --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,Low);
    1ac2:	84 e0       	ldi	r24, 0x04	; 4
    1ac4:	65 e0       	ldi	r22, 0x05	; 5
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    1acc:	84 e0       	ldi	r24, 0x04	; 4
    1ace:	66 e0       	ldi	r22, 0x06	; 6
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
	/*set Enable pin to High*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1ad6:	84 e0       	ldi	r24, 0x04	; 4
    1ad8:	67 e0       	ldi	r22, 0x07	; 7
    1ada:	41 e0       	ldi	r20, 0x01	; 1
    1adc:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
	/*send the command line*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_command);
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	69 81       	ldd	r22, Y+1	; 0x01
    1ae4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	67 e0       	ldi	r22, 0x07	; 7
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
}
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <LCD_VoidSendChar>:
void LCD_VoidSendChar(u8 Local_char)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to Data --> 1*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,High);
    1b06:	84 e0       	ldi	r24, 0x04	; 4
    1b08:	65 e0       	ldi	r22, 0x05	; 5
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	66 e0       	ldi	r22, 0x06	; 6
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1b1a:	84 e0       	ldi	r24, 0x04	; 4
    1b1c:	67 e0       	ldi	r22, 0x07	; 7
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
	/*send the char*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_char);
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	69 81       	ldd	r22, Y+1	; 0x01
    1b28:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    1b2c:	84 e0       	ldi	r24, 0x04	; 4
    1b2e:	67 e0       	ldi	r22, 0x07	; 7
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
}
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <LCD_Void8BitInit>:
void LCD_Void8BitInit(void)
{
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	c6 54       	subi	r28, 0x46	; 70
    1b4c:	d0 40       	sbci	r29, 0x00	; 0
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
	/*Select The Directions*/
	DIO_VoidSetPortDir(LCD_DataGroup,Max_Output);
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	6f ef       	ldi	r22, 0xFF	; 255
    1b5c:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_VoidSetPortDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RS_Pin, Output);
    1b60:	84 e0       	ldi	r24, 0x04	; 4
    1b62:	65 e0       	ldi	r22, 0x05	; 5
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RW_Pin, Output);
    1b6a:	84 e0       	ldi	r24, 0x04	; 4
    1b6c:	66 e0       	ldi	r22, 0x06	; 6
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_E_Pin, Output);
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	67 e0       	ldi	r22, 0x07	; 7
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinDir>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ed 5b       	subi	r30, 0xBD	; 189
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	ac e0       	ldi	r26, 0x0C	; 12
    1b8a:	b2 e4       	ldi	r27, 0x42	; 66
    1b8c:	80 83       	st	Z, r24
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	a2 83       	std	Z+2, r26	; 0x02
    1b92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	8e 01       	movw	r16, r28
    1b96:	01 5c       	subi	r16, 0xC1	; 193
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ed 5b       	subi	r30, 0xBD	; 189
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	f8 01       	movw	r30, r16
    1bba:	80 83       	st	Z, r24
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	a2 83       	std	Z+2, r26	; 0x02
    1bc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ff 96       	adiw	r30, 0x3f	; 63
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <LCD_Void8BitInit+0xaa>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9e af       	std	Y+62, r25	; 0x3e
    1be4:	8d af       	std	Y+61, r24	; 0x3d
    1be6:	46 c0       	rjmp	.+140    	; 0x1c74 <LCD_Void8BitInit+0x136>
	else if (__tmp > 65535)
    1be8:	fe 01       	movw	r30, r28
    1bea:	ff 96       	adiw	r30, 0x3f	; 63
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	3f ef       	ldi	r19, 0xFF	; 255
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	57 e4       	ldi	r21, 0x47	; 71
    1bfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c00:	18 16       	cp	r1, r24
    1c02:	64 f5       	brge	.+88     	; 0x1c5c <LCD_Void8BitInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c04:	fe 01       	movw	r30, r28
    1c06:	ed 5b       	subi	r30, 0xBD	; 189
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e af       	std	Y+62, r25	; 0x3e
    1c30:	8d af       	std	Y+61, r24	; 0x3d
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <LCD_Void8BitInit+0x114>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c af       	std	Y+60, r25	; 0x3c
    1c3a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_Void8BitInit+0x102>
    1c44:	9c af       	std	Y+60, r25	; 0x3c
    1c46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9e af       	std	Y+62, r25	; 0x3e
    1c50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <LCD_Void8BitInit+0xf6>
    1c5a:	16 c0       	rjmp	.+44     	; 0x1c88 <LCD_Void8BitInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	ff 96       	adiw	r30, 0x3f	; 63
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e af       	std	Y+62, r25	; 0x3e
    1c72:	8d af       	std	Y+61, r24	; 0x3d
    1c74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c78:	9a af       	std	Y+58, r25	; 0x3a
    1c7a:	89 af       	std	Y+57, r24	; 0x39
    1c7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_Void8BitInit+0x142>
    1c84:	9a af       	std	Y+58, r25	; 0x3a
    1c86:	89 af       	std	Y+57, r24	; 0x39

	/*wait for more than 30ms after power up*/
	_delay_ms(35);
	/*function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8);
    1c88:	88 e3       	ldi	r24, 0x38	; 56
    1c8a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e8       	ldi	r26, 0x80	; 128
    1c94:	bf e3       	ldi	r27, 0x3F	; 63
    1c96:	8d ab       	std	Y+53, r24	; 0x35
    1c98:	9e ab       	std	Y+54, r25	; 0x36
    1c9a:	af ab       	std	Y+55, r26	; 0x37
    1c9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	89 ab       	std	Y+49, r24	; 0x31
    1cb8:	9a ab       	std	Y+50, r25	; 0x32
    1cba:	ab ab       	std	Y+51, r26	; 0x33
    1cbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <LCD_Void8BitInit+0x1a2>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	98 ab       	std	Y+48, r25	; 0x30
    1cdc:	8f a7       	std	Y+47, r24	; 0x2f
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <LCD_Void8BitInit+0x220>
	else if (__tmp > 65535)
    1ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <LCD_Void8BitInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1cfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	98 ab       	std	Y+48, r25	; 0x30
    1d1e:	8f a7       	std	Y+47, r24	; 0x2f
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_Void8BitInit+0x202>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e a7       	std	Y+46, r25	; 0x2e
    1d28:	8d a7       	std	Y+45, r24	; 0x2d
    1d2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_Void8BitInit+0x1f0>
    1d32:	9e a7       	std	Y+46, r25	; 0x2e
    1d34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d38:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	98 ab       	std	Y+48, r25	; 0x30
    1d3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d42:	98 a9       	ldd	r25, Y+48	; 0x30
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_Void8BitInit+0x1e4>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <LCD_Void8BitInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d50:	9c a9       	ldd	r25, Y+52	; 0x34
    1d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	98 ab       	std	Y+48, r25	; 0x30
    1d5c:	8f a7       	std	Y+47, r24	; 0x2f
    1d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d60:	98 a9       	ldd	r25, Y+48	; 0x30
    1d62:	9c a7       	std	Y+44, r25	; 0x2c
    1d64:	8b a7       	std	Y+43, r24	; 0x2b
    1d66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_Void8BitInit+0x22c>
    1d6e:	9c a7       	std	Y+44, r25	; 0x2c
    1d70:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Display On off control*/
	LCD_VoidSendCommand(LCD_CursorON);
    1d72:	8e e0       	ldi	r24, 0x0E	; 14
    1d74:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e8       	ldi	r26, 0x80	; 128
    1d7e:	bf e3       	ldi	r27, 0x3F	; 63
    1d80:	8f a3       	std	Y+39, r24	; 0x27
    1d82:	98 a7       	std	Y+40, r25	; 0x28
    1d84:	a9 a7       	std	Y+41, r26	; 0x29
    1d86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6f a1       	ldd	r22, Y+39	; 0x27
    1d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a ef       	ldi	r20, 0xFA	; 250
    1d96:	54 e4       	ldi	r21, 0x44	; 68
    1d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8b a3       	std	Y+35, r24	; 0x23
    1da2:	9c a3       	std	Y+36, r25	; 0x24
    1da4:	ad a3       	std	Y+37, r26	; 0x25
    1da6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da8:	6b a1       	ldd	r22, Y+35	; 0x23
    1daa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dac:	8d a1       	ldd	r24, Y+37	; 0x25
    1dae:	9e a1       	ldd	r25, Y+38	; 0x26
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <LCD_Void8BitInit+0x28c>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <LCD_Void8BitInit+0x30a>
	else if (__tmp > 65535)
    1dca:	6b a1       	ldd	r22, Y+35	; 0x23
    1dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dce:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <LCD_Void8BitInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6f a1       	ldd	r22, Y+39	; 0x27
    1de4:	78 a5       	ldd	r23, Y+40	; 0x28
    1de6:	89 a5       	ldd	r24, Y+41	; 0x29
    1de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9a a3       	std	Y+34, r25	; 0x22
    1e08:	89 a3       	std	Y+33, r24	; 0x21
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <LCD_Void8BitInit+0x2ec>
    1e0c:	88 ec       	ldi	r24, 0xC8	; 200
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	98 a3       	std	Y+32, r25	; 0x20
    1e12:	8f 8f       	std	Y+31, r24	; 0x1f
    1e14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e16:	98 a1       	ldd	r25, Y+32	; 0x20
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_Void8BitInit+0x2da>
    1e1c:	98 a3       	std	Y+32, r25	; 0x20
    1e1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	89 a1       	ldd	r24, Y+33	; 0x21
    1e22:	9a a1       	ldd	r25, Y+34	; 0x22
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	9a a3       	std	Y+34, r25	; 0x22
    1e28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <LCD_Void8BitInit+0x2ce>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <LCD_Void8BitInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	6b a1       	ldd	r22, Y+35	; 0x23
    1e36:	7c a1       	ldd	r23, Y+36	; 0x24
    1e38:	8d a1       	ldd	r24, Y+37	; 0x25
    1e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9a a3       	std	Y+34, r25	; 0x22
    1e46:	89 a3       	std	Y+33, r24	; 0x21
    1e48:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_Void8BitInit+0x316>
    1e58:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Clear LCD*/
	LCD_VoidSendCommand(LCD_ClearDisplay);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e4       	ldi	r27, 0x40	; 64
    1e6a:	89 8f       	std	Y+25, r24	; 0x19
    1e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	69 8d       	ldd	r22, Y+25	; 0x19
    1e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	9e 8b       	std	Y+22, r25	; 0x16
    1e8e:	af 8b       	std	Y+23, r26	; 0x17
    1e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <LCD_Void8BitInit+0x376>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <LCD_Void8BitInit+0x3f4>
	else if (__tmp > 65535)
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <LCD_Void8BitInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_Void8BitInit+0x3d6>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
    1efe:	89 89       	ldd	r24, Y+17	; 0x11
    1f00:	9a 89       	ldd	r25, Y+18	; 0x12
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_Void8BitInit+0x3c4>
    1f06:	9a 8b       	std	Y+18, r25	; 0x12
    1f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LCD_Void8BitInit+0x3b8>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <LCD_Void8BitInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 89       	ldd	r25, Y+16	; 0x10
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_Void8BitInit+0x400>
    1f42:	98 8b       	std	Y+16, r25	; 0x10
    1f44:	8f 87       	std	Y+15, r24	; 0x0f
	/*wait for more than 1.53ms*/
	_delay_ms(2);
	/*Entry Mode*/
	LCD_VoidSendCommand(LCD_EntryMode2);
    1f46:	86 e0       	ldi	r24, 0x06	; 6
    1f48:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e8       	ldi	r26, 0x80	; 128
    1f52:	bf e3       	ldi	r27, 0x3F	; 63
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    1f56:	9c 87       	std	Y+12, r25	; 0x0c
    1f58:	ad 87       	std	Y+13, r26	; 0x0d
    1f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a9 87       	std	Y+9, r26	; 0x09
    1f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <LCD_Void8BitInit+0x460>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <LCD_Void8BitInit+0x4de>
	else if (__tmp > 65535)
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <LCD_Void8BitInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <LCD_Void8BitInit+0x4c0>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_Void8BitInit+0x4ae>
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <LCD_Void8BitInit+0x4a2>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <LCD_Void8BitInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_Void8BitInit+0x4ea>
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2030:	ca 5b       	subi	r28, 0xBA	; 186
    2032:	df 4f       	sbci	r29, 0xFF	; 255
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <LCD_VoidSendString>:
void LCD_VoidSendString (char *Ref_string)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <LCD_VoidSendString+0x6>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	0a c0       	rjmp	.+20     	; 0x206c <LCD_VoidSendString+0x24>
	while (*Ref_string != '\0')
	{
		LCD_VoidSendChar(*Ref_string);
    2058:	e9 81       	ldd	r30, Y+1	; 0x01
    205a:	fa 81       	ldd	r31, Y+2	; 0x02
    205c:	80 81       	ld	r24, Z
    205e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <LCD_VoidSendChar>
		Ref_string++;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LCD_EntryMode2);
	_delay_ms(1);
}
void LCD_VoidSendString (char *Ref_string)
{
	while (*Ref_string != '\0')
    206c:	e9 81       	ldd	r30, Y+1	; 0x01
    206e:	fa 81       	ldd	r31, Y+2	; 0x02
    2070:	80 81       	ld	r24, Z
    2072:	88 23       	and	r24, r24
    2074:	89 f7       	brne	.-30     	; 0x2058 <LCD_VoidSendString+0x10>
	{
		LCD_VoidSendChar(*Ref_string);
		Ref_string++;
	}
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32 Local_Number)
{
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	28 97       	sbiw	r28, 0x08	; 8
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	6d 83       	std	Y+5, r22	; 0x05
    209e:	7e 83       	std	Y+6, r23	; 0x06
    20a0:	8f 83       	std	Y+7, r24	; 0x07
    20a2:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_ReversedNum = 2;
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e0       	ldi	r26, 0x00	; 0
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	ab 83       	std	Y+3, r26	; 0x03
    20b2:	bc 83       	std	Y+4, r27	; 0x04
    20b4:	36 c0       	rjmp	.+108    	; 0x2122 <LCD_VoidSendNumber+0xa2>
	while (Local_Number != 0)
	{
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	ab 81       	ldd	r26, Y+3	; 0x03
    20bc:	bc 81       	ldd	r27, Y+4	; 0x04
    20be:	2a e0       	ldi	r18, 0x0A	; 10
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__mulsi3>
    20ce:	7b 01       	movw	r14, r22
    20d0:	8c 01       	movw	r16, r24
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	af 81       	ldd	r26, Y+7	; 0x07
    20d8:	b8 85       	ldd	r27, Y+8	; 0x08
    20da:	2a e0       	ldi	r18, 0x0A	; 10
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 77 17 	call	0x2eee	; 0x2eee <__udivmodsi4>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	8e 0d       	add	r24, r14
    20f0:	9f 1d       	adc	r25, r15
    20f2:	a0 1f       	adc	r26, r16
    20f4:	b1 1f       	adc	r27, r17
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	ab 83       	std	Y+3, r26	; 0x03
    20fc:	bc 83       	std	Y+4, r27	; 0x04
		Local_Number = Local_Number / 10;
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	af 81       	ldd	r26, Y+7	; 0x07
    2104:	b8 85       	ldd	r27, Y+8	; 0x08
    2106:	2a e0       	ldi	r18, 0x0A	; 10
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 77 17 	call	0x2eee	; 0x2eee <__udivmodsi4>
    2116:	da 01       	movw	r26, r20
    2118:	c9 01       	movw	r24, r18
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	af 83       	std	Y+7, r26	; 0x07
    2120:	b8 87       	std	Y+8, r27	; 0x08
	}
}
void LCD_VoidSendNumber(u32 Local_Number)
{
	u32 Local_ReversedNum = 2;
	while (Local_Number != 0)
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	af 81       	ldd	r26, Y+7	; 0x07
    2128:	b8 85       	ldd	r27, Y+8	; 0x08
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	a1 05       	cpc	r26, r1
    212e:	b1 05       	cpc	r27, r1
    2130:	11 f6       	brne	.-124    	; 0x20b6 <LCD_VoidSendNumber+0x36>
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
		Local_Number = Local_Number / 10;
	}
	do
	{
		LCD_VoidSendChar((Local_ReversedNum%10)+ '0');
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	ab 81       	ldd	r26, Y+3	; 0x03
    2138:	bc 81       	ldd	r27, Y+4	; 0x04
    213a:	2a e0       	ldi	r18, 0x0A	; 10
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 77 17 	call	0x2eee	; 0x2eee <__udivmodsi4>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	80 5d       	subi	r24, 0xD0	; 208
    2150:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <LCD_VoidSendChar>
		Local_ReversedNum /= 10;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	ab 81       	ldd	r26, Y+3	; 0x03
    215a:	bc 81       	ldd	r27, Y+4	; 0x04
    215c:	2a e0       	ldi	r18, 0x0A	; 10
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 77 17 	call	0x2eee	; 0x2eee <__udivmodsi4>
    216c:	da 01       	movw	r26, r20
    216e:	c9 01       	movw	r24, r18
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	ab 83       	std	Y+3, r26	; 0x03
    2176:	bc 83       	std	Y+4, r27	; 0x04
	}while(Local_ReversedNum != 2);
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	ab 81       	ldd	r26, Y+3	; 0x03
    217e:	bc 81       	ldd	r27, Y+4	; 0x04
    2180:	82 30       	cpi	r24, 0x02	; 2
    2182:	91 05       	cpc	r25, r1
    2184:	a1 05       	cpc	r26, r1
    2186:	b1 05       	cpc	r27, r1
    2188:	a1 f6       	brne	.-88     	; 0x2132 <LCD_VoidSendNumber+0xb2>
	}
	for (int count = i-1; count >= 0; count--)
	{
		LCD_VoidSendChar(arr[count] + '0');
	}*/
}
    218a:	28 96       	adiw	r28, 0x08	; 8
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	ef 90       	pop	r14
    21a2:	08 95       	ret

000021a4 <LCD_VoidStartFrom>:
void LCD_VoidStartFrom(u8 Local_RowPosition, u8 Local_ColPosition)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <LCD_VoidStartFrom+0x6>
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	8a 83       	std	Y+2, r24	; 0x02
    21b2:	6b 83       	std	Y+3, r22	; 0x03
	if((Local_ColPosition < Cols_Number) && (Local_RowPosition < Rows_Number))
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	80 31       	cpi	r24, 0x10	; 16
    21b8:	b8 f4       	brcc	.+46     	; 0x21e8 <LCD_VoidStartFrom+0x44>
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	a0 f4       	brcc	.+40     	; 0x21e8 <LCD_VoidStartFrom+0x44>
	{
		u8 Local_DDRAMAddress = LCD_SetAddressDDRAM + (Local_RowPosition * Line1_Address) + Local_ColPosition;
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	02 96       	adiw	r24, 0x02	; 2
    21c8:	00 24       	eor	r0, r0
    21ca:	96 95       	lsr	r25
    21cc:	87 95       	ror	r24
    21ce:	07 94       	ror	r0
    21d0:	96 95       	lsr	r25
    21d2:	87 95       	ror	r24
    21d4:	07 94       	ror	r0
    21d6:	98 2f       	mov	r25, r24
    21d8:	80 2d       	mov	r24, r0
    21da:	98 2f       	mov	r25, r24
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	89 0f       	add	r24, r25
    21e0:	89 83       	std	Y+1, r24	; 0x01
		LCD_VoidSendCommand(Local_DDRAMAddress);
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
	}
}
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <LCD_VoidSendStringFromPos>:
void LCD_VoidSendStringFromPos (char *Ref_string, u8 Local_RowPosition, u8 Local_ColPosition)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <LCD_VoidSendStringFromPos+0x6>
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <LCD_VoidSendStringFromPos+0x8>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <LCD_VoidSendStringFromPos+0xa>
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
    2206:	6d 83       	std	Y+5, r22	; 0x05
    2208:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_Index = 0;
    220a:	1a 82       	std	Y+2, r1	; 0x02
	u8 line;
	if (Local_RowPosition == 0)
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	88 23       	and	r24, r24
    2210:	11 f4       	brne	.+4      	; 0x2216 <LCD_VoidSendStringFromPos+0x22>
	{
		line = Line_1;
    2212:	19 82       	std	Y+1, r1	; 0x01
    2214:	05 c0       	rjmp	.+10     	; 0x2220 <LCD_VoidSendStringFromPos+0x2c>
	}
	else if (Local_RowPosition == 1)
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	11 f4       	brne	.+4      	; 0x2220 <LCD_VoidSendStringFromPos+0x2c>
	{
		line = Line_2;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	6e 81       	ldd	r22, Y+6	; 0x06
    2224:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_VoidStartFrom>
    2228:	90 c0       	rjmp	.+288    	; 0x234a <LCD_VoidSendStringFromPos+0x156>
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
	{
		if((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Cols_Number)
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	ac 01       	movw	r20, r24
    2232:	42 95       	swap	r20
    2234:	52 95       	swap	r21
    2236:	50 7f       	andi	r21, 0xF0	; 240
    2238:	54 27       	eor	r21, r20
    223a:	40 7f       	andi	r20, 0xF0	; 240
    223c:	54 27       	eor	r21, r20
    223e:	8e 81       	ldd	r24, Y+6	; 0x06
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	84 0f       	add	r24, r20
    2250:	95 1f       	adc	r25, r21
    2252:	80 31       	cpi	r24, 0x10	; 16
    2254:	91 05       	cpc	r25, r1
    2256:	7c f4       	brge	.+30     	; 0x2276 <LCD_VoidSendStringFromPos+0x82>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	fc 01       	movw	r30, r24
    2264:	e2 0f       	add	r30, r18
    2266:	f3 1f       	adc	r31, r19
    2268:	80 81       	ld	r24, Z
    226a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <LCD_VoidSendChar>
			Local_Index++;
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	8f 5f       	subi	r24, 0xFF	; 255
    2272:	8a 83       	std	Y+2, r24	; 0x02
    2274:	6a c0       	rjmp	.+212    	; 0x234a <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) == Cols_Number) && (line == Line_1))
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	ac 01       	movw	r20, r24
    227e:	42 95       	swap	r20
    2280:	52 95       	swap	r21
    2282:	50 7f       	andi	r21, 0xF0	; 240
    2284:	54 27       	eor	r21, r20
    2286:	40 7f       	andi	r20, 0xF0	; 240
    2288:	54 27       	eor	r21, r20
    228a:	8e 81       	ldd	r24, Y+6	; 0x06
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	84 0f       	add	r24, r20
    229c:	95 1f       	adc	r25, r21
    229e:	80 31       	cpi	r24, 0x10	; 16
    22a0:	91 05       	cpc	r25, r1
    22a2:	69 f4       	brne	.+26     	; 0x22be <LCD_VoidSendStringFromPos+0xca>
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	88 23       	and	r24, r24
    22a8:	51 f4       	brne	.+20     	; 0x22be <LCD_VoidSendStringFromPos+0xca>
		{
			LCD_VoidStartFrom(1,0);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_VoidStartFrom>
			line = Line_2;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	89 83       	std	Y+1, r24	; 0x01
			Local_RowPosition = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	8d 83       	std	Y+5, r24	; 0x05
			Local_ColPosition = 0;
    22ba:	1e 82       	std	Y+6, r1	; 0x06
    22bc:	46 c0       	rjmp	.+140    	; 0x234a <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Total_blocks_Num) && (line == Line_2))
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	ac 01       	movw	r20, r24
    22c6:	42 95       	swap	r20
    22c8:	52 95       	swap	r21
    22ca:	50 7f       	andi	r21, 0xF0	; 240
    22cc:	54 27       	eor	r21, r20
    22ce:	40 7f       	andi	r20, 0xF0	; 240
    22d0:	54 27       	eor	r21, r20
    22d2:	8e 81       	ldd	r24, Y+6	; 0x06
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	84 0f       	add	r24, r20
    22e4:	95 1f       	adc	r25, r21
    22e6:	80 32       	cpi	r24, 0x20	; 32
    22e8:	91 05       	cpc	r25, r1
    22ea:	7c f5       	brge	.+94     	; 0x234a <LCD_VoidSendStringFromPos+0x156>
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	61 f5       	brne	.+88     	; 0x234a <LCD_VoidSendStringFromPos+0x156>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	fc 01       	movw	r30, r24
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	80 81       	ld	r24, Z
    2304:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <LCD_VoidSendChar>
			Local_Index++;
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	8f 5f       	subi	r24, 0xFF	; 255
    230c:	8a 83       	std	Y+2, r24	; 0x02
			if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index)) == Total_blocks_Num)
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	ac 01       	movw	r20, r24
    2316:	42 95       	swap	r20
    2318:	52 95       	swap	r21
    231a:	50 7f       	andi	r21, 0xF0	; 240
    231c:	54 27       	eor	r21, r20
    231e:	40 7f       	andi	r20, 0xF0	; 240
    2320:	54 27       	eor	r21, r20
    2322:	8e 81       	ldd	r24, Y+6	; 0x06
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	82 0f       	add	r24, r18
    2330:	93 1f       	adc	r25, r19
    2332:	84 0f       	add	r24, r20
    2334:	95 1f       	adc	r25, r21
    2336:	80 32       	cpi	r24, 0x20	; 32
    2338:	91 05       	cpc	r25, r1
    233a:	39 f4       	brne	.+14     	; 0x234a <LCD_VoidSendStringFromPos+0x156>
			{
				LCD_VoidStartFrom(0,0);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_VoidStartFrom>
				Local_RowPosition = 0;
    2344:	1d 82       	std	Y+5, r1	; 0x05
				Local_ColPosition = 0;
    2346:	1e 82       	std	Y+6, r1	; 0x06
				line = Line_1;
    2348:	19 82       	std	Y+1, r1	; 0x01
	else if (Local_RowPosition == 1)
	{
		line = Line_2;
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	fc 01       	movw	r30, r24
    2356:	e2 0f       	add	r30, r18
    2358:	f3 1f       	adc	r31, r19
    235a:	80 81       	ld	r24, Z
    235c:	88 23       	and	r24, r24
    235e:	c1 f0       	breq	.+48     	; 0x2390 <LCD_VoidSendStringFromPos+0x19c>
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	ac 01       	movw	r20, r24
    2368:	42 95       	swap	r20
    236a:	52 95       	swap	r21
    236c:	50 7f       	andi	r21, 0xF0	; 240
    236e:	54 27       	eor	r21, r20
    2370:	40 7f       	andi	r20, 0xF0	; 240
    2372:	54 27       	eor	r21, r20
    2374:	8e 81       	ldd	r24, Y+6	; 0x06
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	82 0f       	add	r24, r18
    2382:	93 1f       	adc	r25, r19
    2384:	84 0f       	add	r24, r20
    2386:	95 1f       	adc	r25, r21
    2388:	80 32       	cpi	r24, 0x20	; 32
    238a:	91 05       	cpc	r25, r1
    238c:	0c f4       	brge	.+2      	; 0x2390 <LCD_VoidSendStringFromPos+0x19c>
    238e:	4d cf       	rjmp	.-358    	; 0x222a <LCD_VoidSendStringFromPos+0x36>
				Local_ColPosition = 0;
				line = Line_1;
			}
		}
	}
}
    2390:	26 96       	adiw	r28, 0x06	; 6
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <LCD_VoidAddCustomPattern>:
void LCD_VoidAddCustomPattern(u8 * Local_Pattern, u8 Local_IndexCGRAM)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	64 97       	sbiw	r28, 0x14	; 20
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	9b 8b       	std	Y+19, r25	; 0x13
    23b8:	8a 8b       	std	Y+18, r24	; 0x12
    23ba:	6c 8b       	std	Y+20, r22	; 0x14
	if(Local_IndexCGRAM < CGRAM_MaxSize)
    23bc:	8c 89       	ldd	r24, Y+20	; 0x14
    23be:	88 30       	cpi	r24, 0x08	; 8
    23c0:	08 f0       	brcs	.+2      	; 0x23c4 <LCD_VoidAddCustomPattern+0x22>
    23c2:	9a c0       	rjmp	.+308    	; 0x24f8 <LCD_VoidAddCustomPattern+0x156>
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
    23c4:	8c 89       	ldd	r24, Y+20	; 0x14
    23c6:	88 2f       	mov	r24, r24
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	08 96       	adiw	r24, 0x08	; 8
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	89 8b       	std	Y+17, r24	; 0x11
		LCD_VoidSendCommand(Local_CGRAMAddress);
    23da:	89 89       	ldd	r24, Y+17	; 0x11
    23dc:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
		for(int index = 0; index < CGRAM_MaxSize; index++)
    23e0:	18 8a       	std	Y+16, r1	; 0x10
    23e2:	1f 86       	std	Y+15, r1	; 0x0f
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <LCD_VoidAddCustomPattern+0x62>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
    23e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    23e8:	38 89       	ldd	r19, Y+16	; 0x10
    23ea:	8a 89       	ldd	r24, Y+18	; 0x12
    23ec:	9b 89       	ldd	r25, Y+19	; 0x13
    23ee:	fc 01       	movw	r30, r24
    23f0:	e2 0f       	add	r30, r18
    23f2:	f3 1f       	adc	r31, r19
    23f4:	80 81       	ld	r24, Z
    23f6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <LCD_VoidSendChar>
{
	if(Local_IndexCGRAM < CGRAM_MaxSize)
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
		LCD_VoidSendCommand(Local_CGRAMAddress);
		for(int index = 0; index < CGRAM_MaxSize; index++)
    23fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fc:	98 89       	ldd	r25, Y+16	; 0x10
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	98 8b       	std	Y+16, r25	; 0x10
    2402:	8f 87       	std	Y+15, r24	; 0x0f
    2404:	8f 85       	ldd	r24, Y+15	; 0x0f
    2406:	98 89       	ldd	r25, Y+16	; 0x10
    2408:	88 30       	cpi	r24, 0x08	; 8
    240a:	91 05       	cpc	r25, r1
    240c:	64 f3       	brlt	.-40     	; 0x23e6 <LCD_VoidAddCustomPattern+0x44>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
		}
		LCD_VoidSendCommand(LCD_ReturnHome);
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	b0 e4       	ldi	r27, 0x40	; 64
    241c:	8b 87       	std	Y+11, r24	; 0x0b
    241e:	9c 87       	std	Y+12, r25	; 0x0c
    2420:	ad 87       	std	Y+13, r26	; 0x0d
    2422:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	6b 85       	ldd	r22, Y+11	; 0x0b
    2426:	7c 85       	ldd	r23, Y+12	; 0x0c
    2428:	8d 85       	ldd	r24, Y+13	; 0x0d
    242a:	9e 85       	ldd	r25, Y+14	; 0x0e
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a ef       	ldi	r20, 0xFA	; 250
    2432:	54 e4       	ldi	r21, 0x44	; 68
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8f 83       	std	Y+7, r24	; 0x07
    243e:	98 87       	std	Y+8, r25	; 0x08
    2440:	a9 87       	std	Y+9, r26	; 0x09
    2442:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2444:	6f 81       	ldd	r22, Y+7	; 0x07
    2446:	78 85       	ldd	r23, Y+8	; 0x08
    2448:	89 85       	ldd	r24, Y+9	; 0x09
    244a:	9a 85       	ldd	r25, Y+10	; 0x0a
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	2c f4       	brge	.+10     	; 0x2466 <LCD_VoidAddCustomPattern+0xc4>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <LCD_VoidAddCustomPattern+0x142>
	else if (__tmp > 65535)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	4c f5       	brge	.+82     	; 0x24d0 <LCD_VoidAddCustomPattern+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2480:	7c 85       	ldd	r23, Y+12	; 0x0c
    2482:	8d 85       	ldd	r24, Y+13	; 0x0d
    2484:	9e 85       	ldd	r25, Y+14	; 0x0e
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <LCD_VoidAddCustomPattern+0x124>
    24a8:	88 ec       	ldi	r24, 0xC8	; 200
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9c 83       	std	Y+4, r25	; 0x04
    24ae:	8b 83       	std	Y+3, r24	; 0x03
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <LCD_VoidAddCustomPattern+0x112>
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	69 f7       	brne	.-38     	; 0x24a8 <LCD_VoidAddCustomPattern+0x106>
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <LCD_VoidAddCustomPattern+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d0:	6f 81       	ldd	r22, Y+7	; 0x07
    24d2:	78 85       	ldd	r23, Y+8	; 0x08
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	9a 83       	std	Y+2, r25	; 0x02
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_VoidAddCustomPattern+0x14e>
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
		/*Wait more than 1.53ms after ReturnHome Command*/
		_delay_ms(2);
	}
}
    24f8:	64 96       	adiw	r28, 0x14	; 20
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <LCD_VoidCustomDisplay>:
void LCD_VoidCustomDisplay(u8 Local_CGRAMIndex, u8 Local_RowPosition, u8 Local_ColPosition)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	00 d0       	rcall	.+0      	; 0x2510 <LCD_VoidCustomDisplay+0x6>
    2510:	0f 92       	push	r0
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	6a 83       	std	Y+2, r22	; 0x02
    251a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VoidStartFrom(Local_RowPosition, Local_ColPosition);
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	6b 81       	ldd	r22, Y+3	; 0x03
    2520:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_VoidStartFrom>
	LCD_VoidSendChar(Local_CGRAMIndex);
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <LCD_VoidSendChar>
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <LCD_VoidRightShift>:
void LCD_VoidRightShift (char *Ref_string)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	ae 97       	sbiw	r28, 0x2e	; 46
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	9e a7       	std	Y+46, r25	; 0x2e
    254c:	8d a7       	std	Y+45, r24	; 0x2d
	u8 Local_RowPosition = 0;
    254e:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Local_ColPosition = 0;
    2550:	1b a6       	std	Y+43, r1	; 0x2b
    2552:	84 c0       	rjmp	.+264    	; 0x265c <LCD_VoidRightShift+0x126>
	while(1){
		while(Local_RowPosition == Line_1)
		{
			LCD_VoidSendStringFromPos(Ref_string,0,0);
    2554:	8d a5       	ldd	r24, Y+45	; 0x2d
    2556:	9e a5       	ldd	r25, Y+46	; 0x2e
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    2560:	8c e1       	ldi	r24, 0x1C	; 28
    2562:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	aa e7       	ldi	r26, 0x7A	; 122
    256c:	b3 e4       	ldi	r27, 0x43	; 67
    256e:	8f a3       	std	Y+39, r24	; 0x27
    2570:	98 a7       	std	Y+40, r25	; 0x28
    2572:	a9 a7       	std	Y+41, r26	; 0x29
    2574:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	6f a1       	ldd	r22, Y+39	; 0x27
    2578:	78 a5       	ldd	r23, Y+40	; 0x28
    257a:	89 a5       	ldd	r24, Y+41	; 0x29
    257c:	9a a5       	ldd	r25, Y+42	; 0x2a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a ef       	ldi	r20, 0xFA	; 250
    2584:	54 e4       	ldi	r21, 0x44	; 68
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8b a3       	std	Y+35, r24	; 0x23
    2590:	9c a3       	std	Y+36, r25	; 0x24
    2592:	ad a3       	std	Y+37, r26	; 0x25
    2594:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2596:	6b a1       	ldd	r22, Y+35	; 0x23
    2598:	7c a1       	ldd	r23, Y+36	; 0x24
    259a:	8d a1       	ldd	r24, Y+37	; 0x25
    259c:	9e a1       	ldd	r25, Y+38	; 0x26
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <LCD_VoidRightShift+0x82>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9a a3       	std	Y+34, r25	; 0x22
    25b4:	89 a3       	std	Y+33, r24	; 0x21
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <LCD_VoidRightShift+0x100>
	else if (__tmp > 65535)
    25b8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ba:	7c a1       	ldd	r23, Y+36	; 0x24
    25bc:	8d a1       	ldd	r24, Y+37	; 0x25
    25be:	9e a1       	ldd	r25, Y+38	; 0x26
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	4c f5       	brge	.+82     	; 0x2622 <LCD_VoidRightShift+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d0:	6f a1       	ldd	r22, Y+39	; 0x27
    25d2:	78 a5       	ldd	r23, Y+40	; 0x28
    25d4:	89 a5       	ldd	r24, Y+41	; 0x29
    25d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9a a3       	std	Y+34, r25	; 0x22
    25f6:	89 a3       	std	Y+33, r24	; 0x21
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <LCD_VoidRightShift+0xe2>
    25fa:	88 ec       	ldi	r24, 0xC8	; 200
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	98 a3       	std	Y+32, r25	; 0x20
    2600:	8f 8f       	std	Y+31, r24	; 0x1f
    2602:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2604:	98 a1       	ldd	r25, Y+32	; 0x20
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <LCD_VoidRightShift+0xd0>
    260a:	98 a3       	std	Y+32, r25	; 0x20
    260c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	89 a1       	ldd	r24, Y+33	; 0x21
    2610:	9a a1       	ldd	r25, Y+34	; 0x22
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9a a3       	std	Y+34, r25	; 0x22
    2616:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	89 a1       	ldd	r24, Y+33	; 0x21
    261a:	9a a1       	ldd	r25, Y+34	; 0x22
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <LCD_VoidRightShift+0xc4>
    2620:	14 c0       	rjmp	.+40     	; 0x264a <LCD_VoidRightShift+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	6b a1       	ldd	r22, Y+35	; 0x23
    2624:	7c a1       	ldd	r23, Y+36	; 0x24
    2626:	8d a1       	ldd	r24, Y+37	; 0x25
    2628:	9e a1       	ldd	r25, Y+38	; 0x26
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9a a3       	std	Y+34, r25	; 0x22
    2634:	89 a3       	std	Y+33, r24	; 0x21
    2636:	89 a1       	ldd	r24, Y+33	; 0x21
    2638:	9a a1       	ldd	r25, Y+34	; 0x22
    263a:	9e 8f       	std	Y+30, r25	; 0x1e
    263c:	8d 8f       	std	Y+29, r24	; 0x1d
    263e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2640:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <LCD_VoidRightShift+0x10c>
    2646:	9e 8f       	std	Y+30, r25	; 0x1e
    2648:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    264a:	8b a5       	ldd	r24, Y+43	; 0x2b
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    2650:	8b a5       	ldd	r24, Y+43	; 0x2b
    2652:	80 31       	cpi	r24, 0x10	; 16
    2654:	19 f4       	brne	.+6      	; 0x265c <LCD_VoidRightShift+0x126>
			{
				Local_ColPosition = 0;
    2656:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_2;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	8c a7       	std	Y+44, r24	; 0x2c
void LCD_VoidRightShift (char *Ref_string)
{
	u8 Local_RowPosition = 0;
	u8 Local_ColPosition = 0;
	while(1){
		while(Local_RowPosition == Line_1)
    265c:	8c a5       	ldd	r24, Y+44	; 0x2c
    265e:	88 23       	and	r24, r24
    2660:	09 f4       	brne	.+2      	; 0x2664 <LCD_VoidRightShift+0x12e>
    2662:	78 cf       	rjmp	.-272    	; 0x2554 <LCD_VoidRightShift+0x1e>
			{
				Local_ColPosition = 0;
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e0       	ldi	r26, 0x00	; 0
    2670:	b0 e4       	ldi	r27, 0x40	; 64
    2672:	89 8f       	std	Y+25, r24	; 0x19
    2674:	9a 8f       	std	Y+26, r25	; 0x1a
    2676:	ab 8f       	std	Y+27, r26	; 0x1b
    2678:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	69 8d       	ldd	r22, Y+25	; 0x19
    267c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    267e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8d 8b       	std	Y+21, r24	; 0x15
    2694:	9e 8b       	std	Y+22, r25	; 0x16
    2696:	af 8b       	std	Y+23, r26	; 0x17
    2698:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    269a:	6d 89       	ldd	r22, Y+21	; 0x15
    269c:	7e 89       	ldd	r23, Y+22	; 0x16
    269e:	8f 89       	ldd	r24, Y+23	; 0x17
    26a0:	98 8d       	ldd	r25, Y+24	; 0x18
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <LCD_VoidRightShift+0x186>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9c 8b       	std	Y+20, r25	; 0x14
    26b8:	8b 8b       	std	Y+19, r24	; 0x13
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <LCD_VoidRightShift+0x204>
	else if (__tmp > 65535)
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <LCD_VoidRightShift+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	69 8d       	ldd	r22, Y+25	; 0x19
    26d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9c 8b       	std	Y+20, r25	; 0x14
    26fa:	8b 8b       	std	Y+19, r24	; 0x13
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <LCD_VoidRightShift+0x1e6>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9a 8b       	std	Y+18, r25	; 0x12
    2704:	89 8b       	std	Y+17, r24	; 0x11
    2706:	89 89       	ldd	r24, Y+17	; 0x11
    2708:	9a 89       	ldd	r25, Y+18	; 0x12
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_VoidRightShift+0x1d4>
    270e:	9a 8b       	std	Y+18, r25	; 0x12
    2710:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8b 89       	ldd	r24, Y+19	; 0x13
    2714:	9c 89       	ldd	r25, Y+20	; 0x14
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9c 8b       	std	Y+20, r25	; 0x14
    271a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <LCD_VoidRightShift+0x1c8>
    2724:	98 c0       	rjmp	.+304    	; 0x2856 <LCD_VoidRightShift+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6d 89       	ldd	r22, Y+21	; 0x15
    2728:	7e 89       	ldd	r23, Y+22	; 0x16
    272a:	8f 89       	ldd	r24, Y+23	; 0x17
    272c:	98 8d       	ldd	r25, Y+24	; 0x18
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
    273a:	8b 89       	ldd	r24, Y+19	; 0x13
    273c:	9c 89       	ldd	r25, Y+20	; 0x14
    273e:	98 8b       	std	Y+16, r25	; 0x10
    2740:	8f 87       	std	Y+15, r24	; 0x0f
    2742:	8f 85       	ldd	r24, Y+15	; 0x0f
    2744:	98 89       	ldd	r25, Y+16	; 0x10
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_VoidRightShift+0x210>
    274a:	98 8b       	std	Y+16, r25	; 0x10
    274c:	8f 87       	std	Y+15, r24	; 0x0f
    274e:	83 c0       	rjmp	.+262    	; 0x2856 <LCD_VoidRightShift+0x320>
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
		{
			LCD_VoidSendStringFromPos(Ref_string,1,0);
    2750:	8d a5       	ldd	r24, Y+45	; 0x2d
    2752:	9e a5       	ldd	r25, Y+46	; 0x2e
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    275c:	8c e1       	ldi	r24, 0x1C	; 28
    275e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	aa e7       	ldi	r26, 0x7A	; 122
    2768:	b3 e4       	ldi	r27, 0x43	; 67
    276a:	8b 87       	std	Y+11, r24	; 0x0b
    276c:	9c 87       	std	Y+12, r25	; 0x0c
    276e:	ad 87       	std	Y+13, r26	; 0x0d
    2770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a ef       	ldi	r20, 0xFA	; 250
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8f 83       	std	Y+7, r24	; 0x07
    278c:	98 87       	std	Y+8, r25	; 0x08
    278e:	a9 87       	std	Y+9, r26	; 0x09
    2790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <LCD_VoidRightShift+0x27e>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <LCD_VoidRightShift+0x2fc>
	else if (__tmp > 65535)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <LCD_VoidRightShift+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <LCD_VoidRightShift+0x2de>
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_VoidRightShift+0x2cc>
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <LCD_VoidRightShift+0x2c0>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <LCD_VoidRightShift+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_VoidRightShift+0x308>
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    2846:	8b a5       	ldd	r24, Y+43	; 0x2b
    2848:	8f 5f       	subi	r24, 0xFF	; 255
    284a:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    284c:	8b a5       	ldd	r24, Y+43	; 0x2b
    284e:	80 31       	cpi	r24, 0x10	; 16
    2850:	11 f4       	brne	.+4      	; 0x2856 <LCD_VoidRightShift+0x320>
			{
				Local_ColPosition = 0;
    2852:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_1;
    2854:	1c a6       	std	Y+44, r1	; 0x2c
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
    2856:	8c a5       	ldd	r24, Y+44	; 0x2c
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	09 f4       	brne	.+2      	; 0x285e <LCD_VoidRightShift+0x328>
    285c:	79 cf       	rjmp	.-270    	; 0x2750 <LCD_VoidRightShift+0x21a>
    285e:	fe ce       	rjmp	.-516    	; 0x265c <LCD_VoidRightShift+0x126>

00002860 <Keypad_GetPressedKey>:

/**************************************************************************************************/
/****************************************Function Definition***************************************/

u8 Keypad_GetPressedKey(void)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	00 d0       	rcall	.+0      	; 0x2866 <Keypad_GetPressedKey+0x6>
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Row, Local_Col;
	while(1)
	{
		for (Local_Col = 0; Local_Col < N_COL; Local_Col++)
    286a:	19 82       	std	Y+1, r1	; 0x01
    286c:	4c c0       	rjmp	.+152    	; 0x2906 <Keypad_GetPressedKey+0xa6>
		{
			//DIO_VoidSetPortDir(KEYPAD_PORT,(0b00010000 << Local_Col));
			KEYPAD_PORT_DIR = (0b00010000 << Local_Col);
    286e:	ea e3       	ldi	r30, 0x3A	; 58
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	80 e1       	ldi	r24, 0x10	; 16
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <Keypad_GetPressedKey+0x22>
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	2a 95       	dec	r18
    2884:	e2 f7       	brpl	.-8      	; 0x287e <Keypad_GetPressedKey+0x1e>
    2886:	80 83       	st	Z, r24
			//DIO_VoidSetPortValue(KEYPAD_PORT,(~(0b00010000<< Local_Col)));
			KEYPAD_PORT_OUT = (~(0b00010000<< Local_Col));
    2888:	eb e3       	ldi	r30, 0x3B	; 59
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	80 e1       	ldi	r24, 0x10	; 16
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	02 2e       	mov	r0, r18
    2898:	02 c0       	rjmp	.+4      	; 0x289e <Keypad_GetPressedKey+0x3e>
    289a:	88 0f       	add	r24, r24
    289c:	99 1f       	adc	r25, r25
    289e:	0a 94       	dec	r0
    28a0:	e2 f7       	brpl	.-8      	; 0x289a <Keypad_GetPressedKey+0x3a>
    28a2:	80 95       	com	r24
    28a4:	80 83       	st	Z, r24

			for (Local_Row = 0; Local_Row < N_ROW; Local_Row++)
    28a6:	1a 82       	std	Y+2, r1	; 0x02
    28a8:	28 c0       	rjmp	.+80     	; 0x28fa <Keypad_GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,Local_Row))
    28aa:	e9 e3       	ldi	r30, 0x39	; 57
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	a9 01       	movw	r20, r18
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <Keypad_GetPressedKey+0x62>
    28be:	55 95       	asr	r21
    28c0:	47 95       	ror	r20
    28c2:	8a 95       	dec	r24
    28c4:	e2 f7       	brpl	.-8      	; 0x28be <Keypad_GetPressedKey+0x5e>
    28c6:	ca 01       	movw	r24, r20
    28c8:	81 70       	andi	r24, 0x01	; 1
    28ca:	90 70       	andi	r25, 0x00	; 0
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	91 f4       	brne	.+36     	; 0x28f4 <Keypad_GetPressedKey+0x94>
					#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
					#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((Local_Row*N_COL)+Local_Col+1));
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	98 2f       	mov	r25, r24
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	89 0f       	add	r24, r25
    28e4:	8f 5f       	subi	r24, 0xFF	; 255
    28e6:	0e 94 88 14 	call	0x2910	; 0x2910 <Keypad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret
			//DIO_VoidSetPortDir(KEYPAD_PORT,(0b00010000 << Local_Col));
			KEYPAD_PORT_DIR = (0b00010000 << Local_Col);
			//DIO_VoidSetPortValue(KEYPAD_PORT,(~(0b00010000<< Local_Col)));
			KEYPAD_PORT_OUT = (~(0b00010000<< Local_Col));

			for (Local_Row = 0; Local_Row < N_ROW; Local_Row++)
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	8f 5f       	subi	r24, 0xFF	; 255
    28f8:	8a 83       	std	Y+2, r24	; 0x02
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	84 30       	cpi	r24, 0x04	; 4
    28fe:	a8 f2       	brcs	.-86     	; 0x28aa <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey(void)
{
	u8 Local_Row, Local_Col;
	while(1)
	{
		for (Local_Col = 0; Local_Col < N_COL; Local_Col++)
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	84 30       	cpi	r24, 0x04	; 4
    290a:	08 f4       	brcc	.+2      	; 0x290e <Keypad_GetPressedKey+0xae>
    290c:	b0 cf       	rjmp	.-160    	; 0x286e <Keypad_GetPressedKey+0xe>
    290e:	ad cf       	rjmp	.-166    	; 0x286a <Keypad_GetPressedKey+0xa>

00002910 <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	00 d0       	rcall	.+0      	; 0x2916 <Keypad_4x4_adjustKeyNumber+0x6>
    2916:	00 d0       	rcall	.+0      	; 0x2918 <Keypad_4x4_adjustKeyNumber+0x8>
    2918:	0f 92       	push	r0
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	3c 83       	std	Y+4, r19	; 0x04
    2928:	2b 83       	std	Y+3, r18	; 0x03
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	88 30       	cpi	r24, 0x08	; 8
    2930:	91 05       	cpc	r25, r1
    2932:	09 f4       	brne	.+2      	; 0x2936 <Keypad_4x4_adjustKeyNumber+0x26>
    2934:	70 c0       	rjmp	.+224    	; 0x2a16 <Keypad_4x4_adjustKeyNumber+0x106>
    2936:	2b 81       	ldd	r18, Y+3	; 0x03
    2938:	3c 81       	ldd	r19, Y+4	; 0x04
    293a:	29 30       	cpi	r18, 0x09	; 9
    293c:	31 05       	cpc	r19, r1
    293e:	5c f5       	brge	.+86     	; 0x2996 <Keypad_4x4_adjustKeyNumber+0x86>
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	84 30       	cpi	r24, 0x04	; 4
    2946:	91 05       	cpc	r25, r1
    2948:	09 f4       	brne	.+2      	; 0x294c <Keypad_4x4_adjustKeyNumber+0x3c>
    294a:	59 c0       	rjmp	.+178    	; 0x29fe <Keypad_4x4_adjustKeyNumber+0xee>
    294c:	2b 81       	ldd	r18, Y+3	; 0x03
    294e:	3c 81       	ldd	r19, Y+4	; 0x04
    2950:	25 30       	cpi	r18, 0x05	; 5
    2952:	31 05       	cpc	r19, r1
    2954:	9c f4       	brge	.+38     	; 0x297c <Keypad_4x4_adjustKeyNumber+0x6c>
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	9c 81       	ldd	r25, Y+4	; 0x04
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	91 05       	cpc	r25, r1
    295e:	09 f4       	brne	.+2      	; 0x2962 <Keypad_4x4_adjustKeyNumber+0x52>
    2960:	48 c0       	rjmp	.+144    	; 0x29f2 <Keypad_4x4_adjustKeyNumber+0xe2>
    2962:	2b 81       	ldd	r18, Y+3	; 0x03
    2964:	3c 81       	ldd	r19, Y+4	; 0x04
    2966:	23 30       	cpi	r18, 0x03	; 3
    2968:	31 05       	cpc	r19, r1
    296a:	0c f0       	brlt	.+2      	; 0x296e <Keypad_4x4_adjustKeyNumber+0x5e>
    296c:	45 c0       	rjmp	.+138    	; 0x29f8 <Keypad_4x4_adjustKeyNumber+0xe8>
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	81 30       	cpi	r24, 0x01	; 1
    2974:	91 05       	cpc	r25, r1
    2976:	09 f4       	brne	.+2      	; 0x297a <Keypad_4x4_adjustKeyNumber+0x6a>
    2978:	39 c0       	rjmp	.+114    	; 0x29ec <Keypad_4x4_adjustKeyNumber+0xdc>
    297a:	67 c0       	rjmp	.+206    	; 0x2a4a <Keypad_4x4_adjustKeyNumber+0x13a>
    297c:	2b 81       	ldd	r18, Y+3	; 0x03
    297e:	3c 81       	ldd	r19, Y+4	; 0x04
    2980:	26 30       	cpi	r18, 0x06	; 6
    2982:	31 05       	cpc	r19, r1
    2984:	09 f4       	brne	.+2      	; 0x2988 <Keypad_4x4_adjustKeyNumber+0x78>
    2986:	41 c0       	rjmp	.+130    	; 0x2a0a <Keypad_4x4_adjustKeyNumber+0xfa>
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	87 30       	cpi	r24, 0x07	; 7
    298e:	91 05       	cpc	r25, r1
    2990:	0c f0       	brlt	.+2      	; 0x2994 <Keypad_4x4_adjustKeyNumber+0x84>
    2992:	3e c0       	rjmp	.+124    	; 0x2a10 <Keypad_4x4_adjustKeyNumber+0x100>
    2994:	37 c0       	rjmp	.+110    	; 0x2a04 <Keypad_4x4_adjustKeyNumber+0xf4>
    2996:	2b 81       	ldd	r18, Y+3	; 0x03
    2998:	3c 81       	ldd	r19, Y+4	; 0x04
    299a:	2c 30       	cpi	r18, 0x0C	; 12
    299c:	31 05       	cpc	r19, r1
    299e:	09 f4       	brne	.+2      	; 0x29a2 <Keypad_4x4_adjustKeyNumber+0x92>
    29a0:	46 c0       	rjmp	.+140    	; 0x2a2e <Keypad_4x4_adjustKeyNumber+0x11e>
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	9c 81       	ldd	r25, Y+4	; 0x04
    29a6:	8d 30       	cpi	r24, 0x0D	; 13
    29a8:	91 05       	cpc	r25, r1
    29aa:	5c f4       	brge	.+22     	; 0x29c2 <Keypad_4x4_adjustKeyNumber+0xb2>
    29ac:	2b 81       	ldd	r18, Y+3	; 0x03
    29ae:	3c 81       	ldd	r19, Y+4	; 0x04
    29b0:	2a 30       	cpi	r18, 0x0A	; 10
    29b2:	31 05       	cpc	r19, r1
    29b4:	b1 f1       	breq	.+108    	; 0x2a22 <Keypad_4x4_adjustKeyNumber+0x112>
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	8b 30       	cpi	r24, 0x0B	; 11
    29bc:	91 05       	cpc	r25, r1
    29be:	a4 f5       	brge	.+104    	; 0x2a28 <Keypad_4x4_adjustKeyNumber+0x118>
    29c0:	2d c0       	rjmp	.+90     	; 0x2a1c <Keypad_4x4_adjustKeyNumber+0x10c>
    29c2:	2b 81       	ldd	r18, Y+3	; 0x03
    29c4:	3c 81       	ldd	r19, Y+4	; 0x04
    29c6:	2e 30       	cpi	r18, 0x0E	; 14
    29c8:	31 05       	cpc	r19, r1
    29ca:	b9 f1       	breq	.+110    	; 0x2a3a <Keypad_4x4_adjustKeyNumber+0x12a>
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	8e 30       	cpi	r24, 0x0E	; 14
    29d2:	91 05       	cpc	r25, r1
    29d4:	7c f1       	brlt	.+94     	; 0x2a34 <Keypad_4x4_adjustKeyNumber+0x124>
    29d6:	2b 81       	ldd	r18, Y+3	; 0x03
    29d8:	3c 81       	ldd	r19, Y+4	; 0x04
    29da:	2f 30       	cpi	r18, 0x0F	; 15
    29dc:	31 05       	cpc	r19, r1
    29de:	79 f1       	breq	.+94     	; 0x2a3e <Keypad_4x4_adjustKeyNumber+0x12e>
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	80 31       	cpi	r24, 0x10	; 16
    29e6:	91 05       	cpc	r25, r1
    29e8:	69 f1       	breq	.+90     	; 0x2a44 <Keypad_4x4_adjustKeyNumber+0x134>
    29ea:	2f c0       	rjmp	.+94     	; 0x2a4a <Keypad_4x4_adjustKeyNumber+0x13a>
	{
	case 1:		return 'T';
    29ec:	94 e5       	ldi	r25, 0x54	; 84
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	2d c0       	rjmp	.+90     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 2:		return 8;
    29f2:	28 e0       	ldi	r18, 0x08	; 8
    29f4:	2a 83       	std	Y+2, r18	; 0x02
    29f6:	2a c0       	rjmp	.+84     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 3:		return 9;
    29f8:	39 e0       	ldi	r19, 0x09	; 9
    29fa:	3a 83       	std	Y+2, r19	; 0x02
    29fc:	27 c0       	rjmp	.+78     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 4:		return '/';
    29fe:	8f e2       	ldi	r24, 0x2F	; 47
    2a00:	8a 83       	std	Y+2, r24	; 0x02
    2a02:	24 c0       	rjmp	.+72     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 5:		return 'L';
    2a04:	9c e4       	ldi	r25, 0x4C	; 76
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	21 c0       	rjmp	.+66     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 6:		return 'O';
    2a0a:	2f e4       	ldi	r18, 0x4F	; 79
    2a0c:	2a 83       	std	Y+2, r18	; 0x02
    2a0e:	1e c0       	rjmp	.+60     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 7:		return 'F';
    2a10:	36 e4       	ldi	r19, 0x46	; 70
    2a12:	3a 83       	std	Y+2, r19	; 0x02
    2a14:	1b c0       	rjmp	.+54     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 8:		return '*';
    2a16:	8a e2       	ldi	r24, 0x2A	; 42
    2a18:	8a 83       	std	Y+2, r24	; 0x02
    2a1a:	18 c0       	rjmp	.+48     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 9:		return 'A';
    2a1c:	91 e4       	ldi	r25, 0x41	; 65
    2a1e:	9a 83       	std	Y+2, r25	; 0x02
    2a20:	15 c0       	rjmp	.+42     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 10:	return 'B';
    2a22:	22 e4       	ldi	r18, 0x42	; 66
    2a24:	2a 83       	std	Y+2, r18	; 0x02
    2a26:	12 c0       	rjmp	.+36     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 11:	return 'C';
    2a28:	33 e4       	ldi	r19, 0x43	; 67
    2a2a:	3a 83       	std	Y+2, r19	; 0x02
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 12:	return '-';
    2a2e:	8d e2       	ldi	r24, 0x2D	; 45
    2a30:	8a 83       	std	Y+2, r24	; 0x02
    2a32:	0c c0       	rjmp	.+24     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 13:	return 'c';
    2a34:	93 e6       	ldi	r25, 0x63	; 99
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	09 c0       	rjmp	.+18     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 14:	return 0;
    2a3a:	1a 82       	std	Y+2, r1	; 0x02
    2a3c:	07 c0       	rjmp	.+14     	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 15:	return '=';
    2a3e:	2d e3       	ldi	r18, 0x3D	; 61
    2a40:	2a 83       	std	Y+2, r18	; 0x02
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 16:	return '+';
    2a44:	3b e2       	ldi	r19, 0x2B	; 43
    2a46:	3a 83       	std	Y+2, r19	; 0x02
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <Keypad_4x4_adjustKeyNumber+0x13c>
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <Keypad_4x4_adjustKeyNumber+0x140>
				break;
	}
}
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <main>:
#include "../HAL/LCD/Header/LCD_interface.h"
#include "../HAL/KPD/Header/KPD_Interface.h"

#include <util/delay.h>
void main (void)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	c0 54       	subi	r28, 0x40	; 64
    2a6c:	d0 40       	sbci	r29, 0x00	; 0
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
	LCD_Void8BitInit();
    2a78:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <LCD_Void8BitInit>

	u8 Key_Value;
	DIO_VoidSetPinDir(Group_B,Pin_B0,Output);
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinDir>
	DIO_VoidSetPinValue(Group_B,Pin_B0,Low);
    2a86:	82 e0       	ldi	r24, 0x02	; 2
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	40 e0       	ldi	r20, 0x00	; 0
    2a8c:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>

	DIO_VoidSetPinDir(Group_D,Pin_D1,Output);
    2a90:	84 e0       	ldi	r24, 0x04	; 4
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinDir>
	DIO_VoidSetPinValue(Group_D,Pin_D1,Low);
    2a9a:	84 e0       	ldi	r24, 0x04	; 4
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>

	DIO_VoidSetPinDir(Group_D, Pin_D0, Input);
    2aa4:	84 e0       	ldi	r24, 0x04	; 4
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <DIO_VoidSetPinDir>
	DIO_VoidSetPinValue(Group_D,Pin_D0,High);
    2aae:	84 e0       	ldi	r24, 0x04	; 4
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	41 e0       	ldi	r20, 0x01	; 1
    2ab4:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>


	UART_tstrConfiguration object;
	object.UART_u16BaudRate = UART_u16_BAUD_RATE_9600;
    2ab8:	87 e6       	ldi	r24, 0x67	; 103
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	fe 01       	movw	r30, r28
    2abe:	ff 96       	adiw	r30, 0x3f	; 63
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
	object.UART_u8DataBits = UART_u8_EIGHT_DATA_BITS;
    2ac4:	86 e0       	ldi	r24, 0x06	; 6
    2ac6:	8d af       	std	Y+61, r24	; 0x3d
	object.UART_u8Mode = UART_u8_Transmite;
    2ac8:	88 e0       	ldi	r24, 0x08	; 8
    2aca:	8e af       	std	Y+62, r24	; 0x3e
	object.UART_u8PStopBit = UART_u8_ONE_STOP_BIT;
    2acc:	1c ae       	std	Y+60, r1	; 0x3c
	object.UART_u8ParityBits = UART_u8_DISABLED_PARITY;
    2ace:	1b ae       	std	Y+59, r1	; 0x3b

	while(1)
	{
		Key_Value = Keypad_GetPressedKey();
    2ad0:	0e 94 30 14 	call	0x2860	; 0x2860 <Keypad_GetPressedKey>
    2ad4:	8a af       	std	Y+58, r24	; 0x3a
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	aa e7       	ldi	r26, 0x7A	; 122
    2adc:	b3 e4       	ldi	r27, 0x43	; 67
    2ade:	8d ab       	std	Y+53, r24	; 0x35
    2ae0:	9e ab       	std	Y+54, r25	; 0x36
    2ae2:	af ab       	std	Y+55, r26	; 0x37
    2ae4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ae8:	7e a9       	ldd	r23, Y+54	; 0x36
    2aea:	8f a9       	ldd	r24, Y+55	; 0x37
    2aec:	98 ad       	ldd	r25, Y+56	; 0x38
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4a ef       	ldi	r20, 0xFA	; 250
    2af4:	54 e4       	ldi	r21, 0x44	; 68
    2af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	89 ab       	std	Y+49, r24	; 0x31
    2b00:	9a ab       	std	Y+50, r25	; 0x32
    2b02:	ab ab       	std	Y+51, r26	; 0x33
    2b04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b06:	69 a9       	ldd	r22, Y+49	; 0x31
    2b08:	7a a9       	ldd	r23, Y+50	; 0x32
    2b0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e8       	ldi	r20, 0x80	; 128
    2b14:	5f e3       	ldi	r21, 0x3F	; 63
    2b16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b1a:	88 23       	and	r24, r24
    2b1c:	2c f4       	brge	.+10     	; 0x2b28 <main+0xc6>
		__ticks = 1;
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	98 ab       	std	Y+48, r25	; 0x30
    2b24:	8f a7       	std	Y+47, r24	; 0x2f
    2b26:	3f c0       	rjmp	.+126    	; 0x2ba6 <main+0x144>
	else if (__tmp > 65535)
    2b28:	69 a9       	ldd	r22, Y+49	; 0x31
    2b2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	3f ef       	ldi	r19, 0xFF	; 255
    2b34:	4f e7       	ldi	r20, 0x7F	; 127
    2b36:	57 e4       	ldi	r21, 0x47	; 71
    2b38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3c:	18 16       	cp	r1, r24
    2b3e:	4c f5       	brge	.+82     	; 0x2b92 <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b40:	6d a9       	ldd	r22, Y+53	; 0x35
    2b42:	7e a9       	ldd	r23, Y+54	; 0x36
    2b44:	8f a9       	ldd	r24, Y+55	; 0x37
    2b46:	98 ad       	ldd	r25, Y+56	; 0x38
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e2       	ldi	r20, 0x20	; 32
    2b4e:	51 e4       	ldi	r21, 0x41	; 65
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	98 ab       	std	Y+48, r25	; 0x30
    2b66:	8f a7       	std	Y+47, r24	; 0x2f
    2b68:	0f c0       	rjmp	.+30     	; 0x2b88 <main+0x126>
    2b6a:	88 ec       	ldi	r24, 0xC8	; 200
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9e a7       	std	Y+46, r25	; 0x2e
    2b70:	8d a7       	std	Y+45, r24	; 0x2d
    2b72:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b74:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <main+0x114>
    2b7a:	9e a7       	std	Y+46, r25	; 0x2e
    2b7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b80:	98 a9       	ldd	r25, Y+48	; 0x30
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	98 ab       	std	Y+48, r25	; 0x30
    2b86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	69 f7       	brne	.-38     	; 0x2b6a <main+0x108>
    2b90:	14 c0       	rjmp	.+40     	; 0x2bba <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	69 a9       	ldd	r22, Y+49	; 0x31
    2b94:	7a a9       	ldd	r23, Y+50	; 0x32
    2b96:	8b a9       	ldd	r24, Y+51	; 0x33
    2b98:	9c a9       	ldd	r25, Y+52	; 0x34
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	98 ab       	std	Y+48, r25	; 0x30
    2ba4:	8f a7       	std	Y+47, r24	; 0x2f
    2ba6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba8:	98 a9       	ldd	r25, Y+48	; 0x30
    2baa:	9c a7       	std	Y+44, r25	; 0x2c
    2bac:	8b a7       	std	Y+43, r24	; 0x2b
    2bae:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <main+0x150>
    2bb6:	9c a7       	std	Y+44, r25	; 0x2c
    2bb8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250);

		UART_enuInit(&object);
    2bba:	ce 01       	movw	r24, r28
    2bbc:	cb 96       	adiw	r24, 0x3b	; 59
    2bbe:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_enuInit>
		UART_tenuErrorStatus error_status = UART_enuTransmite(Key_Value);
    2bc2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bc4:	88 2f       	mov	r24, r24
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	0e 94 8c 06 	call	0xd18	; 0xd18 <UART_enuTransmite>
    2bcc:	89 af       	std	Y+57, r24	; 0x39
		if (error_status == UART_OK)
    2bce:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <main+0x174>
    2bd4:	7d c0       	rjmp	.+250    	; 0x2cd0 <main+0x26e>
		{
			DIO_VoidSetPinValue(Group_B, Pin_B0, High);
    2bd6:	82 e0       	ldi	r24, 0x02	; 2
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	aa e7       	ldi	r26, 0x7A	; 122
    2be6:	b4 e4       	ldi	r27, 0x44	; 68
    2be8:	8f a3       	std	Y+39, r24	; 0x27
    2bea:	98 a7       	std	Y+40, r25	; 0x28
    2bec:	a9 a7       	std	Y+41, r26	; 0x29
    2bee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf0:	6f a1       	ldd	r22, Y+39	; 0x27
    2bf2:	78 a5       	ldd	r23, Y+40	; 0x28
    2bf4:	89 a5       	ldd	r24, Y+41	; 0x29
    2bf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	4a ef       	ldi	r20, 0xFA	; 250
    2bfe:	54 e4       	ldi	r21, 0x44	; 68
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	8b a3       	std	Y+35, r24	; 0x23
    2c0a:	9c a3       	std	Y+36, r25	; 0x24
    2c0c:	ad a3       	std	Y+37, r26	; 0x25
    2c0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c10:	6b a1       	ldd	r22, Y+35	; 0x23
    2c12:	7c a1       	ldd	r23, Y+36	; 0x24
    2c14:	8d a1       	ldd	r24, Y+37	; 0x25
    2c16:	9e a1       	ldd	r25, Y+38	; 0x26
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	5f e3       	ldi	r21, 0x3F	; 63
    2c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c24:	88 23       	and	r24, r24
    2c26:	2c f4       	brge	.+10     	; 0x2c32 <main+0x1d0>
		__ticks = 1;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	9a a3       	std	Y+34, r25	; 0x22
    2c2e:	89 a3       	std	Y+33, r24	; 0x21
    2c30:	3f c0       	rjmp	.+126    	; 0x2cb0 <main+0x24e>
	else if (__tmp > 65535)
    2c32:	6b a1       	ldd	r22, Y+35	; 0x23
    2c34:	7c a1       	ldd	r23, Y+36	; 0x24
    2c36:	8d a1       	ldd	r24, Y+37	; 0x25
    2c38:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	3f ef       	ldi	r19, 0xFF	; 255
    2c3e:	4f e7       	ldi	r20, 0x7F	; 127
    2c40:	57 e4       	ldi	r21, 0x47	; 71
    2c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c46:	18 16       	cp	r1, r24
    2c48:	4c f5       	brge	.+82     	; 0x2c9c <main+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e2       	ldi	r20, 0x20	; 32
    2c58:	51 e4       	ldi	r21, 0x41	; 65
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	bc 01       	movw	r22, r24
    2c64:	cd 01       	movw	r24, r26
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	9a a3       	std	Y+34, r25	; 0x22
    2c70:	89 a3       	std	Y+33, r24	; 0x21
    2c72:	0f c0       	rjmp	.+30     	; 0x2c92 <main+0x230>
    2c74:	88 ec       	ldi	r24, 0xC8	; 200
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	98 a3       	std	Y+32, r25	; 0x20
    2c7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <main+0x21e>
    2c84:	98 a3       	std	Y+32, r25	; 0x20
    2c86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c88:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	9a a3       	std	Y+34, r25	; 0x22
    2c90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c92:	89 a1       	ldd	r24, Y+33	; 0x21
    2c94:	9a a1       	ldd	r25, Y+34	; 0x22
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	69 f7       	brne	.-38     	; 0x2c74 <main+0x212>
    2c9a:	14 c0       	rjmp	.+40     	; 0x2cc4 <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ca2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9a a3       	std	Y+34, r25	; 0x22
    2cae:	89 a3       	std	Y+33, r24	; 0x21
    2cb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cb6:	8d 8f       	std	Y+29, r24	; 0x1d
    2cb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <main+0x25a>
    2cc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2cc2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			DIO_VoidSetPinValue(Group_B, Pin_B0, Low);
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
    2cce:	05 c0       	rjmp	.+10     	; 0x2cda <main+0x278>
		}
		else
		{
			DIO_VoidSetPinValue(Group_B, Pin_B0, Low);
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VoidSetPinValue>
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_VoidSendCommand>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	a0 e0       	ldi	r26, 0x00	; 0
    2ce6:	b0 e4       	ldi	r27, 0x40	; 64
    2ce8:	89 8f       	std	Y+25, r24	; 0x19
    2cea:	9a 8f       	std	Y+26, r25	; 0x1a
    2cec:	ab 8f       	std	Y+27, r26	; 0x1b
    2cee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a ef       	ldi	r20, 0xFA	; 250
    2cfe:	54 e4       	ldi	r21, 0x44	; 68
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	8d 8b       	std	Y+21, r24	; 0x15
    2d0a:	9e 8b       	std	Y+22, r25	; 0x16
    2d0c:	af 8b       	std	Y+23, r26	; 0x17
    2d0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d10:	6d 89       	ldd	r22, Y+21	; 0x15
    2d12:	7e 89       	ldd	r23, Y+22	; 0x16
    2d14:	8f 89       	ldd	r24, Y+23	; 0x17
    2d16:	98 8d       	ldd	r25, Y+24	; 0x18
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e8       	ldi	r20, 0x80	; 128
    2d1e:	5f e3       	ldi	r21, 0x3F	; 63
    2d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d24:	88 23       	and	r24, r24
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <main+0x2d0>
		__ticks = 1;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9c 8b       	std	Y+20, r25	; 0x14
    2d2e:	8b 8b       	std	Y+19, r24	; 0x13
    2d30:	3f c0       	rjmp	.+126    	; 0x2db0 <main+0x34e>
	else if (__tmp > 65535)
    2d32:	6d 89       	ldd	r22, Y+21	; 0x15
    2d34:	7e 89       	ldd	r23, Y+22	; 0x16
    2d36:	8f 89       	ldd	r24, Y+23	; 0x17
    2d38:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	3f ef       	ldi	r19, 0xFF	; 255
    2d3e:	4f e7       	ldi	r20, 0x7F	; 127
    2d40:	57 e4       	ldi	r21, 0x47	; 71
    2d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d46:	18 16       	cp	r1, r24
    2d48:	4c f5       	brge	.+82     	; 0x2d9c <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	51 e4       	ldi	r21, 0x41	; 65
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9c 8b       	std	Y+20, r25	; 0x14
    2d70:	8b 8b       	std	Y+19, r24	; 0x13
    2d72:	0f c0       	rjmp	.+30     	; 0x2d92 <main+0x330>
    2d74:	88 ec       	ldi	r24, 0xC8	; 200
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9a 8b       	std	Y+18, r25	; 0x12
    2d7a:	89 8b       	std	Y+17, r24	; 0x11
    2d7c:	89 89       	ldd	r24, Y+17	; 0x11
    2d7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <main+0x31e>
    2d84:	9a 8b       	std	Y+18, r25	; 0x12
    2d86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d88:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	9c 8b       	std	Y+20, r25	; 0x14
    2d90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d92:	8b 89       	ldd	r24, Y+19	; 0x13
    2d94:	9c 89       	ldd	r25, Y+20	; 0x14
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	69 f7       	brne	.-38     	; 0x2d74 <main+0x312>
    2d9a:	14 c0       	rjmp	.+40     	; 0x2dc4 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2da0:	8f 89       	ldd	r24, Y+23	; 0x17
    2da2:	98 8d       	ldd	r25, Y+24	; 0x18
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	9c 8b       	std	Y+20, r25	; 0x14
    2dae:	8b 8b       	std	Y+19, r24	; 0x13
    2db0:	8b 89       	ldd	r24, Y+19	; 0x13
    2db2:	9c 89       	ldd	r25, Y+20	; 0x14
    2db4:	98 8b       	std	Y+16, r25	; 0x10
    2db6:	8f 87       	std	Y+15, r24	; 0x0f
    2db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dba:	98 89       	ldd	r25, Y+16	; 0x10
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <main+0x35a>
    2dc0:	98 8b       	std	Y+16, r25	; 0x10
    2dc2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		LCD_VoidSendChar(Key_Value);
    2dc4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dc6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <LCD_VoidSendChar>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	aa e7       	ldi	r26, 0x7A	; 122
    2dd0:	b3 e4       	ldi	r27, 0x43	; 67
    2dd2:	8b 87       	std	Y+11, r24	; 0x0b
    2dd4:	9c 87       	std	Y+12, r25	; 0x0c
    2dd6:	ad 87       	std	Y+13, r26	; 0x0d
    2dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	4a ef       	ldi	r20, 0xFA	; 250
    2de8:	54 e4       	ldi	r21, 0x44	; 68
    2dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	8f 83       	std	Y+7, r24	; 0x07
    2df4:	98 87       	std	Y+8, r25	; 0x08
    2df6:	a9 87       	std	Y+9, r26	; 0x09
    2df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfc:	78 85       	ldd	r23, Y+8	; 0x08
    2dfe:	89 85       	ldd	r24, Y+9	; 0x09
    2e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e8       	ldi	r20, 0x80	; 128
    2e08:	5f e3       	ldi	r21, 0x3F	; 63
    2e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0e:	88 23       	and	r24, r24
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <main+0x3ba>
		__ticks = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	3f c0       	rjmp	.+126    	; 0x2e9a <main+0x438>
	else if (__tmp > 65535)
    2e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1e:	78 85       	ldd	r23, Y+8	; 0x08
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	4c f5       	brge	.+82     	; 0x2e86 <main+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e2       	ldi	r20, 0x20	; 32
    2e42:	51 e4       	ldi	r21, 0x41	; 65
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <main+0x41a>
    2e5e:	88 ec       	ldi	r24, 0xC8	; 200
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	8b 83       	std	Y+3, r24	; 0x03
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <main+0x408>
    2e6e:	9c 83       	std	Y+4, r25	; 0x04
    2e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	8d 81       	ldd	r24, Y+5	; 0x05
    2e74:	9e 81       	ldd	r25, Y+6	; 0x06
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <main+0x3fc>
    2e84:	25 ce       	rjmp	.-950    	; 0x2ad0 <main+0x6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	6f 81       	ldd	r22, Y+7	; 0x07
    2e88:	78 85       	ldd	r23, Y+8	; 0x08
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9e 83       	std	Y+6, r25	; 0x06
    2e98:	8d 83       	std	Y+5, r24	; 0x05
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	9a 83       	std	Y+2, r25	; 0x02
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <main+0x444>
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	10 ce       	rjmp	.-992    	; 0x2ad0 <main+0x6e>

00002eb0 <__mulsi3>:
    2eb0:	62 9f       	mul	r22, r18
    2eb2:	d0 01       	movw	r26, r0
    2eb4:	73 9f       	mul	r23, r19
    2eb6:	f0 01       	movw	r30, r0
    2eb8:	82 9f       	mul	r24, r18
    2eba:	e0 0d       	add	r30, r0
    2ebc:	f1 1d       	adc	r31, r1
    2ebe:	64 9f       	mul	r22, r20
    2ec0:	e0 0d       	add	r30, r0
    2ec2:	f1 1d       	adc	r31, r1
    2ec4:	92 9f       	mul	r25, r18
    2ec6:	f0 0d       	add	r31, r0
    2ec8:	83 9f       	mul	r24, r19
    2eca:	f0 0d       	add	r31, r0
    2ecc:	74 9f       	mul	r23, r20
    2ece:	f0 0d       	add	r31, r0
    2ed0:	65 9f       	mul	r22, r21
    2ed2:	f0 0d       	add	r31, r0
    2ed4:	99 27       	eor	r25, r25
    2ed6:	72 9f       	mul	r23, r18
    2ed8:	b0 0d       	add	r27, r0
    2eda:	e1 1d       	adc	r30, r1
    2edc:	f9 1f       	adc	r31, r25
    2ede:	63 9f       	mul	r22, r19
    2ee0:	b0 0d       	add	r27, r0
    2ee2:	e1 1d       	adc	r30, r1
    2ee4:	f9 1f       	adc	r31, r25
    2ee6:	bd 01       	movw	r22, r26
    2ee8:	cf 01       	movw	r24, r30
    2eea:	11 24       	eor	r1, r1
    2eec:	08 95       	ret

00002eee <__udivmodsi4>:
    2eee:	a1 e2       	ldi	r26, 0x21	; 33
    2ef0:	1a 2e       	mov	r1, r26
    2ef2:	aa 1b       	sub	r26, r26
    2ef4:	bb 1b       	sub	r27, r27
    2ef6:	fd 01       	movw	r30, r26
    2ef8:	0d c0       	rjmp	.+26     	; 0x2f14 <__udivmodsi4_ep>

00002efa <__udivmodsi4_loop>:
    2efa:	aa 1f       	adc	r26, r26
    2efc:	bb 1f       	adc	r27, r27
    2efe:	ee 1f       	adc	r30, r30
    2f00:	ff 1f       	adc	r31, r31
    2f02:	a2 17       	cp	r26, r18
    2f04:	b3 07       	cpc	r27, r19
    2f06:	e4 07       	cpc	r30, r20
    2f08:	f5 07       	cpc	r31, r21
    2f0a:	20 f0       	brcs	.+8      	; 0x2f14 <__udivmodsi4_ep>
    2f0c:	a2 1b       	sub	r26, r18
    2f0e:	b3 0b       	sbc	r27, r19
    2f10:	e4 0b       	sbc	r30, r20
    2f12:	f5 0b       	sbc	r31, r21

00002f14 <__udivmodsi4_ep>:
    2f14:	66 1f       	adc	r22, r22
    2f16:	77 1f       	adc	r23, r23
    2f18:	88 1f       	adc	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	1a 94       	dec	r1
    2f1e:	69 f7       	brne	.-38     	; 0x2efa <__udivmodsi4_loop>
    2f20:	60 95       	com	r22
    2f22:	70 95       	com	r23
    2f24:	80 95       	com	r24
    2f26:	90 95       	com	r25
    2f28:	9b 01       	movw	r18, r22
    2f2a:	ac 01       	movw	r20, r24
    2f2c:	bd 01       	movw	r22, r26
    2f2e:	cf 01       	movw	r24, r30
    2f30:	08 95       	ret

00002f32 <__prologue_saves__>:
    2f32:	2f 92       	push	r2
    2f34:	3f 92       	push	r3
    2f36:	4f 92       	push	r4
    2f38:	5f 92       	push	r5
    2f3a:	6f 92       	push	r6
    2f3c:	7f 92       	push	r7
    2f3e:	8f 92       	push	r8
    2f40:	9f 92       	push	r9
    2f42:	af 92       	push	r10
    2f44:	bf 92       	push	r11
    2f46:	cf 92       	push	r12
    2f48:	df 92       	push	r13
    2f4a:	ef 92       	push	r14
    2f4c:	ff 92       	push	r15
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	ca 1b       	sub	r28, r26
    2f5c:	db 0b       	sbc	r29, r27
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	09 94       	ijmp

00002f6a <__epilogue_restores__>:
    2f6a:	2a 88       	ldd	r2, Y+18	; 0x12
    2f6c:	39 88       	ldd	r3, Y+17	; 0x11
    2f6e:	48 88       	ldd	r4, Y+16	; 0x10
    2f70:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f72:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f74:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f76:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f78:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f7c:	b9 84       	ldd	r11, Y+9	; 0x09
    2f7e:	c8 84       	ldd	r12, Y+8	; 0x08
    2f80:	df 80       	ldd	r13, Y+7	; 0x07
    2f82:	ee 80       	ldd	r14, Y+6	; 0x06
    2f84:	fd 80       	ldd	r15, Y+5	; 0x05
    2f86:	0c 81       	ldd	r16, Y+4	; 0x04
    2f88:	1b 81       	ldd	r17, Y+3	; 0x03
    2f8a:	aa 81       	ldd	r26, Y+2	; 0x02
    2f8c:	b9 81       	ldd	r27, Y+1	; 0x01
    2f8e:	ce 0f       	add	r28, r30
    2f90:	d1 1d       	adc	r29, r1
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	ed 01       	movw	r28, r26
    2f9e:	08 95       	ret

00002fa0 <_exit>:
    2fa0:	f8 94       	cli

00002fa2 <__stop_program>:
    2fa2:	ff cf       	rjmp	.-2      	; 0x2fa2 <__stop_program>
